{"version":3,"sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","../agent/agent.js","0.0.4.ng-se-api.min.js","../agent/misc.js","../agent/note.js","../agent/notification.js","../agent/setting.js","../agent/state.js","../agent/type.js","../apiConfig.js","../auth/auth.js","../module.js","../request.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"angular","module","factory","SesRequest","sesAgentNote","sesAgentNotification","sesAgentMisc","sesAgentSetting","sesAgentState","sesAgentType","create","params","request","post","get","aId","update","agent","put","destroy","del","copy","note","actionlog","chart","notification","setting","state","category","type",2,"listActionlog","action","getChart","parentId","listCategories","list",3,"formatNote","postedOn","Date","then","notes","forEach","nId",4,5,6,"hint","isArray",7,"listSettings","akId",8,"provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey",9,"createApiKey","login","logout",10,11,"sesApiConfig","$q","$http","urlPath","prototype","formatUrl","url","keys","Object","regex","RegExp","test","replace","send","method","fullUrl","deferred","defer","conf","data","resp","resolve","err","reject","promise"],"mappings":"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","file":"0.0.4.ng-se-api.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('sesAgent', ['SesRequest',\r\n                                             'sesAgentNote', 'sesAgentNotification', 'sesAgentMisc', \r\n                                             'sesAgentSetting', 'sesAgentState', 'sesAgentType',\n  function sesAgent(SesRequest, sesAgentNote, sesAgentNotification, sesAgentMisc, sesAgentSetting, sesAgentState, sesAgentType) {\n        var request = new SesRequest('agent/{aId}');\r\n\r\n        function create(params) {\r\n            return request.post(params);\r\n        }\r\n\r\n        function get(aId) {\r\n            return request.get({\r\n                aId: aId\r\n            });\r\n        }\r\n\r\n        function update(agent) {\r\n            return request.put(agent);\r\n        }\r\n\r\n        function destroy(aId) {\r\n            return request.del({\r\n                aId: aId\r\n            });\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * create agent\r\n             * @param {Object} params\r\n             * @config {String} [parentId]\r\n             * @config {String} [type]\r\n             */\r\n            create: function (params) {\r\n                return create(params);\r\n            },\r\n            copy: sesAgentMisc.copy,\r\n\r\n            get: function (aId) {\r\n                return get(aId);\r\n            },\r\n\r\n            /**\r\n             * update agent by id\r\n             * @param {Object} agent\r\n             * @config {String} [aId]\r\n             * @config {String} [name]\r\n             * @config {Number} [interval]\r\n             */\r\n            update: function (agent) {\r\n                return update(agent);\r\n            },\r\n\r\n            destroy: function (aId) {\r\n                return destroy(aId);\r\n            },\r\n\r\n            note: sesAgentNote,\r\n            actionlog: sesAgentMisc.actionlog,\r\n            chart: sesAgentMisc.chart,\r\n            notification: sesAgentNotification,\r\n            setting: sesAgentSetting,\r\n            state: sesAgentState,\n            category: sesAgentMisc.category,\n            type: sesAgentType\n        };\r\n}]);\r\n",null,"\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('sesAgentMisc', ['SesRequest',\r\n  function sesAgent(SesRequest) {\r\n        var request = new SesRequest('agent/{aId}/{action}');\n\r\n        function listActionlog(aId, params) {\r\n            params = params || {};\r\n            params.aId = aId;\r\n            params.action = 'actionlog';\n            return request.get(params);\r\n        }\r\n\r\n        function getChart(aId, params) {\r\n            params = params || {};\r\n            params.aId = aId;\r\n            params.action = 'chart';\n            return request.get(params);\r\n        }\r\n\r\n        function copy(aId, parentId) {\r\n            var params = {};\r\n            params.aId = aId;\r\n            params.parentId = parentId;\r\n            params.action = 'copy';\n            return request.post(params);\r\n        }\r\n\r\n        function listCategories() {\r\n            return request.get({}, 'agent/category');\r\n        }\r\n\r\n        return {\r\n            actionlog: {\r\n                /**\r\n                 * list action log entries\r\n                 * @param   {String} aId    agent id\r\n                 * @param   {Object} params\r\n                 * @config  {Number} start\r\n                 * @config  {Number} limit\r\n                 * @returns {Object} promise\r\n                 */\r\n                list: function (aId, params) {\r\n                    return listActionlog(aId, params);\r\n                }\r\n            },\r\n            chart: {\r\n                /**\r\n                 * get chart config and values\r\n                 * @param   {String} aId    agent id\r\n                 * @param   {Object} params\r\n                 * @config  {Number} start\r\n                 * @config  {Number} limit\r\n                 * @config  {Number} valueType\r\n                 * @returns {Object} promise\r\n                 */\r\n                get: function (aId, params) {\r\n                    return getChart(aId, params);\r\n                }\r\n            },\r\n            category : {\r\n                list: listCategories\r\n            },\r\n            /**\r\n             * copy agent to a parent\r\n             * @param   {String} aId\r\n             * @param   {String}   parentId\r\n             * @returns {Object} promise\r\n             */\r\n            copy: function (aId, parentId) {\r\n                return copy(aId, parentId);\r\n            }\r\n        };\r\n}]);\r\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('sesAgentNote', ['SesRequest',\n  function sesAgent(SesRequest) {\r\n        var request = new SesRequest('agent/{aId}/note/{nId}');\r\n\r\n        function formatNote(note) {\r\n            note.postedOn = new Date(note.postedOn);\r\n            return note;\r\n        }\r\n      \r\n        function create(params) {\r\n            return request.post(params).then(formatNote);\r\n        }\r\n\r\n        function list(aId) {\r\n            return request.get({\r\n                aId: aId\r\n            }).then(function(notes) {\r\n                angular.forEach(notes, formatNote);\r\n                \r\n                return notes;\r\n            });\r\n        }\r\n\r\n        function destroy(aId, nId) {\r\n            return request.del({\r\n                aId: aId,\r\n                nId: nId\r\n            });\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * create agent note\r\n             * @param {Object} params\r\n             * @config {String} [aId]\r\n             * @config {String} [message]\r\n             */\r\n            create: function (params) {\r\n                return create(params);\r\n            },\r\n\r\n            list: function (aId) {\r\n                return list(aId);\r\n            },\r\n\r\n            destroy: function (aId, nId) {\r\n                return destroy(aId, nId);\r\n            }\r\n        };\r\n}]);\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('sesAgentNotification', ['SesRequest',\n  function sesAgent(SesRequest) {\r\n        var request = new SesRequest('agent/{aId}/notification/{nId}');\r\n\r\n        function create(params) {\r\n            return request.post(params);\r\n        }\r\n\r\n        function update(notification) {\r\n            return request.put(notification);\r\n        }\r\n\r\n        function list(aId) {\r\n            return request.get({\r\n                aId: aId\r\n            });\r\n        }\r\n\r\n        function destroy(aId, nId) {\r\n            return request.del({\r\n                aId: aId,\r\n                nId: nId\r\n            });\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * create notification\r\n             * @param {Object} params\r\n             * @config {String} [aId]\r\n             * @config {String} [userId]\r\n             * @config {Boolean} [mail]\r\n             * @config {Boolean} [phone]\r\n             * @config {Boolean} [ticket]\r\n             * @config {String} [deferId]\r\n             */\r\n            create: function (params) {\r\n                return create(params);\r\n            },\r\n\r\n            /**\r\n             * update notification\r\n             * @param {Object} params\r\n             * @config {String} [nId]\r\n             * @config {String} [aId]\r\n             * @config {String} [userId]\r\n             * @config {Boolean} [mail]\r\n             * @config {Boolean} [phone]\r\n             * @config {Boolean} [ticket]\r\n             * @config {String} [deferId]\r\n             */\r\n            update: function (notification) {\r\n                return update(notification);\r\n            },\r\n\r\n            list: function (aId) {\r\n                return list(aId);\r\n            },\r\n\r\n            destroy: function (aId, nId) {\r\n                return destroy(aId, nId);\r\n            }\r\n        };\r\n}]);\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('sesAgentSetting', ['SesRequest',\n  function sesAgent(SesRequest) {\r\n        var request = new SesRequest('agent/{aId}/setting/{key}');\r\n      \r\n        function update(setting) {\r\n            return request.put(params);\r\n        }\r\n\r\n        function list(aId) {\r\n            return request.get({\r\n                aId: aId\r\n            });\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * create agent note\r\n             * @param {Object} params\r\n             * @config {String} [aId]\r\n             * @config {String} [key]\r\n             * @config {String} [value]\r\n             */\r\n            update: function (setting) {\r\n                return update(setting);\r\n            },\r\n\r\n            list: function (aId) {\r\n                return list(aId);\r\n            }\r\n        };\r\n}]);\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('sesAgentState', ['SesRequest',\r\n  function sesAgent(SesRequest) {\r\n        var request = new SesRequest('agent/{aId}/state');\r\n      \r\n        function hint(setting) {\r\n            return request.post(params);\r\n        }\r\n\r\n        function list(aId, params) {\r\n            params = params || {};\r\n            params.aId = aId;\r\n            \r\n            if(angular.isArray(params.aId)) {\n                return request.post(params, 'agent/state');\n            }\n            return request.get(params);\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * create agent state hint\r\n             * @param {Object} params\r\n             * @config {String} [aId]\r\n             * @config {String} [sId]\r\n             * @config {String} [author]\r\n             * @config {Number} [hintType]\r\n             * @config {String} [message]\r\n             * @config {String} [assignedUser]\r\n             * @config {Array} [mentionedUsers]\r\n             * @config {Boolean} [private]\r\n             * @config {Number} [until]\r\n             */\r\n            hint: function (params) {\r\n                return hint(params);\r\n            },\r\n\r\n            /**\r\n             * list agent states\r\n             * @param   {String}   aId\r\n             * @param {Object} \r\n             * @config {Number} [limit]\r\n             * @config {Number} [start]\r\n             * @config {Number} [end]\r\n             * @config {Boolean} [includeHints]\r\n             * @config {Boolean} [includeRawData]\r\n             * @config {String} [format]\r\n             */\r\n            list: function (aId, params) {\r\n                return list(aId, params);\r\n            }\r\n        };\r\n}]);\r\n","\"use strict\";\n\nangular.module('ngSeApi').factory('sesAgentType', ['SesRequest',\n  function sesAgent(SesRequest) {\n        var request = new SesRequest('agent/type');\n\n        function listSettings(akId) {\n            return request.get({ akId : akId }, 'agent/type/{akId}/setting');\n        }\n\n        function list() {\n            return request.get();\n        }\n\n        return {\n            setting: {\n                /**\n                 * list settings of an agent type\n                 * @param {Object} params\n                 * @config {String} [akId]\n                 */\n                list: function (akId) {\n                    return listSettings(akId);\n                }\n            },\n\n            list: list\n        };\n}]);\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').provider('sesApiConfig', ['$httpProvider', function SesApiConfigProvider($httpProvider) {\n    var config = {\r\n        baseUrl: 'https://api.server-eye.de',\r\n        apiVersion: 2,\r\n        apiKey: null,\r\n        getUrl: function (path) {\r\n            return [this.baseUrl, this.apiVersion, path].join('/');\r\n        }\r\n    };\r\n\r\n    $httpProvider.interceptors.push(function () {\r\n        return {\r\n            'request': function (reqConfig) {                \r\n                if (config.apiKey) {\r\n                    reqConfig.headers['x-api-key'] = config.apiKey;\r\n                }\r\n\r\n                return reqConfig;\r\n            },\r\n\r\n            'response': function (response) {\r\n                return response;\r\n            }\r\n        };\r\n    });\r\n\r\n    this.setBaseUrl = function (baseUrl) {\r\n        config.baseUrl = baseUrl;\r\n    }\r\n\r\n    this.setApiVersion = function (apiVersion) {\r\n        config.apiVersion = apiVersion;\r\n    }\r\n\r\n    this.setApiKey = function (apiKey) {\r\n        config.apiKey = apiKey;\r\n    }\r\n\r\n    this.$get = function ($http) {\r\n        return {\r\n            getBaseUrl: function () {\r\n                return config.baseUrl;\r\n            },\r\n            getApiVersion: function () {\r\n                return config.apiVersion;\r\n            },\r\n            getApiKey: function () {\r\n                return config.apiKey;\r\n            },\r\n            setApiKey: function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            },\r\n            getUrl: function (path) {\r\n                return [config.baseUrl, config.apiVersion, path].join('/');\r\n            }\r\n        }\r\n    };\r\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('sesAuth', ['SesRequest',\n  function sesAgent(SesRequest) {\n        var request = new SesRequest('auth/{action}');\n\n        function createApiKey(params) {\n            params = params || {};\n            params.action = 'key';\n\n            return request.post(params);\n        }\n\n        function login(params) {\n            params = params || {};\n            params.action = 'login';\n\n            return request.post(params);\n        }\n\n        function logout(params) {\n            params = params || {};\n            params.action = 'logout';\n\n            return request.get(params);\n        }\n\n        return {\n            /**\n             * create apiKey\n             * @param {Object} params\n             * @config {String} [email]\n             * @config {String} [password]\n             * @config {Number} [type]\n             * @config {Number} [validUntil]\n             * @config {Number} [maxUses]\n             */\n            createApiKey: function (params) {\n                return createApiKey(params);\n            },\n\n            /**\n             * login\n             * @param {Object} params\n             * @config {String} [apiKey]\n             * @config {String} [email]\n             * @config {String} [password]\n             * @config {Boolean} [createApiKey]\n             * @config {String} [apiKeyName]\n             */\n            login: function (params) {\n                return login(params);\n            },\n\n            logout: function () {\n                return logout();\n            }\n        };\n}]);\n","\"use strict\";\r\n\r\n(function () {\r\n    angular.module('ngSeApi', []);\n\r\n    angular.module('ngSeApi').config(['sesApiConfigProvider', function (sesApiConfigProvider) {\n        \r\n    }]);\r\n})();\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('SesRequest', ['sesApiConfig', '$q', '$http',\n  function sesRequest(sesApiConfig, $q, $http) {\r\n        function SesRequest(urlPath) {\r\n            this.urlPath = urlPath;\r\n        }\r\n\r\n        /**\r\n         * Merges url and params to a valid api url path.\r\n         *\r\n         * <pre><code>\r\n         * url = '/agent/:aId'\r\n         * params = { aId: 'test-agent-id', name: 'test agent' }\r\n         *\r\n         * url = formatUrl(urlPath, params)\r\n         * url == '/agent/test-agent-id'\r\n         * </pre></code>\r\n         *\r\n         * @param   {String} url    url template\r\n         * @param   {Object} params request parameters\r\n         * @returns {String}\r\n         */\r\n        SesRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n            params = params || {};\r\n\r\n            var keys = Object.keys(params),\r\n                i = keys.length;\r\n\r\n            while (i--) {\r\n                var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                if (regex.test(url)) {\r\n                    url = url.replace(regex, params[keys[i]]);\r\n                    delete params[keys[i]];\r\n                }\r\n            }\r\n\r\n            url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n            \r\n            return url;\r\n        }\r\n\r\n        SesRequest.prototype.send = function send(method, params, urlPath) {\r\n            var fullUrl = sesApiConfig.getUrl(urlPath || this.urlPath),\r\n                deferred = $q.defer(),\r\n                conf = {\r\n                    method: method\r\n                };\r\n\r\n            params = angular.copy(params);\r\n            conf.url = this.formatUrl(fullUrl, params);\r\n\r\n            if (method === 'POST' || method === 'PUT') {\r\n                conf.data = params || {};\r\n            } else {\r\n                conf.params = params || {};\r\n            }\r\n\r\n            $http(conf).then(function (resp) {\r\n                deferred.resolve(resp.data);\r\n            }, function (err) {\r\n                deferred.reject(err);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * perform GET request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SesRequest.prototype.get = function get(params, urlPath) {\r\n            return this.send('GET', params, urlPath);\r\n        }\r\n        \r\n        /**\r\n         * perform POST request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SesRequest.prototype.post = function get(params, urlPath) {\r\n            return this.send('POST', params, urlPath);\r\n        }\r\n        \r\n        /**\r\n         * perform PUT request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SesRequest.prototype.put = function get(params, urlPath) {\r\n            return this.send('PUT', params, urlPath);\r\n        }\r\n        \r\n        /**\r\n         * perform DELETE request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SesRequest.prototype.del = function get(params, urlPath) {\r\n            return this.send('DELETE', params, urlPath);\r\n        }\r\n\r\n        return SesRequest;\r\n}]);\n"],"sourceRoot":"/source/"}