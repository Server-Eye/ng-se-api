/**
 * ng-se-api
 * @version 0.1.1
 * @link https://github.com/Server-Eye/ng-se-api.git
 * @license MIT
 */{"version":3,"sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","../agent/agent.js","ng-se-api.min.js","../agent/misc.js","../agent/note.js","../agent/notification.js","../agent/setting.js","../agent/state.js","../agent/type.js","../auth/auth.js","../config.js","../container/container.js","../container/misc.js","../container/note.js","../container/notification.js","../container/proposal.js","../container/state.js","../container/template.js","../customer/customer.js","../customer/dispatchTime.js","../customer/setting.js","../group/group.js","../group/setting.js","../group/user.js","../me/me.js","../me/mobilepush.js","../me/notification.js","../module.js","../request.js","../user/group.js","../user/setting.js","../user/substitude.js","../user/user.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"angular","module","factory","SeaRequest","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentType","create","params","request","post","get","aId","update","agent","put","destroy","del","copy","note","actionlog","chart","notification","setting","state","category","type",2,"listActionlog","action","getChart","parentId","listCategories","list",3,"formatNote","postedOn","Date","then","notes","forEach","nId",4,5,6,"formatState","date","lastDate","hint","isArray","statesById","Object","keys","key","states",7,"listSettings","akId",8,"createApiKey","login","logout",9,"provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey",10,"seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTemplate","cId","container","inventory","pcvisit","proposal","template",11,"getInventory","connectPcvisit","connect",12,13,14,"accept","pId","deny","settings",15,16,"assign","tId",17,"seaCustomerSetting","seaCustomerDispatchTime","customer","dispatchTime",18,"dtId",19,20,"seaGroupSetting","seaGroupUser","gId","group","user",21,22,"addUser","uId","removeUser","add","remove",23,"seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","data","idx","indexOf","splice","len","me","feed","name","nodes","mobilepush",24,"handle",25,26,27,"seaConfig","$q","$http","urlPath","prototype","formatUrl","url","regex","RegExp","test","replace","send","method","fullUrl","deferred","defer","conf","resp","resolve","err","reject","promise",28,29,30,"set","substId","substitudeId",31,"seaUserGroup","seaUserSetting","seaUserSubstitude","search","substitude"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc', \r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentType',\r\n  function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentType) {\r\n        var request = new SeaRequest('agent/{aId}');\r\n\r\n        function create(params) {\r\n            return request.post(params);\r\n        }\r\n\r\n        function get(aId) {\r\n            return request.get({\r\n                aId: aId\r\n            });\r\n        }\r\n\r\n        function update(agent) {\r\n            return request.put(agent);\r\n        }\r\n\r\n        function destroy(aId) {\r\n            return request.del({\r\n                aId: aId\r\n            });\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * create agent\r\n             * @param {Object} params\r\n             * @config {String} [parentId]\r\n             * @config {String} [type]\r\n             */\r\n            create: function (params) {\r\n                return create(params);\r\n            },\r\n            copy: seaAgentMisc.copy,\r\n\r\n            get: function (aId) {\r\n                return get(aId);\r\n            },\r\n\r\n            /**\r\n             * update agent\r\n             * @param {Object} agent\r\n             * @config {String} [aId]\r\n             * @config {String} [name]\r\n             * @config {Number} [interval]\r\n             */\r\n            update: function (agent) {\r\n                return update(agent);\r\n            },\r\n\r\n            destroy: function (aId) {\r\n                return destroy(aId);\r\n            },\r\n\r\n            note: seaAgentNote,\r\n            actionlog: seaAgentMisc.actionlog,\r\n            chart: seaAgentMisc.chart,\r\n            notification: seaAgentNotification,\r\n            setting: seaAgentSetting,\r\n            state: seaAgentState,\r\n            category: seaAgentMisc.category,\r\n            type: seaAgentType\r\n        };\r\n}]);\r\n",null,"\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n  function seaAgentMisc(SeaRequest) {\r\n        var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n        function listActionlog(aId, params) {\r\n            params = params || {};\r\n            params.aId = aId;\r\n            params.action = 'actionlog';\r\n            return request.get(params);\r\n        }\r\n\r\n        function getChart(aId, params) {\r\n            params = params || {};\r\n            params.aId = aId;\r\n            params.action = 'chart';\r\n            return request.get(params);\r\n        }\r\n\r\n        function copy(aId, parentId) {\r\n            var params = {};\r\n            params.aId = aId;\r\n            params.parentId = parentId;\r\n            params.action = 'copy';\r\n            return request.post(params);\r\n        }\r\n\r\n        function listCategories() {\r\n            return request.get({}, 'agent/category');\r\n        }\r\n\r\n        return {\r\n            actionlog: {\r\n                /**\r\n                 * list action log entries\r\n                 * @param   {String} aId    agent id\r\n                 * @param   {Object} params\r\n                 * @config  {Number} start\r\n                 * @config  {Number} limit\r\n                 * @returns {Object} promise\r\n                 */\r\n                list: function (aId, params) {\r\n                    return listActionlog(aId, params);\r\n                }\r\n            },\r\n            chart: {\r\n                /**\r\n                 * get chart config and values\r\n                 * @param   {String} aId    agent id\r\n                 * @param   {Object} params\r\n                 * @config  {Number} start\r\n                 * @config  {Number} limit\r\n                 * @config  {Number} valueType\r\n                 * @returns {Object} promise\r\n                 */\r\n                get: function (aId, params) {\r\n                    return getChart(aId, params);\r\n                }\r\n            },\r\n            category : {\r\n                list: listCategories\r\n            },\r\n            /**\r\n             * copy agent to a parent\r\n             * @param   {String} aId\r\n             * @param   {String}   parentId\r\n             * @returns {Object} promise\r\n             */\r\n            copy: function (aId, parentId) {\r\n                return copy(aId, parentId);\r\n            }\r\n        };\r\n}]);\r\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n  function seaAgentNote(SeaRequest) {\r\n        var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n        function formatNote(note) {\r\n            note.postedOn = new Date(note.postedOn);\r\n            return note;\r\n        }\r\n      \r\n        function create(params) {\r\n            return request.post(params).then(formatNote);\r\n        }\r\n\r\n        function list(aId) {\r\n            return request.get({\r\n                aId: aId\r\n            }).then(function(notes) {\r\n                angular.forEach(notes, formatNote);\r\n                \r\n                return notes;\r\n            });\r\n        }\r\n\r\n        function destroy(aId, nId) {\r\n            return request.del({\r\n                aId: aId,\r\n                nId: nId\r\n            });\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * create agent note\r\n             * @param {Object} params\r\n             * @config {String} [aId]\r\n             * @config {String} [message]\r\n             */\r\n            create: function (params) {\r\n                return create(params);\r\n            },\r\n\r\n            list: function (aId) {\r\n                return list(aId);\r\n            },\r\n\r\n            destroy: function (aId, nId) {\r\n                return destroy(aId, nId);\r\n            }\r\n        };\r\n}]);\r\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n  function seaAgentNitification(SeaRequest) {\n        var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n        function create(params) {\n            return request.post(params);\n        }\n\n        function update(notification) {\n            return request.put(notification);\n        }\n\n        function list(aId) {\n            return request.get({\n                aId: aId\n            });\n        }\n\n        function destroy(aId, nId) {\n            return request.del({\n                aId: aId,\n                nId: nId\n            });\n        }\n\n        return {\n            /**\n             * create notification\n             * @param {Object} params\n             * @config {String} [aId]\n             * @config {String} [userId]\n             * @config {Boolean} [mail]\n             * @config {Boolean} [phone]\n             * @config {Boolean} [ticket]\n             * @config {String} [deferId]\n             */\n            create: function (params) {\n                return create(params);\n            },\n\n            /**\n             * update notification\n             * @param {Object} params\n             * @config {String} [nId]\n             * @config {String} [aId]\n             * @config {String} [userId]\n             * @config {Boolean} [mail]\n             * @config {Boolean} [phone]\n             * @config {Boolean} [ticket]\n             * @config {String} [deferId]\n             */\n            update: function (notification) {\n                return update(notification);\n            },\n\n            list: function (aId) {\n                return list(aId);\n            },\n\n            destroy: function (aId, nId) {\n                return destroy(aId, nId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n  function seaAgentSetting(SeaRequest) {\n        var request = new SeaRequest('agent/{aId}/setting/{key}');\n      \n        function update(setting) {\n            return request.put(params);\n        }\n\n        function list(aId) {\n            return request.get({\n                aId: aId\n            });\n        }\n\n        return {\n            /**\n             * create agent note\n             * @param {Object} params\n             * @config {String} [aId]\n             * @config {String} [key]\n             * @config {String} [value]\n             */\n            update: function (setting) {\n                return update(setting);\n            },\n\n            list: function (aId) {\n                return list(aId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n  function seaAgentState(SeaRequest) {\n        var request = new SeaRequest('agent/{aId}/state');\n\n        function formatState(state) {\n            state.date = new Date(state.date);\n            state.lastDate = new Date(state.lastDate);\n            return state;\n        }\n\n        function hint(setting) {\n            return request.post(params);\n        }\n\n        function list(aId, params) {\n            params = params || {};\n            params.aId = aId;\n\n            if (angular.isArray(params.aId)) {\n                return request.post(params, 'agent/state').then(function(statesById) {\n                    angular.forEach(Object.keys(statesById), function(key) {\n                        angular.forEach(statesById[key], formatState);\n                    });\n\n                    return statesById;\n                });\n            }\n            return request.get(params).then(function(states) {\n                angular.forEach(states, formatState);\n\n                return states;\n            });\n        }\n\n        return {\n            /**\n             * create agent state hint\n             * @param {Object} params\n             * @config {String} [aId]\n             * @config {String} [sId]\n             * @config {String} [author]\n             * @config {Number} [hintType]\n             * @config {String} [message]\n             * @config {String} [assignedUser]\n             * @config {Array} [mentionedUsers]\n             * @config {Boolean} [private]\n             * @config {Number} [until]\n             */\n            hint: function (params) {\n                return hint(params);\n            },\n\n            /**\n             * list agent states\n             * @param   {String}   aId\n             * @param {Object}\n             * @config {Number} [limit]\n             * @config {Number} [start]\n             * @config {Number} [end]\n             * @config {Boolean} [includeHints]\n             * @config {Boolean} [includeRawData]\n             * @config {String} [format]\n             */\n            list: function (aId, params) {\n                return list(aId, params);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n  function seaAgentType(SeaRequest) {\n        var request = new SeaRequest('agent/type');\n\n        function listSettings(akId) {\n            return request.get({ akId : akId }, 'agent/type/{akId}/setting');\n        }\n\n        function list() {\n            return request.get();\n        }\n\n        return {\n            setting: {\n                /**\n                 * list settings of an agent type\n                 * @param {Object} params\n                 * @config {String} [akId]\n                 */\n                list: function (akId) {\n                    return listSettings(akId);\n                }\n            },\n\n            list: list\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\n  function seaAuth(SeaRequest) {\n        var request = new SeaRequest('auth/{action}');\n\n        function createApiKey(params) {\n            params = params || {};\n            params.action = 'key';\n\n            return request.post(params);\n        }\n\n        function login(params) {\n            params = params || {};\n            params.action = 'login';\n\n            return request.post(params);\n        }\n\n        function logout(params) {\n            params = params || {};\n            params.action = 'logout';\n\n            return request.get(params);\n        }\n\n        return {\n            /**\n             * create apiKey\n             * @param {Object} params\n             * @config {String} [email]\n             * @config {String} [password]\n             * @config {Number} [type]\n             * @config {Number} [validUntil]\n             * @config {Number} [maxUses]\n             */\n            createApiKey: function (params) {\n                return createApiKey(params);\n            },\n\n            /**\n             * login\n             * @param {Object} params\n             * @config {String} [apiKey]\n             * @config {String} [email]\n             * @config {String} [password]\n             * @config {Boolean} [createApiKey]\n             * @config {String} [apiKeyName]\n             */\n            login: function (params) {\n                return login(params);\n            },\n\n            logout: function () {\n                return logout();\n            }\n        };\n}]);\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').provider('seaConfig', ['$httpProvider', function SeaConfigProvider($httpProvider) {\r\n    var config = {\r\n        baseUrl: 'https://api.server-eye.de',\r\n        apiVersion: 2,\r\n        apiKey: null,\r\n        getUrl: function (path) {\r\n            return [this.baseUrl, this.apiVersion, path].join('/');\r\n        }\r\n    };\r\n\r\n    $httpProvider.interceptors.push(function () {\r\n        return {\r\n            'request': function (reqConfig) {                \r\n                if (config.apiKey) {\r\n                    reqConfig.headers['x-api-key'] = config.apiKey;\r\n                }\r\n\r\n                return reqConfig;\r\n            },\r\n\r\n            'response': function (response) {\r\n                return response;\r\n            }\r\n        };\r\n    });\r\n\r\n    this.setBaseUrl = function (baseUrl) {\r\n        config.baseUrl = baseUrl;\r\n    }\r\n\r\n    this.setApiVersion = function (apiVersion) {\r\n        config.apiVersion = apiVersion;\r\n    }\r\n\r\n    this.setApiKey = function (apiKey) {\r\n        config.apiKey = apiKey;\r\n    }\r\n\r\n    this.$get = function ($http) {\r\n        return {\r\n            getBaseUrl: function () {\r\n                return config.baseUrl;\r\n            },\r\n            getApiVersion: function () {\r\n                return config.apiVersion;\r\n            },\r\n            getApiKey: function () {\r\n                return config.apiKey;\r\n            },\r\n            setApiKey: function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            },\r\n            getUrl: function (path) {\r\n                return [config.baseUrl, config.apiVersion, path].join('/');\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTemplate',\n  function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTemplate) {\n        var request = new SeaRequest('container/{cId}');\n\n        function get(cId) {\n            return request.get({\n                cId: cId\n            });\n        }\n\n        function update(container) {\n            return request.put(container);\n        }\n\n        function destroy(cId) {\n            return request.del({\n                cId: cId\n            });\n        }\n\n        return {\n            get: function (cId) {\n                return get(cId);\n            },\n\n            /**\n             * update container\n             * @param {Object} container\n             * @config {String} [cId]\n             * @config {String} [name]\n             * @config {Boolean} [alertOffline]\n             * @config {Boolean} [alertShutdown]\n             * @config {Number} [maxHeartbeatTimeout]\n             */\n            update: function (container) {\n                return update(container);\n            },\n\n            destroy: function (cId) {\n                return destroy(cId);\n            },\n\n            actionlog: seaContainerMisc.actionlog,\n            inventory: seaContainerMisc.inventory,\n            note: seaContainerNote,\n            notification: seaContainerNotification,\n            pcvisit: seaContainerMisc.pcvisit,\n            proposal: seaContainerProposal,\n            state: seaContainerState,\n            template: seaContainerTemplate\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n  function seaContainerMisc(SeaRequest) {\n        var request = new SeaRequest('container/{cId}/{action}');\n\n        function listActionlog(cId, params) {\n            params = params || {};\n            params.cId = cId;\n            params.action = 'actionlog';\n            return request.get(params);\n        }\n\n        function getInventory(cId, params) {\n            params = params || {};\n            params.cId = cId;\n            params.action = 'inventory';\n            return request.get(params);\n        }\n\n        function connectPcvisit(cId, params) {\n            params = params || {};\n            params.cId = cId;\n            params.action = 'pcvisit';\n            return request.get(params);\n        }\n\n        return {\n            actionlog: {\n                /**\n                 * list action log entries\n                 * @param   {String} cId\n                 * @param   {Object} params\n                 * @config  {Number} [start]\n                 * @config  {Number} [limit]\n                 * @returns {Object} promise\n                 */\n                list: function (cId, params) {\n                    return listActionlog(cId, params);\n                }\n            },\n\n            inventory: {\n                /**\n                 * get inventory of the container\n                 * @param   {String}   cId\n                 * @param   {String}   params\n                 * @config {String} [format]\n                 * @returns {Object} promise\n                 */\n                get: function (cId, params) {\n                    return getInventory(cId, params);\n                }\n            },\n            pcvisit: {\n                /**\n                 * install and connect to pcvisit\n                 * @param   {String} cId\n                 * @param   {Object}   params\n                 * @config  {String}   [supporterId]\n                 * @config  {String}   [supporterPassword]\n                 * @config  {String}   [user]\n                 * @config  {String}   [password]\n                 * @config  {String}   [domain]\n                 * @returns {Object} promise\n                 */\n                connect: function(cId, params) {\n                    return connectPcvisit(cId, params);\n                }\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n  function seaContainerNote(SeaRequest) {\n        var request = new SeaRequest('container/{cId}/note/{nId}');\n\n        function formatNote(note) {\n            note.postedOn = new Date(note.postedOn);\n            return note;\n        }\n\n        function create(params) {\n            return request.post(params).then(formatNote);\n        }\n\n        function list(cId) {\n            return request.get({\n                cId: cId\n            }).then(function(notes) {\n                angular.forEach(notes, formatNote);\n\n                return notes;\n            });\n        }\n\n        function destroy(cId, nId) {\n            return request.del({\n                aId: cId,\n                nId: nId\n            });\n        }\n\n        return {\n            /**\n             * create note\n             * @param {Object} params\n             * @config {String} [cId]\n             * @config {String} [message]\n             */\n            create: function (params) {\n                return create(params);\n            },\n\n            list: function (cId) {\n                return list(cId);\n            },\n\n            destroy: function (cId, nId) {\n                return destroy(cId, nId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n  function seaContainerNotification(SeaRequest) {\n        var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n        function create(params) {\n            return request.post(params);\n        }\n\n        function update(notification) {\n            return request.put(notification);\n        }\n\n        function list(cId) {\n            return request.get({\n                cId: cId\n            });\n        }\n\n        function destroy(cId, nId) {\n            return request.del({\n                cId: cId,\n                nId: nId\n            });\n        }\n\n        return {\n            /**\n             * create notification\n             * @param {Object} params\n             * @config {String} [cId]\n             * @config {String} [userId]\n             * @config {Boolean} [mail]\n             * @config {Boolean} [phone]\n             * @config {Boolean} [ticket]\n             * @config {String} [deferId]\n             */\n            create: function (params) {\n                return create(params);\n            },\n\n            /**\n             * update notification\n             * @param {Object} params\n             * @config {String} [nId]\n             * @config {String} [cId]\n             * @config {String} [userId]\n             * @config {Boolean} [mail]\n             * @config {Boolean} [phone]\n             * @config {Boolean} [ticket]\n             * @config {String} [deferId]\n             */\n            update: function (notification) {\n                return update(notification);\n            },\n\n            list: function (cId) {\n                return list(cId);\n            },\n\n            destroy: function (cId, nId) {\n                return destroy(cId, nId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n  function seaContainerProposal(SeaRequest) {\n        var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n        function accept(cId, pId) {\n            return request.put({\n                cId: cId,\n                pId: pId\n            });\n        }\n\n        function list(cId) {\n            return request.get({\n                cId: cId\n            });\n        }\n\n        function deny(cId, pId) {\n            return request.del({\n                cId: cId,\n                pId: pId\n            });\n        }\n\n        function listSettings(cId, pId) {\n            return request.get({\n                cId: cId,\n                pId: pId\n            }, 'container/{cId}/proposal/{pId}/setting');\n        }\n\n        return {\n            accept: function (cId, pId) {\n                return accept(cId, pId);\n            },\n\n            list: function (cId) {\n                return list(cId);\n            },\n\n            deny: function (cId, pId) {\n                return deny(cId, pId);\n            },\n\n            settings: {\n                list: function (cId, pId) {\n                    return listSettings(cId, pId);\n                }\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n  function seaContainerState(SeaRequest) {\n        var request = new SeaRequest('container/{cId}/state');\n\n        function formatState(state) {\n            state.date = new Date(state.date);\n            state.lastDate = new Date(state.lastDate);\n            return state;\n        }\n\n        function hint(setting) {\n            return request.post(params);\n        }\n\n        function list(cId, params) {\n            params = params || {};\n            params.cId = cId;\n\n            if(angular.isArray(params.cId)) {\n                return request.post(params, 'container/state').then(function(statesById) {\n                    angular.forEach(Object.keys(statesById), function(key) {\n                        angular.forEach(statesById[key], formatState);\n                    });\n                });\n            }\n            return request.get(params).then(function(states) {\n                angular.forEach(states, formatState);\n\n                return states;\n            });\n        }\n\n        return {\n            /**\n             * create container state hint\n             * @param {Object} params\n             * @config {String} [cId]\n             * @config {String} [sId]\n             * @config {String} [author]\n             * @config {Number} [hintType]\n             * @config {String} [message]\n             * @config {String} [assignedUser]\n             * @config {Array} [mentionedUsers]\n             * @config {Boolean} [private]\n             * @config {Number} [until]\n             */\n            hint: function (params) {\n                return hint(params);\n            },\n\n            /**\n             * list container states\n             * @param   {String}   cId\n             * @param {Object}\n             * @config {Number} [limit]\n             * @config {Number} [start]\n             * @config {Number} [end]\n             * @config {Boolean} [includeHints]\n             * @config {Boolean} [includeRawData]\n             * @config {String} [format]\n             */\n            list: function (cId, params) {\n                return list(cId, params);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n  function seaContainerTemplate(SeaRequest) {\n        var request = new SeaRequest('container/{cId}/template/{tId}');\n\n        function create(cId) {\n            return request.post({\n                cId: cId\n            });\n        }\n\n        function assign(cId, tId) {\n            return request.post({\n                cId: cId,\n                tId: tId\n            });\n        }\n\n        return {\n            /**\n             * create template form system\n             * @param {String} cId\n             */\n            create: function (cId) {\n                return create(cId);\n            },\n\n            /**\n             * assign a template to a system\n             * @param {String} cId\n             * @param {String} tId\n             */\n            assign: function (cId, tId) {\n                return assign(cId, tId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerSetting', 'seaCustomerDispatchTime',\n  function seaCustomer(SeaRequest, seaCustomerSetting, seaCustomerDispatchTime) {\n        var request = new SeaRequest('customer/{cId}');\n\n        function get(cId) {\n            return request.get({\n                cId: cId\n            });\n        }\n\n        function update(customer) {\n            return request.put(customer);\n        }\n\n        return {\n            get: function (cId) {\n                return get(cId);\n            },\n\n            /**\n             * update customer\n             * @param {Object} customer\n             * @config {String} [cId]\n             * @config {String} [country]\n             * @config {Number} [customerNumberIntern]\n             * @config {Number} [customerNumberExtern]\n             * @config {String} [companyName]\n             * @config {String} [street]\n             * @config {String} [zipCode]\n             * @config {String} [city]\n             * @config {String} [email]\n             * @config {String} [phone]\n             */\n            update: function (customer) {\n                return update(customer);\n            },\n\n            setting: seaCustomerSetting,\n            dispatchTime: seaCustomerDispatchTime\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n  function seaCustomerDispatchTime(SeaRequest) {\n        var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n        function create(params) {\n            return request.post(params);\n        }\n\n        function list() {\n            return request.get();\n        }\n\n        function update(dispatchTime) {\n            return request.put(dispatchTime);\n        }\n\n        function destroy(dtId) {\n            return request.del({\n                dtId: dtId\n            });\n        }\n\n        return {\n            /**\n             * create dispatchTime\n             * @param {Object} params\n             * @config {String} [name]\n             * @config {Number} [defer]\n             */\n            create: function (params) {\n                return create(params);\n            },\n\n            list: function () {\n                return list();\n            },\n\n            /**\n             * update dispatchTime\n             * @param {Object} params\n             * @config {String} [dtId]\n             * @config {String} [name]\n             * @config {Number} [defer]\n             */\n            update: function (dispatchTime) {\n                return update(dispatchTime);\n            },\n\n            destroy: function (dtId) {\n                return destroy(dtId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n  function seaCustomerSetting(SeaRequest) {\n        var request = new SeaRequest('customer/{cId}/setting');\n\n        function list(cId) {\n            return request.get({\n                cId: cId\n            });\n        }\n\n        function update(cId, settings) {\n            settings = settings || {};\n            settings.cId = cId;\n            return request.put(settings);\n        }\n\n        return {\n            list: function (cId) {\n                return list(cId);\n            },\n\n            /**\n             * update customer\n             * @param {String} cId\n             * @param {Object} settings\n             */\n            update: function (cId, settings) {\n                return update(cId, settings);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n  function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n        var request = new SeaRequest('group/{gId}');\n\n        function create(params) {\n            return request.post(params);\n        }\n\n        function get(gId) {\n            return request.get({\n                gId: gId\n            });\n        }\n\n        function update(group) {\n            return request.put(group);\n        }\n\n        function destroy(gId) {\n            return request.del({\n                gId: gId\n            });\n        }\n\n        return {\n            /**\n             * create group\n             * @param {Object} params\n             * @config {String} [customerId]\n             * @config {String} [name]\n             */\n            create: function (params) {\n                return create(params);\n            },\n\n            get: function (gId) {\n                return get(gId);\n            },\n\n            /**\n             * update group\n             * @param {Object} group\n             * @config {String} [gId]\n             * @config {String} [name]\n             */\n            update: function (group) {\n                return update(group);\n            },\n\n            destroy: function (gId) {\n                return destroy(gId);\n            },\n\n            setting: seaGroupSetting,\n            user: seaGroupUser\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n  function seaGroupSetting(SeaRequest) {\n        var request = new SeaRequest('group/{gId}/setting');\n\n        function list(gId) {\n            return request.get({\n                gId: gId\n            });\n        }\n\n        function update(gId, settings) {\n            settings = settings || {};\n            settings.gId = gId;\n            return request.put(settings);\n        }\n\n        return {\n            list: function (gId) {\n                return list(gId);\n            },\n\n            /**\n             * update group\n             * @param {String} gId\n             * @param {Object} settings\n             */\n            update: function (gId, settings) {\n                return update(gId, settings);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n  function seaGroupUser(SeaRequest) {\n        var request = new SeaRequest('group/{gId}/user/{uId}');\n\n        function list(gId) {\n            return request.get({\n                gId: gId\n            });\n        }\n\n        function addUser(gId, uId) {\n            return request.put({\n                uId: uId,\n                gId: gId\n            });\n        }\n\n        function removeUser(gId, uId) {\n            return request.del({\n                uId: uId,\n                gId: gId\n            });\n        }\n\n        return {\n            list: function (gId) {\n                return list(gId);\n            },\n\n            /**\n             * add user to group\n             * @param {String} gId\n             * @param {String} uId\n             */\n            add: function (gId, uId) {\n                return addUser(gId, uId);\n            },\n\n            /**\n             * remove user to group\n             * @param {String} gId\n             * @param {String} uId\n             */\n            remove: function (gId, uId) {\n                return removeUser(gId, uId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\n  function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\n        var request = new SeaRequest('me/{action}');\n\n        function _formatNode(node) {\n            if (node.date && typeof (node.date) === 'string') {\n                node.date = new Date(node.date);\n            }\n\n            if (node.lastDate && typeof (node.lastDate) === 'string') {\n                node.lastDate = new Date(node.lastDate);\n            }\n            \n            return node;\n        }\n\n        function _formatData(data) {\n            var idx = data.indexOf('loadfinish');\n            if (idx >= 0) {\n                data.splice(idx, 1);\n            }\n\n            for (var i = 0, len = data.length; i < len; i++) {\n                _formatNode(data[i]);\n            }\n            \n            return data;\n        }\n\n        function me() {\n            return request.get();\n        }\n\n        function customer() {\n            return request.get({\n                action: 'customer'\n            });\n        }\n\n        function feed(params) {\n            params = params || {};\n            params.action = 'feed';\n\n            return request.get(params);\n        }\n\n        function key(name) {\n            return request.get({\n                action: 'key',\n                name: name\n            });\n        }\n\n        function nodes(params) {\n            params = params || {};\n            params.action = 'nodes';\n\n            return request.get(params).then(_formatData);\n        }\n\n        return {\n            me: me,\n            customer: customer,\n            feed: function (params) {\n                return feed(params);\n            },\n            key: function (name) {\n                return key(name);\n            },\n            nodes: function (params) {\n                return nodes(params);\n            },\n\n            mobilepush: seaMeMobilepush,\n            notification: seaMeNotification\n        };\n}]);","\"use strict\";\n\nangular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n  function seaMeMobilepush(SeaRequest) {\n        var request = new SeaRequest('me/mobilepush/{handle}');\n\n        function list() {\n            return request.get();\n        }\n\n        function create(params) {\n            return request.post(params);\n        }\n\n        function get(handle) {\n            return request.get({\n                handle: handle\n            });\n        }\n\n        function destroy(handle) {\n            return request.del({\n                handle: handle\n            });\n        }\n\n        return {\n            list: list,\n\n            /**\n             * add mobilepush\n             * @param   {Object} params\n             * @config  {String} handle\n             * @config  {String} type\n             * @returns {Object} promise\n             */\n            create: function(params) {\n                return create(params);\n            },\n\n            get: function(handle) {\n                return get(handle);\n            },\n\n            destroy: function(handle) {\n                return destroy(handle);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n  function seaMeNotification(SeaRequest) {\n        var request = new SeaRequest('me/notification/{nId}');\n\n        function list(params) {\n            return request.get(params);\n        }\n\n        function update(notification) {\n            return request.put(notification);\n        }\n\n        function destroy(nId) {\n            return request.del({\n                nId: nId\n            });\n        }\n\n        return {\n            /**\n             * list all notifications\n             * @param   {Object} params\n             * @config  {Boolean}  includeGroups\n             * @returns {Object} promise\n             */\n            list: function (params) {\n                return list(params);\n            },\n\n            /**\n             * update notification\n             * @param {Object} params\n             * @config {String} [nId]\n             * @config {String} [cId || aId]\n             * @config {Boolean} [mail]\n             * @config {Boolean} [phone]\n             * @config {Boolean} [ticket]\n             * @config {String} [deferId]\n             */\n            update: function (notification) {\n                return get(notification);\n            },\n\n            destroy: function (nId) {\n                return destroy(nId);\n            }\n        };\n}]);\n","\"use strict\";\r\n\r\n(function () {\r\n    angular.module('ngSeApi', []);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider', function (seaApiConfigProvider) {\r\n        \r\n    }]);\r\n})();\r\n","\"use strict\";\r\n\r\nangular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n  function SeaRequest(seaConfig, $q, $http) {\r\n        function SeaRequest(urlPath) {\r\n            this.urlPath = urlPath;\r\n        }\r\n\r\n        /**\r\n         * Merges url and params to a valid api url path.\r\n         *\r\n         * <pre><code>\r\n         * url = '/agent/:aId'\r\n         * params = { aId: 'test-agent-id', name: 'test agent' }\r\n         *\r\n         * url = formatUrl(urlPath, params)\r\n         * url == '/agent/test-agent-id'\r\n         * </pre></code>\r\n         *\r\n         * @param   {String} url    url template\r\n         * @param   {Object} params request parameters\r\n         * @returns {String}\r\n         */\r\n        SeaRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n            params = params || {};\r\n\r\n            var keys = Object.keys(params),\r\n                i = keys.length;\r\n\r\n            while (i--) {\r\n                var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                if (regex.test(url)) {\r\n                    url = url.replace(regex, params[keys[i]]);\r\n                    delete params[keys[i]];\r\n                }\r\n            }\r\n\r\n            url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n            \r\n            return url;\r\n        }\r\n\r\n        SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n            var fullUrl = seaConfig.getUrl(urlPath || this.urlPath),\r\n                deferred = $q.defer(),\r\n                conf = {\r\n                    method: method\r\n                };\r\n\r\n            params = angular.copy(params);\r\n            conf.url = this.formatUrl(fullUrl, params);\r\n\r\n            if (method === 'POST' || method === 'PUT') {\r\n                conf.data = params || {};\r\n            } else {\r\n                conf.params = params || {};\r\n            }\r\n\r\n            $http(conf).then(function (resp) {\r\n                deferred.resolve(resp.data);\r\n            }, function (err) {\r\n                deferred.reject(err);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * perform GET request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SeaRequest.prototype.get = function get(params, urlPath) {\r\n            return this.send('GET', params, urlPath);\r\n        }\r\n        \r\n        /**\r\n         * perform POST request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SeaRequest.prototype.post = function get(params, urlPath) {\r\n            return this.send('POST', params, urlPath);\r\n        }\r\n        \r\n        /**\r\n         * perform PUT request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SeaRequest.prototype.put = function get(params, urlPath) {\r\n            return this.send('PUT', params, urlPath);\r\n        }\r\n        \r\n        /**\r\n         * perform DELETE request\r\n         * @param {Object}  params  The request parameters\r\n         * @param {String}  urlPath only append if url is different to classes urlPath\r\n         * @returns {Boolean} promise\r\n         */\r\n        SeaRequest.prototype.del = function get(params, urlPath) {\r\n            return this.send('DELETE', params, urlPath);\r\n        }\r\n\r\n        return SeaRequest;\r\n}]);\r\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n  function seaUserGroup(SeaRequest) {\n        var request = new SeaRequest('user/{uId}/group/{gId}');\n\n        function list(uId) {\n            return request.get({\n                uId: uId\n            });\n        }\n\n        function addUser(uId, gId) {\n            return request.put({\n                uId: uId,\n                gId: gId\n            });\n        }\n\n        function removeUser(uId, gId) {\n            return request.del({\n                uId: uId,\n                gId: gId\n            });\n        }\n\n        return {\n            list: function (uId) {\n                return list(uId);\n            },\n\n            /**\n             * add user to group\n             * @param {String} gId\n             * @param {String} uId\n             */\n            add: function (uId, gId) {\n                return addUser(uId, gId);\n            },\n\n            /**\n             * remove user to group\n             * @param {String} gId\n             * @param {String} uId\n             */\n            remove: function (uId, gId) {\n                return removeUser(uId, gId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n  function seaUserSetting(SeaRequest) {\n        var request = new SeaRequest('user/{uId}/setting');\n\n        function list(uId) {\n            return request.get({\n                uId: uId\n            });\n        }\n\n        function update(uId, settings) {\n            settings = settings || {};\n            settings.uId = uId;\n            return request.put(settings);\n        }\n\n        return {\n            list: function (uId) {\n                return list(uId);\n            },\n\n            /**\n             * update user\n             * @param {String} uId\n             * @param {Object} settings\n             */\n            update: function (uId, settings) {\n                return update(uId, settings);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n  function seaUserSubstitude(SeaRequest) {\n        var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n        function set(uId, substId) {\n            return request.put({\n                uId: uId,\n                substitudeId: substId\n            });\n        }\n\n        function remove(uId) {\n            return request.del({\n                uId: uId\n            });\n        }\n\n        return {\n            /**\n             * set a substitude\n             * @param {String} gId\n             * @param {String} uId\n             */\n            set: function (uId, substId) {\n                return set(uId, substId);\n            },\n\n            /**\n             * remove substitude\n             * @param {String} uId\n             */\n            remove: function (uId) {\n                return remove(uId);\n            }\n        };\n}]);\n","\"use strict\";\n\nangular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\n  function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\n        var request = new SeaRequest('user/{uId}');\n\n        function create(params) {\n            return request.post(params);\n        }\n\n        function get(uId) {\n            return request.get({\n                uId: uId\n            });\n        }\n\n        function update(user) {\n            return request.put(user);\n        }\n\n        function destroy(uId) {\n            return request.del({\n                uId: uId\n            });\n        }\n\n        function search(params) {\n            return request.get(params);\n        }\n\n        return {\n            /**\n             * create user\n             * @param {Object} params\n             * @config {String} [customerId]\n             * @config {String} [prename]\n             * @config {String} [surname]\n             * @config {String} [email]\n             * @config {Number} [role]\n             * @config {String} [phone]\n             */\n            create: function (params) {\n                return create(params);\n            },\n\n            get: function (gId) {\n                return get(gId);\n            },\n\n            /**\n             * update user\n             * @param {Object} user\n             * @config {String} [customerId]\n             * @config {String} [prename]\n             * @config {String} [surname]\n             * @config {String} [email]\n             * @config {Number} [role]\n             * @config {String} [phone]\n             */\n            update: function (user) {\n                return update(user);\n            },\n\n            destroy: function (uId) {\n                return destroy(uId);\n            },\n\n            /**\n             * search users\n             * @param   {Object}   params\n             * @config  {String}   [query]\n             * @config  {String}   [customerId]\n             * @config  {Boolean}  [includeLocation]\n             */\n            search: function(params) {\n                return search(params);\n            },\n\n            setting: seaUserSetting,\n            group: seaUserGroup,\n            substitude: seaUserSubstitude\n        };\n}]);\n"],"sourceRoot":"/source/"}