/**
 * ng-se-api
 * @version 0.2.3
 * @link https://github.com/Server-Eye/ng-se-api.git
 * @license MIT
 */{"version":3,"sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","../agent/agent.js","ng-se-api.min.js","../agent/misc.js","../agent/note.js","../agent/notification.js","../agent/setting.js","../agent/state.js","../agent/type.js","../auth/auth.js","../config.js","../container/container.js","../container/misc.js","../container/note.js","../container/notification.js","../container/proposal.js","../container/state.js","../container/template.js","../customer/customer.js","../customer/dispatchTime.js","../customer/setting.js","../customer/tag.js","../group/group.js","../group/setting.js","../group/user.js","../me/me.js","../me/mobilepush.js","../me/notification.js","../module.js","../request.js","../user/group.js","../user/setting.js","../user/substitude.js","../user/user.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"angular","module","factory","SeaRequest","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentType","create","params","request","post","get","aId","update","agent","put","destroy","del","copy","note","actionlog","chart","notification","setting","state","category","type",2,"listActionlog","action","getChart","parentId","listCategories","list",3,"formatNote","postedOn","Date","then","notes","forEach","nId",4,5,6,"formatState","date","lastDate","hint","isArray","statesById","Object","keys","key","states",7,"listSettings","akId",8,"createApiKey","login","logout",9,"provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey",10,"seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTemplate","cId","container","inventory","pcvisit","proposal","template",11,"getInventory","connectPcvisit","connect",12,13,14,"accept","pId","deny","settings",15,16,"assign","tId",17,"seaCustomerSetting","seaCustomerDispatchTime","seaCustomerTag","customer","dispatchTime","tag",18,"dtId",19,20,"disptagatchTime",21,"seaGroupSetting","seaGroupUser","gId","group","user",22,23,"addUser","uId","removeUser","add","remove",24,"seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","data","idx","indexOf","splice","len","me","feed","name","nodes","mobilepush",25,"handle",26,27,28,"seaConfig","$q","$http","urlPath","prototype","formatUrl","url","regex","RegExp","test","replace","send","method","fullUrl","deferred","defer","conf","resp","resolve","err","reject","promise",29,30,31,"set","substId","substitudeId",32,"seaUserGroup","seaUserSetting","seaUserSubstitude","search","substitude"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();",null,"(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params);\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params);\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\r\n    function seaAgentNitification(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\r\n    function seaAgentSetting(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/setting/{key}');\r\n\r\n            function update(setting) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [key]\r\n                 * @config {String} [value]\r\n                 */\r\n                update: function (setting) {\r\n                    return update(setting);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\r\n    function seaAgentState(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/state');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                return state;\r\n            }\r\n\r\n            function hint(setting) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n\r\n                if (angular.isArray(params.aId)) {\r\n                    return request.post(params, 'agent/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n\r\n                        return statesById;\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list agent states\r\n                 * @param   {String}   aId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (aId, params) {\r\n                    return list(aId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\r\n    function seaAgentType(SeaRequest) {\r\n            var request = new SeaRequest('agent/type');\r\n\r\n            function listSettings(akId) {\r\n                return request.get({\r\n                    akId: akId\r\n                }, 'agent/type/{akId}/setting');\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            return {\r\n                setting: {\r\n                    /**\r\n                     * list settings of an agent type\r\n                     * @param {Object} params\r\n                     * @config {String} [akId]\r\n                     */\r\n                    list: function (akId) {\r\n                        return listSettings(akId);\r\n                    }\r\n                },\r\n\r\n                list: list\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\r\n    function seaAuth(SeaRequest) {\r\n            var request = new SeaRequest('auth/{action}');\r\n\r\n            function createApiKey(params) {\r\n                params = params || {};\r\n                params.action = 'key';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function login(params) {\r\n                params = params || {};\r\n                params.action = 'login';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function logout(params) {\r\n                params = params || {};\r\n                params.action = 'logout';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create apiKey\r\n                 * @param {Object} params\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Number} [type]\r\n                 * @config {Number} [validUntil]\r\n                 * @config {Number} [maxUses]\r\n                 */\r\n                createApiKey: function (params) {\r\n                    return createApiKey(params);\r\n                },\r\n\r\n                /**\r\n                 * login\r\n                 * @param {Object} params\r\n                 * @config {String} [apiKey]\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Boolean} [createApiKey]\r\n                 * @config {String} [apiKeyName]\r\n                 */\r\n                login: function (params) {\r\n                    return login(params);\r\n                },\r\n\r\n                logout: function () {\r\n                    return logout();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider', function SeaConfigProvider($httpProvider) {\r\n        var config = {\r\n            baseUrl: 'https://api.server-eye.de',\r\n            apiVersion: 2,\r\n            apiKey: null,\r\n            getUrl: function (path) {\r\n                return [this.baseUrl, this.apiVersion, path].join('/');\r\n            }\r\n        };\r\n\r\n        $httpProvider.interceptors.push(function () {\r\n            return {\r\n                'request': function (reqConfig) {\r\n                    if (config.apiKey) {\r\n                        reqConfig.headers['x-api-key'] = config.apiKey;\r\n                    }\r\n\r\n                    return reqConfig;\r\n                },\r\n\r\n                'response': function (response) {\r\n                    return response;\r\n                }\r\n            };\r\n        });\r\n\r\n        this.setBaseUrl = function (baseUrl) {\r\n            config.baseUrl = baseUrl;\r\n        }\r\n\r\n        this.setApiVersion = function (apiVersion) {\r\n            config.apiVersion = apiVersion;\r\n        }\r\n\r\n        this.setApiKey = function (apiKey) {\r\n            config.apiKey = apiKey;\r\n        }\r\n\r\n        this.$get = function ($http) {\r\n            return {\r\n                getBaseUrl: function () {\r\n                    return config.baseUrl;\r\n                },\r\n                getApiVersion: function () {\r\n                    return config.apiVersion;\r\n                },\r\n                getApiKey: function () {\r\n                    return config.apiKey;\r\n                },\r\n                setApiKey: function (apiKey) {\r\n                    config.apiKey = apiKey;\r\n                },\r\n                getUrl: function (path) {\r\n                    return [config.baseUrl, config.apiVersion, path].join('/');\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\r\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\r\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTemplate',\r\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTemplate) {\r\n            var request = new SeaRequest('container/{cId}');\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(container) {\r\n                return request.put(container);\r\n            }\r\n\r\n            function destroy(cId) {\r\n                return request.del({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update container\r\n                 * @param {Object} container\r\n                 * @config {String} [cId]\r\n                 * @config {String} [name]\r\n                 * @config {Boolean} [alertOffline]\r\n                 * @config {Boolean} [alertShutdown]\r\n                 * @config {Number} [maxHeartbeatTimeout]\r\n                 */\r\n                update: function (container) {\r\n                    return update(container);\r\n                },\r\n\r\n                destroy: function (cId) {\r\n                    return destroy(cId);\r\n                },\r\n\r\n                actionlog: seaContainerMisc.actionlog,\r\n                inventory: seaContainerMisc.inventory,\r\n                note: seaContainerNote,\r\n                notification: seaContainerNotification,\r\n                pcvisit: seaContainerMisc.pcvisit,\r\n                proposal: seaContainerProposal,\r\n                state: seaContainerState,\r\n                template: seaContainerTemplate\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\r\n    function seaContainerMisc(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/{action}');\r\n\r\n            function listActionlog(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getInventory(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'inventory';\r\n                return request.get(params);\r\n            }\r\n\r\n            function connectPcvisit(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'pcvisit';\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} cId\r\n                     * @param   {Object} params\r\n                     * @config  {Number} [start]\r\n                     * @config  {Number} [limit]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (cId, params) {\r\n                        return listActionlog(cId, params);\r\n                    }\r\n                },\r\n\r\n                inventory: {\r\n                    /**\r\n                     * get inventory of the container\r\n                     * @param   {String}   cId\r\n                     * @param   {String}   params\r\n                     * @config {String} [format]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (cId, params) {\r\n                        return getInventory(cId, params);\r\n                    }\r\n                },\r\n                pcvisit: {\r\n                    /**\r\n                     * install and connect to pcvisit\r\n                     * @param   {String} cId\r\n                     * @param   {Object}   params\r\n                     * @config  {String}   [supporterId]\r\n                     * @config  {String}   [supporterPassword]\r\n                     * @config  {String}   [user]\r\n                     * @config  {String}   [password]\r\n                     * @config  {String}   [domain]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    connect: function (cId, params) {\r\n                        return connectPcvisit(cId, params);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\r\n    function seaContainerNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    aId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create note\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\r\n    function seaContainerNotification(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\r\n    function seaContainerProposal(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\r\n\r\n            function accept(cId, pId) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function deny(cId, pId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function listSettings(cId, pId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    pId: pId\r\n                }, 'container/{cId}/proposal/{pId}/setting');\r\n            }\r\n\r\n            return {\r\n                accept: function (cId, pId) {\r\n                    return accept(cId, pId);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                deny: function (cId, pId) {\r\n                    return deny(cId, pId);\r\n                },\r\n\r\n                settings: {\r\n                    list: function (cId, pId) {\r\n                        return listSettings(cId, pId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\r\n    function seaContainerState(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/state');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                return state;\r\n            }\r\n\r\n            function hint(setting) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n\r\n                if (angular.isArray(params.cId)) {\r\n                    return request.post(params, 'container/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create container state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list container states\r\n                 * @param   {String}   cId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (cId, params) {\r\n                    return list(cId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\r\n    function seaContainerTemplate(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/template/{tId}');\r\n\r\n            function create(cId) {\r\n                return request.post({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function assign(cId, tId) {\r\n                return request.post({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create template form system\r\n                 * @param {String} cId\r\n                 */\r\n                create: function (cId) {\r\n                    return create(cId);\r\n                },\r\n\r\n                /**\r\n                 * assign a template to a system\r\n                 * @param {String} cId\r\n                 * @param {String} tId\r\n                 */\r\n                assign: function (cId, tId) {\r\n                    return assign(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerSetting', 'seaCustomerDispatchTime', 'seaCustomerTag',\r\n    function seaCustomer(SeaRequest, seaCustomerSetting, seaCustomerDispatchTime, seaCustomerTag) {\r\n            var request = new SeaRequest('customer/{cId}');\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(customer) {\r\n                return request.put(customer);\r\n            }\r\n\r\n            return {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {Object} customer\r\n                 * @config {String} [cId]\r\n                 * @config {String} [country]\r\n                 * @config {Number} [customerNumberIntern]\r\n                 * @config {Number} [customerNumberExtern]\r\n                 * @config {String} [companyName]\r\n                 * @config {String} [street]\r\n                 * @config {String} [zipCode]\r\n                 * @config {String} [city]\r\n                 * @config {String} [email]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (customer) {\r\n                    return update(customer);\r\n                },\r\n\r\n                setting: seaCustomerSetting,\r\n                dispatchTime: seaCustomerDispatchTime,\r\n                tag: seaCustomerTag\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(dispatchTime) {\r\n                return request.put(dispatchTime);\r\n            }\r\n\r\n            function destroy(dtId) {\r\n                return request.del({\r\n                    dtId: dtId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [dtId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                update: function (dispatchTime) {\r\n                    return update(dispatchTime);\r\n                },\r\n\r\n                destroy: function (dtId) {\r\n                    return destroy(dtId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\r\n    function seaCustomerSetting(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/setting');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(cId, settings) {\r\n                settings = settings || {};\r\n                settings.cId = cId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {String} cId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (cId, settings) {\r\n                    return update(cId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(disptagatchTime);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\r\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\r\n            var request = new SeaRequest('group/{gId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(group) {\r\n                return request.put(group);\r\n            }\r\n\r\n            function destroy(gId) {\r\n                return request.del({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create group\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {Object} group\r\n                 * @config {String} [gId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (group) {\r\n                    return update(group);\r\n                },\r\n\r\n                destroy: function (gId) {\r\n                    return destroy(gId);\r\n                },\r\n\r\n                setting: seaGroupSetting,\r\n                user: seaGroupUser\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\r\n    function seaGroupSetting(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/setting');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(gId, settings) {\r\n                settings = settings || {};\r\n                settings.gId = gId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {String} gId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (gId, settings) {\r\n                    return update(gId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\r\n    function seaGroupUser(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/user/{uId}');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function addUser(gId, uId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(gId, uId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (gId, uId) {\r\n                    return addUser(gId, uId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (gId, uId) {\r\n                    return removeUser(gId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\r\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\r\n            var request = new SeaRequest('me/{action}');\r\n\r\n            function _formatNode(node) {\r\n                if (node.date && typeof (node.date) === 'string') {\r\n                    node.date = new Date(node.date);\r\n                }\r\n\r\n                if (node.lastDate && typeof (node.lastDate) === 'string') {\r\n                    node.lastDate = new Date(node.lastDate);\r\n                }\r\n\r\n                return node;\r\n            }\r\n\r\n            function _formatData(data) {\r\n                var idx = data.indexOf('loadfinish');\r\n                if (idx >= 0) {\r\n                    data.splice(idx, 1);\r\n                }\r\n\r\n                for (var i = 0, len = data.length; i < len; i++) {\r\n                    _formatNode(data[i]);\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            function me() {\r\n                return request.get();\r\n            }\r\n\r\n            function customer() {\r\n                return request.get({\r\n                    action: 'customer'\r\n                });\r\n            }\r\n\r\n            function feed(params) {\r\n                params = params || {};\r\n                params.action = 'feed';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            function key(name) {\r\n                return request.get({\r\n                    action: 'key',\r\n                    name: name\r\n                });\r\n            }\r\n\r\n            function nodes(params) {\r\n                params = params || {};\r\n                params.action = 'nodes';\r\n\r\n                return request.get(params).then(_formatData);\r\n            }\r\n\r\n            return {\r\n                me: me,\r\n                customer: customer,\r\n                feed: function (params) {\r\n                    return feed(params);\r\n                },\r\n                key: function (name) {\r\n                    return key(name);\r\n                },\r\n                nodes: function (params) {\r\n                    return nodes(params);\r\n                },\r\n\r\n                mobilepush: seaMeMobilepush,\r\n                notification: seaMeNotification\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\r\n    function seaMeMobilepush(SeaRequest) {\r\n            var request = new SeaRequest('me/mobilepush/{handle}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(handle) {\r\n                return request.get({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            function destroy(handle) {\r\n                return request.del({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: list,\r\n\r\n                /**\r\n                 * add mobilepush\r\n                 * @param   {Object} params\r\n                 * @config  {String} handle\r\n                 * @config  {String} type\r\n                 * @returns {Object} promise\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (handle) {\r\n                    return get(handle);\r\n                },\r\n\r\n                destroy: function (handle) {\r\n                    return destroy(handle);\r\n                }\r\n            };\r\n  }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\r\n    function seaMeNotification(SeaRequest) {\r\n            var request = new SeaRequest('me/notification/{nId}');\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function destroy(nId) {\r\n                return request.del({\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all notifications\r\n                 * @param   {Object} params\r\n                 * @config  {Boolean}  includeGroups\r\n                 * @returns {Object} promise\r\n                 */\r\n                list: function (params) {\r\n                    return list(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId || aId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return get(notification);\r\n                },\r\n\r\n                destroy: function (nId) {\r\n                    return destroy(nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider', function (seaApiConfigProvider) {\r\n        \r\n    }]);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var fullUrl = seaConfig.getUrl(urlPath || this.urlPath),\r\n                    deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = angular.copy(params);\r\n                conf.url = this.formatUrl(fullUrl, params);\r\n\r\n                if (method === 'POST' || method === 'PUT') {\r\n                    conf.data = params || {};\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\r\n    function seaUserGroup(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/group/{gId}');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function addUser(uId, gId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(uId, gId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (uId, gId) {\r\n                    return addUser(uId, gId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId, gId) {\r\n                    return removeUser(uId, gId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\r\n    function seaUserSetting(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/setting');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(uId, settings) {\r\n                settings = settings || {};\r\n                settings.uId = uId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {String} uId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (uId, settings) {\r\n                    return update(uId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\r\n    function seaUserSubstitude(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\r\n\r\n            function set(uId, substId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    substitudeId: substId\r\n                });\r\n            }\r\n\r\n            function remove(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * set a substitude\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                set: function (uId, substId) {\r\n                    return set(uId, substId);\r\n                },\r\n\r\n                /**\r\n                 * remove substitude\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId) {\r\n                    return remove(uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\r\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\r\n            var request = new SeaRequest('user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(user) {\r\n                return request.put(user);\r\n            }\r\n\r\n            function destroy(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function search(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create user\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {Object} user\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (user) {\r\n                    return update(user);\r\n                },\r\n\r\n                destroy: function (uId) {\r\n                    return destroy(uId);\r\n                },\r\n\r\n                /**\r\n                 * search users\r\n                 * @param   {Object}   params\r\n                 * @config  {String}   [query]\r\n                 * @config  {String}   [customerId]\r\n                 * @config  {Boolean}  [includeLocation]\r\n                 */\r\n                search: function (params) {\r\n                    return search(params);\r\n                },\r\n\r\n                setting: seaUserSetting,\r\n                group: seaUserGroup,\r\n                substitude: seaUserSubstitude\r\n            };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}