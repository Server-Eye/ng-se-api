{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/auth/auth.js","src/compliance/check.js","src/compliance/compliance.js","src/compliance/config.js","src/compliance/customer.js","src/compliance/fix.js","src/compliance/violation.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/customer/apiKey.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/externalCall.js","src/customer/location.js","src/customer/manager.js","src/customer/property.js","src/customer/setting.js","src/customer/tag.js","src/customer/template.js","src/customer/usage.js","src/customer/viewFilter.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/me/location.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/me/setting.js","src/me/twofactor.js","src/patch/container.js","src/patch/helper.js","src/patch/patch.js","src/patch/viewFilter.js","src/powershell/helper.js","src/powershell/powershell.js","src/powershell/script.js","src/powershell/user.js","src/powershell/util.js","src/remoting/antivirus.js","src/remoting/iasHelper.js","src/remoting/network.js","src/remoting/patch.js","src/remoting/pcvisit.js","src/remoting/powershell.js","src/remoting/remoting.js","src/remoting/shutdown.js","src/reporting/reporting.js","src/reporting/template.js","src/scheduled-tasks/helper.js","src/scheduled-tasks/scheduledTasks.js","src/scheduled-tasks/task.js","src/scheduled-tasks/util.js","src/search/search.js","src/user/group.js","src/user/location.js","src/user/setting.js","src/user/substitude.js","src/user/user.js","src/vault/entry.js","src/vault/helper.js","src/vault/user.js","src/vault/util.js","src/vault/vault.js","src/remoting/patch/history.js","src/remoting/patch/install.js","src/remoting/patch/reboot.js","src/remoting/patch/scan.js","src/remoting/patch/software.js"],"names":[],"mappingszhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACllrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClbvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACntzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACplHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"ng-se-api.js","sourcesContent":["(function () {\n    \"use strict\";\n    \n    angular.module('ngSeApi', []);\n})();\n","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\n        function SeaConfigProvider($httpProvider) {\n            var config = {\n                baseUrl: 'https://api.server-eye.de',\n                patchUrl: 'https://patch.server-eye.de',\n                pmUrl: 'https://pm.server-eye.de',\n                microServiceUrl: 'https://api-ms.server-eye.de',\n                apiVersion: 2,\n                microServiceApiVersion: 3,\n                apiKey: null,\n                getUrl: function (path) {\n                    return [this.baseUrl, this.apiVersion, path].join('/');\n                }\n            };\n\n            $httpProvider.interceptors.push(function () {\n                return {\n                    'request': function (reqConfig) {\n                        if (config.apiKey) {\n                            reqConfig.headers['x-api-key'] = config.apiKey;\n                        }\n\n                        return reqConfig;\n                    },\n\n                    'response': function (response) {\n                        return response;\n                    }\n                };\n            });\n\n            this.setBaseUrl = function (baseUrl) {\n                config.baseUrl = baseUrl;\n            }\n\n            this.setPatchUrl = function (patchUrl) {\n                config.patchUrl = patchUrl;\n            }\n\n            this.setPmUrl = function (pmUrl) {\n                config.pmUrl = pmUrl;\n            }\n\n            this.setMicroServiceUrl = function (microServiceUrl) {\n                config.microServiceUrl = microServiceUrl;\n            }\n\n            this.setApiVersion = function (apiVersion) {\n                config.apiVersion = apiVersion;\n            }\n\n            this.setMicroServiceApiVersion = function (microServiceApiVersion) {\n                config.microServiceApiVersion = microServiceApiVersion;\n            }\n\n            this.setApiKey = function (apiKey) {\n                config.apiKey = apiKey;\n            }\n\n            this.$get = function ($http) {\n                return {\n                    getBaseUrl: function () {\n                        return config.baseUrl;\n                    },\n                    getPatchUrl: function () {\n                        return config.patchUrl;\n                    },\n                    getPmUrl: function () {\n                        return config.pmUrl;\n                    },\n                    getMicroServiceUrl: function () {\n                        return config.microServiceUrl;\n                    },\n                    getMicroServiceUrl: function () {\n                        return config.microServiceUrl;\n                    },\n                    getApiVersion: function () {\n                        return config.apiVersion;\n                    },\n                    getMicroServiceApiVersion: function () {\n                        return config.microServiceApiVersion;\n                    },\n                    getMicroServiceApiVersion: function () {\n                        return config.microServiceApiVersion;\n                    },\n                    getApiKey: function () {\n                        return config.apiKey;\n                    },\n                    setApiKey: function (apiKey) {\n                        config.apiKey = apiKey;\n                    },\n                    getUrl: function (path) {\n                        return [config.baseUrl, config.apiVersion, path].join('/');\n                    }\n                }\n            };\n        }]);\n\n    angular.module('ngSeApi').config(['seaConfigProvider',\n        function (seaApiConfigProvider) {\n\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http', 'SeaRequestHelperService',\n        function SeaRequest(seaConfig, $q, $http, SeaRequestHelperService) {\n            function SeaRequest(urlPath) {\n                this.urlPath = urlPath;\n            }\n\n            /**\n             * Merges url and params to a valid api url path.\n             *\n             * <pre><code>\n             * url = '/agent/:aId'\n             * params = { aId: 'test-agent-id', name: 'test agent' }\n             *\n             * url = formatUrl(urlPath, params)\n             * url == '/agent/test-agent-id'\n             * </pre></code>\n             *\n             * @param   {String} url    url template\n             * @param   {Object} params request parameters\n             * @returns {String}\n             */\n            SeaRequest.prototype.formatUrl = function formatUrl(params, url) {\n                url = url || this.urlPath;\n\n                if (url.indexOf('http') < 0) {\n                    url = seaConfig.getUrl(url || this.urlPath)\n                }\n\n                params = params || {};\n\n                var keys = Object.keys(params),\n                    i = keys.length;\n\n                while (i--) {\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\n                    if (regex.test(url)) {\n                        url = url.replace(regex, params[keys[i]]);\n                        delete params[keys[i]];\n                    }\n                }\n\n                url = url.replace(/\\/{[a-z0-9]*}/ig, '');\n\n                return url;\n            }\n\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\n                var deferred = $q.defer(),\n                    conf = {\n                        method: method\n                    };\n\n                params = params || {};\n                params = angular.copy(params);\n\n                conf.url = this.formatUrl(params, urlPath);\n\n                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\n                    conf.data = params || {};\n                    conf.headers = {\n                        'Content-Type': 'application/json'\n                    };\n                } else {\n                    conf.params = params || {};\n                }\n\n                SeaRequestHelperService.dumpRequest(conf);\n\n                $http(conf).then(function (resp) {\n                    var total = resp.headers('x-total-count');\n\n                    if (total != null) {\n                        resp.data.totalCount = total;\n                    }\n\n                    deferred.resolve(resp.data);\n                }, function (err) {\n                    SeaRequestHelperService.dumpResponse(err);\n                    deferred.reject(err);\n                });\n\n                return deferred.promise;\n            }\n\n            /**\n             * perform GET request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.get = function get(params, urlPath) {\n                return this.send('GET', params, urlPath);\n            }\n\n            /**\n             * perform POST request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.post = function get(params, urlPath) {\n                return this.send('POST', params, urlPath);\n            }\n\n            /**\n             * perform PUT request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.put = function get(params, urlPath) {\n                return this.send('PUT', params, urlPath);\n            }\n\n            /**\n             * perform DELETE request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.del = function get(params, urlPath) {\n                return this.send('DELETE', params, urlPath);\n            }\n\n            return SeaRequest;\n        }]);\n\n    angular.module('ngSeApi').factory('SeaRequestHelperService', [\n        function () {\n            var dump = {\n                request: undefined,\n                response: undefined,\n            };\n\n            function dumpRequest(data) {\n                dump.request = data;\n            }\n\n            function dumpResponse(data) {\n                dump.response = data;\n            }\n\n            function getDump() {\n                var dumpData = JSON.stringify(dump);\n                dump.request = undefined;\n                dump.response = undefined;\n\n                return dumpData;\n            }\n\n            return {\n                dumpRequest: dumpRequest,\n                dumpResponse: dumpResponse,\n                getDump: getDump,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    var VALID_EVENTS = [\n        'USER_UPDATE',\n        'NODE_ADD',\n        'NODE_UPDATE',\n        'NODE_REMOVE',\n        'REMOTE_RESULT',\n        'user_location_change',\n    ];\n\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\n    function ($rootScope, seaConfig) {\n            var connected = false,\n                reconnected = false,\n                hasEverBeenConnected = false,\n                sio;\n\n            var settings = {};\n\n            function fireEvent(name, argsObj) {\n                argsObj = argsObj || {};\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\n            }\n\n            function connect(credentials, rooms) {\n                if (typeof io == 'undefined') {\n                    console.error('required socket.io lib not found');\n                    return;\n                }\n\n                var connectUrl = seaConfig.getBaseUrl();\n                \n                if(credentials) {\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\n                        p += [ key, credentials[key] ].join('=');\n                        return p;\n                    }, '?');\n                }\n                \n                sio = io(connectUrl);\n\n                settings.rooms = rooms;\n\n                sio.on('error', onerror);\n                sio.on('connect', onconnect);\n                sio.on('connecting', function () {\n                    console.log('connecting socket');\n                });\n                sio.on('disconnect', function () {\n                    console.log('disconnected socket');\n                    onerror('socket.disconnected');\n                });\n                sio.on('connect_error', function () {\n                    console.log('connect socket failed');\n                    onerror('socket.connect_failed');\n                });\n                sio.on('reconnect_error', function () {\n                    console.log('reconnect socket failed');\n                    onerror('socket.reconnect_failed');\n                });\n                sio.on('reconnecting', function () {\n                    console.log('reconnecting socket');\n                });\n\n                sio.on('socket:joined', function (userId, roomId) {\n                    console.log(userId, 'joined', roomId);\n                });\n\n                // server-eye events\n                VALID_EVENTS.forEach(function (evtName) {\n                    sio.on(evtName, function (data) {\n                        ondata(evtName, data);\n                    });\n                });\n            }\n\n            function sendSettings() {\n                sio.emit('settings', settings);\n            }\n\n            function onerror(err) {\n                console.log('socket error:', err);\n                connected = false;\n                fireEvent('error', err);\n            }\n\n            function onconnect() {\n                console.log('connected socket');\n                connected = true;\n\n                if (hasEverBeenConnected) {\n                    reconnected = true;\n                }\n\n                hasEverBeenConnected = true;\n\n                var evt = reconnected ? 'reconnected' : 'connected';\n\n                console.log('firing socket', evt);\n\n                sendSettings();\n\n                fireEvent(evt);\n            }\n\n            function ondata(type, data) {\n                if(data && data.targetNode) {\n                    if(data.targetNode.date) {\n                        data.targetNode.date = new Date(data.targetNode.date);\n                    }\n                    \n                    if(data.targetNode.lastDate) {\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\n                    }\n                }\n                \n                fireEvent(type.toLowerCase(), data);\n            }\n\n            return {\n                connect: function (credentials, rooms) {\n                    return connect(credentials, rooms);\n                }\n            }\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\n            var request = new SeaRequest('agent/{aId}');\n                \n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function update(agent) {\n                return request.put(agent);\n            }\n\n            function destroy(aId) {\n                return request.del({\n                    aId: aId\n                });\n            }\n\n            return {\n                /**\n                 * create agent\n                 * @param {Object} params\n                 * @config {String} [parentId]\n                 * @config {String} [type]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                copy: seaAgentMisc.copy,\n\n                get: function (aId) {\n                    return get(aId);\n                },\n\n                /**\n                 * update agent\n                 * @param {Object} agent\n                 * @config {String} [aId]\n                 * @config {String} [name]\n                 * @config {Number} [interval]\n                 */\n                update: function (agent) {\n                    return update(agent);\n                },\n\n                destroy: function (aId) {\n                    return destroy(aId);\n                },\n\n                note: seaAgentNote,\n                actionlog: seaAgentMisc.actionlog,\n                chart: seaAgentMisc.chart,\n                notification: seaAgentNotification,\n                setting: seaAgentSetting,\n                state: seaAgentState,\n                category: seaAgentMisc.category,\n                restart: seaAgentMisc.restart,\n                tag: seaAgentTag,\n                type: seaAgentType,\n                events: seaAgentMisc.events,\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\n        function seaAgentMisc(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                try {\n                    entry.userName = JSON.parse(entry.userName);\n                } catch (e) {\n                    entry.userName = {\n                        email: entry.userName,\n                        sur: entry.userName\n                    };\n                }\n\n                if (entry.information) {\n                    try {\n                        entry.information = JSON.parse(entry.information);\n                    } catch (e) {\n                        entry.information = null;\n                    }\n                }\n\n                return entry;\n            }\n\n            function formatMeasurement(m) {\n                m.ts = new Date(m.name);\n                return m;\n            }\n\n            function listActionlog(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function listEvents(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.action = 'events';\n                return request.get(params);\n            }\n\n            function getChart(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.action = 'chart';\n                return request.get(params);\n            }\n\n            function copy(aId, parentId) {\n                var params = {};\n                params.aId = aId;\n                params.parentId = parentId;\n                params.action = 'copy';\n                return request.post(params);\n            }\n\n            function restart(aId) {\n                var params = {};\n                params.aId = aId;\n                params.action = 'restart';\n                return request.post(params);\n            }\n\n            function listCategories() {\n                return request.get({}, 'agent/category');\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} aId    agent id\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} limit\n                     * @returns {Object} promise\n                     */\n                    list: function (aId, params) {\n                        return listActionlog(aId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n\n                            return entries;\n                        });\n                    }\n                },\n\n                events: {\n                    /**\n                     * list action log entries\n                     * @param   {String} aId    agent id\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} end\n                     * @returns {Object} promise\n                     */\n                    list: function (aId, params) {\n                        return listEvents(aId, params);\n                    }\n                },\n\n                chart: {\n                    /**\n                     * get chart config and values\n                     * @param   {String} aId    agent id\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} limit\n                     * @config  {Number} valueType\n                     * @returns {Object} promise\n                     */\n                    get: function (aId, params) {\n                        return getChart(aId, params).then(function (chartConfig) {\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\n\n                            return chartConfig;\n                        });\n                    }\n                },\n                category: {\n                    list: listCategories\n                },\n                /**\n                 * copy agent to a parent\n                 * @param   {String} aId\n                 * @param   {String}   parentId\n                 * @returns {Object} promise\n                 */\n                copy: function (aId, parentId) {\n                    return copy(aId, parentId);\n                },\n\n\n\n                /**\n                 * restart an agent\n                 * @param   {String} aId\n                 * @returns {Object} promise\n                 */\n                restart: function (aId) {\n                    return restart(aId);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\n    function seaAgentNote(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n        \n            function count(aId) {\n                return request.get({\n                    aId: aId,\n                    nId: 'count'\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n                \n                count: function (aId) {\n                    return count(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n    function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\n        \n            function update(setting) {\n                return request.put(setting);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n        \n            function remote(param) {\n                return remoteRequest.get(param);\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n                \n                /**\n                 * load settings from remote\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [information]\n                 */\n                remote: function (param) {\n                    return remote(param);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n        function seaAgentState(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/state/{method}'),\n                stateRequest = new SeaRequest('agent/{aId}/state/{sId}'),\n                hintRequest = new SeaRequest('agent/{aId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n\n                if (state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n\n                if (state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n\n                return state;\n            }\n\n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n\n                if (hint.until) {\n                    hint.until = new Date(hint.until);\n                }\n\n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n\n            function stats(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.method = 'stats';\n\n                return request.get(params);\n            }\n\n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        if (angular.isArray(statesById)) {\n                            var n = {};\n                            n[params.aId[0]] = statesById;\n                            statesById = n;\n                        }\n\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            function get(aId, sId, params) {\n                params = params || {};\n                params.sId = sId;\n                params.aId = aId;\n\n                return stateRequest.get(params).then(function (state) {\n                    return formatState(state);\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                },\n\n                /**\n               * get state by Id\n               * @param   {String}   aId\n               * @param   {String}   sId\n               * @param {Object}\n               * @config {Boolean} [includeHints]\n               * @config {Boolean} [includeMessage]\n               * @config {Boolean} [includeRawData]\n               * @config {String} [format]\n               */\n                get: function (aId, sId, params) {\n                    return get(aId, sId, params);\n                },\n\n                /**\n                 * list agent state stats\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (aId, params) {\n                    return stats(aId, params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\n    function seaAgentNote(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\n\n            function create(params) {\n                return request.put(params);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, tId) {\n                return request.del({\n                    aId: aId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * add tag to agent\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [tId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, tId) {\n                    return destroy(aId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n            var requestFaq = new SeaRequest('agent/type/{agentType}/faq');\n\n            function format(agentKnown) {\n                if(agentKnown.updateDate) {\n                    agentKnown.updateDate = new Date(agentKnown.updateDate);\n                }\n                \n                return agentKnown;\n            }\n        \n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list(params) {\n                return request.get(params).then(function (aks) { return aks.map(format); });\n            }\n\n            function listFaq(agentType) {\n                return requestFaq.get({agentType: agentType});\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list,\n                faq: {\n                    list: function(agentType) {\n                        return listFaq(agentType);\n                    },\n                },\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest', 'seaConfig',\n    function seaAuth(SeaRequest, seaConfig) {\n            var request = new SeaRequest('auth/{action}');\n            var requestMs = new SeaRequest(seaConfig.getMicroServiceUrl() + '/' + seaConfig.getMicroServiceApiVersion() + '/auth/{action}');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            function requestResetLink(params) {\n                params = params || {};\n                params.action = 'reset';\n\n                return request.get(params);\n            }\n            \n            function resetPassword(params) {\n                params = params || {};\n                params.action = 'reset';\n\n                return request.post(params);\n            }\n\n            function token(params) {\n                params = params || {};\n                params.action = 'token';\n\n                return requestMs.post(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                },\n                \n                requestResetLink: function (params) {\n                    return requestResetLink(params);\n                },\n\n                resetPassword: function (params) {\n                    return resetPassword(params);\n                },\n\n                token: function(params) {\n                    return token(params);\n                },\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaComplianceCheck', ['SeaRequest',\n        function seaComplianceCheck(SeaRequest) {\n            var request = new SeaRequest('compliance/check');\n\n            function get(containerId, customerId, viewFilterId) {\n                return request.get({\n                    containerId: containerId,\n                    customerId: customerId,\n                    viewFilterId: viewFilterId\n                });\n            }\n\n            return {\n                get: function (containerId, customerId, viewFilterId) {\n                    return get(containerId, customerId, viewFilterId);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCompliance', ['$q', 'SeaRequest', 'seaComplianceConfig', 'seaComplianceFix', 'seaComplianceViolation', 'seaComplianceCheck', 'seaRemotingIasHelper',\n        function seaCompliance($q, SeaRequest, seaComplianceConfig, seaComplianceFix, seaComplianceViolation, seaComplianceCheck, helper) {\n            return {\n                config: seaComplianceConfig,\n                fix: seaComplianceFix,\n                violation: seaComplianceViolation,\n                check: seaComplianceCheck\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaComplianceConfig', ['$q', 'SeaRequest', 'seaComplianceCustomer', \n        function seaComplianceConfig($q, SeaRequest, seaComplianceCustomer) {\n            var request = new SeaRequest('compliance/config');\n\n            function get(viewFilterId, customerId) {\n                return request.get({\n                    viewFilterId: viewFilterId,\n                    customerId: customerId\n                });\n            }\n\n            function update(viewFilterId, customerId, templateId, checks) {\n                return request.put({\n                    viewFilterId: viewFilterId,\n                    customerId: customerId,\n                    templateId: templateId,\n                    checks: checks\n                });\n            }\n\n            function destroy(viewFilterId, customerId) {\n                return request.del({\n                    viewFilterId: viewFilterId,\n                    customerId: customerId\n                });\n            }\n\n            function list(viewFilterIds, customerId) {\n                var loopPromises = [];\n                angular.forEach(viewFilterIds, function (viewFilterId) {\n                    var deferred = $q.defer();\n                    loopPromises.push(deferred.promise);\n                    \n                    get(viewFilterId, customerId).then(function (res) {\n                        deferred.resolve(res);\n                    }).catch(function (e) {\n                        deferred.resolve(null);\n                    });\n                });\n\n                return $q.all(loopPromises);\n            }\n\n            return {\n                get: function (viewFilterId, customerId) {\n                    return get(viewFilterId, customerId);\n                },\n\n                update: function (viewFilterId, customerId, templateId, checks) {\n                    return update(viewFilterId, customerId, templateId, checks);\n                },\n\n                destroy: function (viewFilterId, customerId) {\n                    return destroy(viewFilterId, customerId);\n                },\n\n                list: function (viewFilterIds, customerId) {\n                    return list(viewFilterIds, customerId);\n                },\n\n                customer: seaComplianceCustomer\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaComplianceCustomer', ['$q', 'SeaRequest',\n        function seaComplianceCustomer($q, SeaRequest) {\n            var request = new SeaRequest('compliance/config/customer');\n\n            function get(customerIds) {\n                return request.get({\n                    customerId: customerIds\n                });\n            }\n\n            return {\n                get: function (customerIds) {\n                    return get(customerIds);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaComplianceFix', ['SeaRequest',\n        function seaComplianceConfig(SeaRequest) {\n            var request = new SeaRequest('compliance/fix');\n\n            function update(changes) {\n                return request.put({\n                    changes: changes\n                });\n            }\n\n            return {\n                update: function (changes) {\n                    return update(changes);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaComplianceViolation', ['SeaRequest',\n        function seaComplianceViolation(SeaRequest) {\n            var request = new SeaRequest('compliance/violation');\n\n            function get(containerId, customerId, viewFilterId, messageFormat) {\n                return request.get({\n                    containerId: containerId,\n                    customerId: customerId,\n                    viewFilterId: viewFilterId,\n                    messageFormat: messageFormat\n                });\n            }\n\n            return {\n                get: function (containerId, customerId, viewFilterId, messageFormat) {\n                    return get(containerId, customerId, viewFilterId, messageFormat);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}/{action}');\n            var multiRequest = new SeaRequest('container/{action}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n        \n            function listAgents(cId) {\n                return request.get({\n                    cId: cId,\n                    action: 'agents'\n                });\n            }\n\n            function listProposals(cId) {\n                return multiRequest.post({\n                    cId: cId,\n                    action: 'proposal'\n                });\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            var api = {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n                \n                agent: {\n                    list: function (cId) {\n                        return listAgents(cId);\n                    }\n                },\n\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                tag: seaContainerTag,\n                template: seaContainerTemplate,\n                listProposals: listProposals,\n            };\n                \n            angular.extend(api, seaContainerMisc);\n        \n            return api;\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n        function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                try {\n                    entry.userName = JSON.parse(entry.userName);\n                } catch (e) {\n                    entry.userName = {\n                        email: entry.userName,\n                        sur: entry.userName\n                    };\n                }\n\n                if (entry.information) {\n                    try {\n                        entry.information = JSON.parse(entry.information);\n                    } catch (e) {\n                        entry.information = null;\n                    }\n                }\n\n                return entry;\n            }\n\n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function listEvents(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'events';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function action(cId, action, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = action;\n                return request.post(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n\n                            return entries;\n                        });\n                    }\n                },\n\n                events: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} end\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listEvents(cId, params);\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    },\n\n                    getFileLink: function (cId, params) {\n                        params = params || {};\n                        params.cId = cId;\n                        params.action = 'inventory';\n\n                        return request.formatUrl(params);\n                    }\n                },\n\n                /**\n                 * restart a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                restart: function (cId) {\n                    return action(cId, 'restart');\n                },\n\n                /**\n                 * stop a container\n                 * @param   {String} cId\n                 * @param   {Int}    until timestamp\n                 * @returns {Object} promise\n                 */\n                stop: function (cId, until) {\n                    return action(cId, 'stop', {\n                        until: until\n                    });\n                },\n\n                /**\n                 * start a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                start: function (cId) {\n                    return action(cId, 'start');\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function count(cId) {\n                return request.get({\n                    cId: cId,\n                    nId: 'count'\n                });\n            }\n        \n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n                \n                count: function (cId) {\n                    return count(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return request.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n        function seaContainerState(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/state/{method}'),\n                stateRequest = new SeaRequest('container/{cId}/state/{sId}'),\n                hintRequest = new SeaRequest('container/{cId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n\n                if (state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n\n                if (state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n\n                return state;\n            }\n\n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n\n                if (hint.until) {\n                    hint.until = new Date(hint.until);\n                }\n\n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n\n            function stats(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.method = 'stats';\n\n                return request.get(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        if (angular.isArray(statesById)) {\n                            var n = {};\n                            n[params.cId[0]] = statesById;\n                            statesById = n;\n                        }\n\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            function get(cId, sId, params) {\n                params = params || {};\n                params.sId = sId;\n                params.cId = cId;\n\n                return stateRequest.get(params).then(function (state) {\n                    return formatState(state);\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                },\n\n                /**\n              * get state by Id\n              * @param   {String}   cId\n              * @param   {String}   sId\n              * @param {Object}\n              * @config {Boolean} [includeHints]\n              * @config {Boolean} [includeMessage]\n              * @config {Boolean} [includeRawData]\n              * @config {String} [format]\n              */\n                get: function (cId, sId, params) {\n                    return get(cId, sId, params);\n                },\n\n                /**\n                 * list container state stats\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (cId, params) {\n                    return stats(cId, params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\n    function seaAgentNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\n\n            function create(params) {\n                return request.put(params);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, tId) {\n                return request.del({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * add tag to container\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [tId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, tId) {\n                    return destroy(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n\n            function create(cId) {\n                return request.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerApiKey', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/apiKey/{apiKey}'),\n                requestDistri = new SeaRequest('customer/apiKey/{apiKey}');\n\n            function format(apiKey) {\n                if(apiKey.validUntil) {\n                    apiKey.validUntil = new Date(apiKey.validUntil);\n                }\n                \n                if(apiKey.createdOn) {\n                    apiKey.createdOn = new Date(apiKey.createdOn);\n                }\n                \n                return apiKey;\n            }\n        \n            function list(cId) {\n                var p;\n                \n                if(!cId) {\n                    p = requestDistri.get();\n                } else {\n                    p = request.get({\n                        cId: cId\n                    });\n                }\n                \n                return p.then(function (apiKeys) {\n                    angular.forEach(apiKeys, format);\n                    \n                    return apiKeys;\n                });\n            }\n        \n            function get(cId, query) {\n                query = query || {};\n                query.cId = cId;\n                \n                return request.get(query).then(format);\n            }\n\n            function destroy(cId, apiKey) {\n                return request.del({\n                    cId: cId,\n                    apiKey: apiKey\n                });\n            }\n\n            return {\n                /**\n                 * list all api keys of a customer or all your customers\n                 * @param   {String} cId empty or customerId\n                 */\n                list: function (cId) {\n                    return list(cId);\n                },\n                \n                get: function (cId, query) {\n                    return get(cId, query);\n                },\n\n                destroy: function (cId, apiKey) {\n                    return destroy(cId, apiKey);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/bucket/{bId}'),\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(bucket) {\n                return request.put(bucket);\n            }\n\n            function destroy(bId) {\n                return request.del({\n                    bId: bId\n                });\n            }\n\n            function listUser(bId) {\n                return userRequest.get({\n                    bId: bId\n                });\n            }\n\n            function addUser(params) {\n                return userRequest.put(params);\n            }\n\n            function removeUser(bId, uId) {\n                return userRequest.del({\n                    bId: bId,\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * create bucket\n                 * @param {Object} params\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update bucket\n                 * @param {Object} params\n                 * @config {String} [bId]\n                 * @config {String} [name]\n                 */\n                update: function (bucket) {\n                    return update(bucket);\n                },\n\n                destroy: function (bId) {\n                    return destroy(bId);\n                },\n\n                user: {\n                    list: function (bId) {\n                        return listUser(bId);\n                    },\n\n                    /**\n                     * add user to bucket\n                     * @param {Object} params\n                     * @config {String} [bId]\n                     * @config {String} [uId]\n                     */\n                    create: function (params) {\n                        return addUser(params);\n                    },\n\n                    /**\n                     * remove user from bucket\n                     * @param {String} [bId]\n                     * @param {String} [uId]\n                     */\n                    destroy: function (bId, uId) {\n                        return removeUser(bId, uId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerApiKey', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerExternalCall', 'seaCustomerLocation', 'seaCustomerManager', 'seaCustomerProperty', 'seaCustomerSetting', 'seaCustomerTag', 'seaCustomerTemplate', 'seaCustomerUsage', 'seaCustomerViewFilter',\n        function seaCustomer(SeaRequest, seaCustomerApiKey, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerExternalCall, seaCustomerLocation, seaCustomerManager, seaCustomerProperty, seaCustomerSetting, seaCustomerTag, seaCustomerTemplate, seaCustomerUsage, seaCustomerViewFilter) {\n            var request = new SeaRequest('customer/{cId}');\n            var requestCreate = new SeaRequest('customer');\n\n            function list() {\n                return request.get();\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return request.put(customer);\n            }\n            \n            function create(customer) {\n                return requestCreate.post(customer);\n            }\n\n            return {\n                list: function () {\n                    return list();\n                },\n\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                create: function (customer) {\n                    return create(customer);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                apiKey: seaCustomerApiKey,\n                bucket: seaCustomerBucket,\n                dispatchTime: seaCustomerDispatchTime,\n                externalCall: seaCustomerExternalCall,\n                location: seaCustomerLocation,\n                manager: seaCustomerManager,\n                property: seaCustomerProperty,\n                setting: seaCustomerSetting,\n                tag: seaCustomerTag,\n                template: seaCustomerTemplate,\n                usage: seaCustomerUsage,\n                viewFilter: seaCustomerViewFilter\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return request.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return request.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerExternalCall', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var requestDistri = new SeaRequest('customer/externalCall');\n\n            function format(ecall) {\n                if(ecall.lastDate) {\n                    ecall.lastDate = new Date(ecall.lastDate);\n                }\n                \n                return ecall;\n            }\n        \n            function list() {\n                return requestDistri.get().then(function (ecalls) {\n                    angular.forEach(ecalls, format);\n                    \n                    return ecalls;\n                });\n            }\n        \n            return {\n                /**\n                 * list all external url calls of your customers\n                 */\n                list: function () {\n                    return list();\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerLocation', ['SeaRequest',\n        function seaCustomerLocation(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/location');\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(params) {\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * get location\n                 * @param {String} cId\n                 */\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update location\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {Object} [geo]\n                 * @config {Number} [geo.lat]\n                 * @config {Number} [geo.lon]\n                 * @config {Object} [geo.address]\n                 * @config {String} [geo.address.country]\n                 * @config {String} [geo.address.state]\n                 * @config {String} [geo.address.postcode]\n                 * @config {String} [geo.address.city]\n                 * @config {String} [geo.address.road]\n                 * @config {String} [geo.address.house_number]\n                 */\n                update: function (params) {\n                    return update(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerManager', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/manager/{uId}');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function addUser(cId, email) {\n                return request.put({\n                    cId: cId,\n                    uId: email\n                });\n            }\n\n            function removeUser(cId, uId) {\n                return request.del({\n                    cId: cId,\n                    uId: uId\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * add user as manager\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [email] email address of the user\n                 */\n                add: function (cId, email) {\n                    return addUser(cId, email);\n                },\n\n                remove: function (cId, uId) {\n                    return removeUser(cId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerProperty', ['SeaRequest',\n    function seaCustomerProperty(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/property/{key}');\n            var requestPost = new SeaRequest('customer/{cId}/property');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function create(cId, key, value) {\n                return requestPost.post({\n                    cId: cId,\n                    key: key,\n                    value: value\n                });\n            }\n\n            function destroy(cId, key) {\n                return request.del({\n                    cId: cId,\n                    key: key\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * add customer property\n                 * @param {String} cId\n                 * @param {String} key\n                 * @param {String} value\n                 */\n                create: function (cId, key, value) {\n                    return create(cId, key, value);\n                },\n\n                destroy: function (cId, key) {\n                    return destroy(cId, key);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/tag/{tId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(tag) {\n                return request.put(tag);\n            }\n\n            function destroy(tId) {\n                return request.del({\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create a tag\n                 * @param {Object} params\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update tag\n                 * @param {Object} params\n                 * @config {String} [tId]\n                 * @config {String} [name]\n                 */\n                update: function (tag) {\n                    return update(tag);\n                },\n\n                destroy: function (tId) {\n                    return destroy(tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerTemplate', ['SeaRequest',\n    function seaCustomerTemplate(SeaRequest) {\n            var request = new SeaRequest('customer/template/{tId}'),\n                requestAgent = new SeaRequest('customer/template/{tId}/agent/{aId}');\n\n            function list() {\n                return request.get();\n            }\n        \n            function listAgents(tId) {\n                return requestAgent.get({\n                    tId: tId\n                });\n            }\n\n            function destroy(tId) {\n                return request.del({\n                    tId: tId\n                });\n            }\n        \n            function destroyAgent(tId, aId) {\n                return request.del({\n                    tId: tId,\n                    aId: aId\n                });\n            }\n\n            return {\n                list: function () {\n                    return list();\n                },\n\n                destroy: function (tId) {\n                    return destroy(tId);\n                },\n                \n                agent: {\n                    list: function(tId) {\n                        return listAgents(tId);\n                    },\n                    destroy: function(tId, aId) {\n                        return destroyAgent(tId, aId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerUsage', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/usage'),\n                requestDistri = new SeaRequest('customer/usage');\n\n            function format(u) {\n                if (u.date) {\n                    u.date = new Date(u.date);\n                }\n\n                return u;\n            }\n\n            function list(year, month, cId) {\n                var params = {\n                    year: year,\n                    month: month\n                };\n\n                if (cId) {\n                    params.cId = cId;\n\n                }\n\n                return requestDistri.get(params).then(function (usage) {\n                    angular.forEach(usage, format);\n\n                    return usage;\n                });\n            }\n\n            return {\n                /**\n                 * list the max usage of all customers or the usage graph of a specific customer\n                 * @param   {Date} year of the required usage\n                 * @param   {Date} month of the required usage\n                 * @param   {String} cId empty or customerId\n                 */\n                list: function (year, month, cId) {\n                    return list(year, month, cId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerViewFilter', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/viewFilter/{vfId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(viewFilter) {\n                return request.put(viewFilter);\n            }\n\n            function destroy(vfId) {\n                return request.del({\n                    vfId: vfId\n                });\n            }\n\n            return {\n                /**\n                 * create viewFilter\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Object} [query]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update viewFilter\n                 * @param {Object} params\n                 * @config {String} [vfId]\n                 * @config {String} [name]\n                 * @config {Object} [query]\n                 */\n                update: function (viewFilter) {\n                    return update(viewFilter);\n                },\n\n                destroy: function (vfId) {\n                    return destroy(vfId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeLocation', ['SeaRequest',\n        function seaMeLocation(SeaRequest) {\n            var request = new SeaRequest('me/location');\n\n            function get() {\n                return request.get();\n            }\n\n            function update(params) {\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * get location\n                 */\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update location\n                 * @param {Object} params\n                 * @config {Object} [geo]\n                 * @config {Number} [geo.lat]\n                 * @config {Number} [geo.lon]\n                 * @config {Object} [geo.address]\n                 * @config {String} [geo.address.country]\n                 * @config {String} [geo.address.state]\n                 * @config {String} [geo.address.postcode]\n                 * @config {String} [geo.address.city]\n                 * @config {String} [geo.address.road]\n                 * @config {String} [geo.address.house_number]\n                 */\n                update: function (params) {\n                    return update(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeLocation', 'seaMeMobilepush', 'seaMeNotification', 'seaMeTwoFactor', 'seaMeSetting',\n        function seaMe(SeaRequest, seaMeLocation, seaMeMobilepush, seaMeNotification, seaMeTwoFactor, seaMeSetting) {\n            var request = new SeaRequest('me/{action}');\n\n            function _formatNode(node) {\n                ['date', 'lastDate', 'silencedUntil'].forEach(function (key) {\n                    if (node[key] && typeof (node[key]) === 'string') {\n                        node[key] = new Date(node[key]);\n                    }\n                });\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            function updatePassword(params) {\n                params = angular.extend({}, { action: 'password' }, params);\n                return request.put(params);\n            }\n\n            return {\n                me: me,\n                password: {\n                    update: function (params) {\n                        return updatePassword(params);\n                    },\n                },\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                location: seaMeLocation,\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification,\n                twofactor: seaMeTwoFactor,\n                setting: seaMeSetting\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return request.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function destroy(nId) {\n                return request.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  type\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return get(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeSetting', ['SeaRequest',\n    function seaMeSetting(SeaRequest) {\n            var request = new SeaRequest('me/setting');\n            var requestAction = new SeaRequest('me/setting/{action}');\n\n            function list() {\n                return request.get();\n            }\n\n            function update(settings) {\n                settings = settings || {};\n                return request.put(settings);\n            }\n\n            function resetSecret(password) {\n                return requestAction.post({\n                    action: 'secret/reset',\n                    password: password,\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} settings\n                 */\n                update: function (settings) {\n                    return update(settings);\n                },\n\n                secret: {\n                    reset: function(password) {\n                        return resetSecret(password);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeTwoFactor', ['SeaRequest',\n        function seaMeLocation(SeaRequest) {\n            var request = new SeaRequest('me/twofactor/{sub}');\n\n            function get() {\n                return request.get();\n            }\n\n            function getSecret(params) {\n                params = params || {};\n                params.sub = 'secret';\n                return request.get(params);\n            }\n\n            function enable(params) {\n                return request.post(params);\n            }\n\n            function disable(params) {\n                return request.del(params);\n            }\n\n            return {\n                /**\n                 * is two-factor enabled\n                 */\n                isEnabled: function () {\n                    return get();\n                },\n\n                /**\n                 * enable two-factor authentication\n                 * @param   {Object} params\n                 * @config  {string}  format\n                 * @returns {Object} promise\n                 */\n                getSecret: function (params) {\n                    return getSecret(params);\n                },\n\n                /**\n                 * enable two-factor authentication\n                 * @param   {Object} params\n                 * @config  {string}  password\n                 * @config  {string}  code\n                 * @returns {Object} promise\n                 */\n                enable: function (params) {\n                    return enable(params);\n                },\n\n                /**\n                 * disable two-factor authentication\n                 * @param   {Object} params\n                 * @config  {string}  password\n                 * @config  {string}  code\n                 * @returns {Object} promise\n                 */\n                disable: function (params) {\n                    return disable(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatchContainer', ['SeaRequest', 'seaPatchHelper',\n        function seaUser(SeaRequest, seaPatchHelper) {\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}')),\n                requestAction = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/{action}')),\n                requestPatchJobs = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/patch/{patchId}/jobs')),\n                requestPatch = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/patch/{patchId}'));\n\n            function get(customerId, cId, action, queryParameters) {\n                if (action) {\n                    var params = {\n                        customerId: customerId,\n                        cId: cId,\n                        action: action,\n                    };\n\n                    if (queryParameters) {\n                        params = angular.extend({}, params, queryParameters);\n                    }\n\n                    return requestAction.get(params);\n                }\n\n                return request.get({\n                    customerId: customerId,\n                    cId: cId,\n                });\n            }\n\n            function enable(customerId, cId) {\n                return requestAction.post({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'enable',\n                });\n            }\n\n            function disable(customerId, cId) {\n                return requestAction.post({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'disable',\n                });\n            }\n\n            function getJobsByPatchId(customerId, cId, queryParameters, patchId) {\n                var params = {\n                    customerId: customerId,\n                    cId: cId,\n                    patchId: patchId,\n                };\n                if (queryParameters) {\n                    params = angular.extend({}, params, queryParameters);\n                }\n                return requestPatchJobs.get(params);\n            }\n\n            function getPatchById(customerId, cId, patchId) {\n                return requestPatch.get({\n                    customerId: customerId,\n                    cId: cId,\n                    patchId: patchId,\n                });\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n                enable: function (customerId, cId) {\n                    return enable(customerId, cId);\n                },\n                disable: function (customerId, cId) {\n                    return disable(customerId, cId);\n                },\n                category: {\n                    list: function (customerId, cId) {\n                        return get(customerId, cId, 'categories');\n                    }\n                },\n                job: {\n                    list: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'jobs', queryParameters);\n                    },\n                    get: function(customerId, cId, patchId) {\n                        return getPatchById(customerId, cId, patchId);\n                    },\n                    history: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'jobs/history', queryParameters);\n                    },\n                },\n                patch: {\n                    list: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'patches', queryParameters);\n                    },\n                    get: function (customerId, cId, patchId) {\n                        return getPatchById(customerId, cId, patchId);\n                    },\n                    history: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'patches/history', queryParameters);\n                    },\n                    job: {\n                        list: function (customerId, cId, queryParameters, patchId) {\n                            return getJobsByPatchId(customerId, cId, queryParameters, patchId);\n                        },\n                    },\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatchHelper', ['seaConfig',\n    function (seaConfig) {        \n            function getUrl(path) {\n                return [seaConfig.getPmUrl(), path].join('/');\n            }\n\n            return {\n                getUrl: getUrl\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatch', ['SeaRequest', 'seaPatchContainer', 'seaPatchViewFilter', 'seaPatchHelper',\n        function seaUser(SeaRequest, seaPatchContainer, seaPatchViewFilter, seaPatchHelper) {\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/customers')),\n            requestCategories = new SeaRequest(seaPatchHelper.getUrl('patch/categories'));\n\n            function listCustomers() {\n                return request.get();\n            }     \n\n            function listCategories() {\n                return requestCategories.get();\n            }            \n            \n            return {\n                customer: {\n                    list: listCustomers\n                },\n                category: {\n                    list: listCategories,\n                },\n                container: seaPatchContainer,\n                viewFilter: seaPatchViewFilter,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatchViewFilter', ['SeaRequest', 'seaPatchHelper',\n        function seaUser(SeaRequest, seaPatchHelper) {\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilters')),\n                requestVf = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter/{vfId}/{action}')),\n                requestPost = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter')),\n                requestDel = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter/{vfId}'));\n\n            function get(customerId, vfId, action, queryParameters) {\n                if (vfId) {\n                    var params = {\n                        customerId: customerId,\n                        vfId: vfId,\n                        action: action,\n                    };\n\n                    if (queryParameters) {\n                        params = angular.extend({}, params, queryParameters);\n                    }\n\n                    return requestVf.get(params);\n                }\n\n                return request.get({\n                    customerId: customerId,\n                });\n            }\n\n            function post(customerId, vfId, body, action) {\n                if (vfId) {\n                    var params = angular.extend({}, { customerId: customerId, vfId: vfId, action: action }, body);\n                    return requestVf.post(params);\n                }\n\n                var params = angular.extend({}, { customerId: customerId }, body);\n                return requestPost.post(params);\n            }\n\n            function del(customerId, vfId) {\n                return requestDel.del({ customerId: customerId, vfId: vfId });\n            }\n\n            return {\n                list: function (customerId) {\n                    return get(customerId);\n                },\n                create: function (customerId, body) {\n                    return post(customerId, false, body);\n                },\n                destroy: function (customerId, vfId) {\n                    return del(customerId, vfId);\n                },\n                container: {\n                    list: function (customerId, vfId) {\n                        return get(customerId, vfId, 'containers');\n                    }\n                },\n                job: {\n                    list: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'jobs', queryParameters);\n                    },\n                    history: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'jobs/history', queryParameters);\n                    },\n                },\n                patch: {\n                    list: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'patches', queryParameters);\n                    },\n                    history: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'patches/history', queryParameters);\n                    },\n                },\n                setting: {\n                    list: function (customerId, vfId) {\n                        return get(customerId, vfId, 'settings');\n                    },\n\n                    update: function (customerId, vfId, body) {\n                        return post(customerId, vfId, body, 'settings');\n                    }\n                },\n\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellHelper', ['seaConfig',\n        function (seaConfig) {\n            function getUrl(path) {\n                return [seaConfig.getMicroServiceUrl(), seaConfig.getMicroServiceApiVersion(), 'powershell', path].join('/');\n            }\n\n            return {\n                getUrl: getUrl\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepository', ['SeaRequest', 'seaPowerShellHelper', 'seaPowerShellRepositoryScript', 'seaPowerShellRepositoryUser', 'seaPowerShellRepositoryUtil',\n        function (SeaRequest, seaPowerShellHelper, seaPowerShellRepositoryScript, seaPowerShellRepositoryUser, seaPowerShellRepositoryUtil) {\n            var request = new SeaRequest(seaPowerShellHelper.getUrl('repository'));\n            var requestRepository = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}'));\n\n            function listRepositories() {\n                return request.get();\n            }\n\n            function get(repositoryId) {\n                return requestRepository.get({\n                    repositoryId: repositoryId,\n                });\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return requestRepository.put(params);\n            }\n\n            function destroy(repositoryId) {\n                return requestRepository.del({\n                    repositoryId: repositoryId,\n                });\n            }\n\n            return {\n                list: function () {\n                    return listRepositories();\n                },\n                get: function (repositoryId) {\n                    return get(repositoryId);\n                },\n                /**\n                 * create repository\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} name\n                 * @config {String} [description]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                /**\n                 * update repository\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} name\n                 * @config {String} [description]\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                destroy: function (repositoryId) {\n                    return destroy(repositoryId);\n                },\n\n                script: seaPowerShellRepositoryScript,\n                user: seaPowerShellRepositoryUser,\n                util: seaPowerShellRepositoryUtil,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepositoryScript', ['SeaRequest', 'seaPowerShellHelper',\n        function (SeaRequest, seaPowerShellHelper) {\n            var request = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/script'));\n            var requestScripts = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/scripts'));\n            var requestScript = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/script/{scriptId}'));\n\n            function listScripts() {\n                return requestScripts.get();\n            }\n\n            function get(repositoryId, scriptId) {\n                return requestScript.get({\n                    repositoryId: repositoryId,\n                    scriptId: scriptId,\n                });\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return requestScript.put(params);\n            }\n\n            function destroy(repositoryId, scriptId) {\n                return requestScript.del({\n                    repositoryId: repositoryId,\n                    scriptId: scriptId,\n                });\n            }\n\n            return {\n                list: function () {\n                    return listScripts();\n                },\n                get: function (repositoryId, scriptId) {\n                    return get(repositoryId, scriptId);\n                },\n                /**\n                 * create script\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} name\n                 * @config {String} [description]\n                 * @config {String} script\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                /**\n                 * update script\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} scriptId\n                 * @config {String} name\n                 * @config {String} [description]\n                 * @config {String} script\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                destroy: function (repositoryId, scriptId) {\n                    return destroy(repositoryId, scriptId);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepositoryUser', ['SeaRequest', 'seaPowerShellHelper',\n        function (SeaRequest, seaPowerShellHelper) {\n            var request = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/user/{userId}'));\n\n            function add(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return request.put(params);\n            }\n\n            function remove(repositoryId, userId) {\n                return request.del({\n                    repositoryId: repositoryId,\n                    userId: userId,\n                });\n            }\n\n            return {\n                /**\n                 * add user\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} userId\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                add: function (params) {\n                    return add(params);\n                },\n                /**\n                 * update user\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} userId\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                remove: function (repositoryId, userId) {\n                    return remove(repositoryId, userId);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepositoryUtil', ['SeaRequest', 'seaPowerShellHelper',\n        function (SeaRequest, seaPowerShellHelper) {\n            var parseRequest = new SeaRequest(seaPowerShellHelper.getUrl('script/parse'));\n            var agentsRequest = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/script/{scriptId}/agent'));\n            var settingRequest = new SeaRequest(seaPowerShellHelper.getUrl('repository/agent/setting'));\n            var agentScriptRequest = new SeaRequest(seaPowerShellHelper.getUrl('repository/script/agent/{agentId}'));    \n            var taskScriptRequest = new SeaRequest(seaPowerShellHelper.getUrl('repository/script/scheduled/task/{taskId}'));    \n\n            function parseScript(script) {\n                return parseRequest.post(script);\n            }\n\n            function listAgents(repositoryId, scriptId) {\n                return agentsRequest.get({\n                    repositoryId: repositoryId,\n                    scriptId: scriptId,\n                });\n            }\n            \n            function getScriptByAgent(agentId) {\n                return agentScriptRequest.get({\n                    agentId: agentId,\n                });\n            }\n\n            function updateSettings(params) {\n                return settingRequest.put({\n                    powerShellRepositoryId: params.repositoryId,\n                    powerShellRepositoryScriptId: params.scriptId,\n                    agentId: params.agentId,\n                });\n            }\n\n            function getScriptByTaskId(taskId) {\n                return taskScriptRequest.get({\n                    taskId: taskId,\n                });\n            }\n\n            return {\n                parseScript: function (script) {\n                    return parseScript(script);\n                },\n                listAgents: function (repositoryId, scriptId) {\n                    return listAgents(repositoryId, scriptId);\n                },\n                getScriptByAgent: function (agentId) {\n                    return getScriptByAgent(agentId);\n                },\n                /**\n                * update agent settings\n                * @param {Object} params\n                * @config {String} repositoryId\n                * @config {String} scriptId\n                * @config {String} agentId\n                */\n                updateSettings: function (params) {\n                    return updateSettings(params);\n                },\n                getScriptByTaskId: function(taskId) {\n                    return getScriptByTaskId(taskId);\n                },\n            }\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingAntivirus', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/virus/1.0/{section}/{action}'));\n\n            function format(container) {\n                if (!container.EventList) {\n                    return container;\n                }\n\n                container.EventList.forEach(function (job) {\n                    ['Timestamp'].forEach(function (key) {\n                        if (job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n\n                return container;\n            }\n\n            function activate(params) {\n                var customerId = params.customerId,\n                    containerConfig = params.containerConfig;\n\n                if (!angular.isArray(containerConfig)) {\n                    containerConfig = [containerConfig];\n                }\n\n                containerConfig = containerConfig.map(function (c) {\n                    return {\n                        ContainerId: c.containerId,\n                        Token: c.token\n                    };\n                });\n\n                return request.post({\n                    section: 'container',\n                    ContainerList: containerConfig\n                });\n            }\n\n            function get(customerId, cId) {\n                return list(customerId, [cId]);\n            }\n\n            function list(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                query.section = 'container';\n                query.action = 'get';\n                \n                return request.post(query);\n            }\n        \n            function getEvents(customerId, cId, paging) {\n                return listEvents(customerId, [cId], paging).then(function (history) {\n                    return (history[0] || {}).EventList;\n                });\n            }\n\n            function listEvents(customerId, containerIds, paging) {\n                var query = helper.getContainerIds(containerIds);\n                query.section = 'event';\n                query.action = 'get';\n\n                if (paging) {\n                    query.Index = paging.index;\n                    query.Count = paging.count;\n                }\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n        \n            function checkEvents(customerId, containerIds, eventIds) {\n                var query = helper.getEventIds(eventIds);\n                query.section = 'event';\n                query.action = 'check';\n                \n                return request.post(query);\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds) {\n                    return list(customerId, containerIds);\n                },\n\n                /**\n                 * activate antivirus on a client\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {Array|Object} [containerConfig]\n                 * @config {String} [config.id]\n                 * @config {String} [config.token]\n                 */\n                activate: function (params) {\n                    return activate(params);\n                },\n\n                event: {\n                    get: function (customerId, cId, paging) {\n                        return getEvents(customerId, cId, paging);\n                    },\n\n                    list: function (customerId, containerIds, paging) {\n                        return getEvents(customerId, containerIds, paging);\n                    },\n                    \n                    check: function (customerId, containerIds, eventIds) {\n                        return checkEvents(customerId, containerIds, eventIds);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingIasHelper', [ '$q', 'seaConfig',\n    function seaRemotingPcvisit($q, seaConfig) {\n            function getContainerIds(containerIds) {\n                return convertIds(containerIds, 'ContainerIdList', 'ContainerId');\n            }\n\n            function getSoftwareIds(softwareIds) {\n                return convertIds(softwareIds, 'SoftwareIdList', 'SoftwareId');\n            }\n\n            function getJobIds(jobIds) {                \n                return convertIds(jobIds, 'JobIdList', 'JobId');\n            }\n        \n            function getEventIds(eventIds) {\n                return convertIds(eventIds, 'EventIdList', 'EventId');\n            }\n        \n            function convertIds(ids, rootName, subName) {\n                if (!angular.isArray(ids)) {\n                    ids = [ids];\n                }\n\n                var query = ids.map(function (id) {\n                    var o = {};\n                    o[subName] = id;\n                    return o;\n                });\n\n                var o = {};\n                o[rootName] = query;\n                \n                return o;\n            }\n\n            function idListResult(result) {\n                if (result.Msg == 'success') {\n                    return $q.resolve(result.IdList.map(function (entry) {\n                        return entry.Id;\n                    }));\n                }\n\n                return $q.reject(new Error(result.Msg));\n            }\n        \n            function getUrl(path) {\n                return [seaConfig.getPatchUrl(), path].join('/');\n            }\n\n            return {\n                getContainerIds: getContainerIds,\n                getSoftwareIds: getSoftwareIds,\n                getJobIds: getJobIds,\n                getEventIds: getEventIds,\n                idListResult: idListResult,\n                getUrl: getUrl\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingNetwork', ['SeaRequest',\n    function seaRemotingPcvisit(SeaRequest) {\n            var request = new SeaRequest('network/{customerId}/{cId}/system/{action}');\n\n            function format(job) {\n                if (job && job.createdAt) {\n                    job.createdAta = new Date(job.createdAt);\n                }\n\n                return job;\n            }\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function install(params) {\n                return request.post(params);\n            }\n        \n            function getInstallStatus(params) {\n                params = params || {};\n                \n                var customerId = params.customerId,\n                    cId = params.cId,\n                    version = params.version,\n                    jobIds = params.jobIds;\n                \n                return request.get({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'installstatus',\n                    v: version,\n                    jobIds: jobIds\n                }).then(function (jobs) {\n                   jobs.forEach(format);\n                    return jobs;\n                });\n            }\n\n            return {\n                system: {\n                    /**\n                     * list active directory of OCC Connector\n                     * @param {Object} params\n                     * @config {String} [customerId]\n                     * @config {String} [cId] ID of the OCC Connector\n                     * @config {String} [user]\n                     * @config {String} [domain]\n                     * @config {String} [password]\n                     */\n                    list: function (params) {\n                        return list(params);\n                    },\n\n                    /**\n                     * install Server-Eye on remote system\n                     * @param {Object} params\n                     * @config {String} [customerId]\n                     * @config {String} [cId] ID of the OCC Connector\n                     * @config {String} [user]\n                     * @config {String} [domain]\n                     * @config {String} [password]\n                     * @config {String} [host] Name of the host Server-Eye will be installed on\n                     */\n                    install: function (params) {\n                        return install(params);\n                    },\n\n                    /**\n                     * get the install status of install jobs\n                     * @param {Object} params\n                     * @config {String} [customerId]\n                     * @config {String} [cId] ID of the OCC Connector\n                     * @config {Array}  [jobIds]\n                     * @config {Integer} [version] remote install version\n                     */\n                    installStatus: function (params) {\n                        return getInstallStatus(params);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatch', ['$http', 'SeaRequest', 'seaRemotingIasHelper', 'seaRemotingPatchHistory', 'seaRemotingPatchInstall', 'seaRemotingPatchReboot', 'seaRemotingPatchScan', 'seaRemotingPatchSoftware',\n    function seaRemotingPcvisit($http, SeaRequest, helper, seaRemotingPatchHistory, seaRemotingPatchInstall, seaRemotingPatchReboot, seaRemotingPatchScan, seaRemotingPatchSoftware) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/{section}/{action}'));\n            var dateKeys = [\"LastScanTime\", \"LastInstallJobTime\", \"NextInstallJobTime\"];\n        \n            function format(container) {\n                dateKeys.forEach(function (key) {\n                    if(container[key]) {\n                        container[key] = new Date(container[key]);\n                    }\n                });\n                \n                return container;\n            }\n                \n            function get(customerId, cId) {\n                return list(customerId, [cId]);\n            }\n\n            function list(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n                \n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n                \n            function activate(params) {\n                var customerId = params.customerId,\n                    containerConfig = params.containerConfig,\n                    cron = params.cron;\n                \n                if(!angular.isArray(containerConfig)) {\n                    containerConfig = [ containerConfig ];\n                }\n                \n                containerConfig = containerConfig.map(function (c) {\n                    return {\n                        ContainerId: c.containerId,\n                        Token: c.token\n                    };\n                });\n                \n                return request.post({\n                    ContainerList: containerConfig,\n                    Cron: cron\n                });\n            }\n        \n            function destroy(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                \n                return request.del(query)\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds) {\n                    return list(customerId, containerIds);\n                },\n                \n                /**\n                 * activate patchmanagement on a client\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {Array|Object} [containerConfig]\n                 * @config {String} [config.id]\n                 * @config {String} [config.token]\n                 * @config {String} [cron]\n                 */\n                activate: function (params) {\n                    return activate(params);\n                },\n                deactivate: function (customerId, containerIds) {\n                    return destroy(customerId, containerIds);\n                },\n                \n                history: seaRemotingPatchHistory,\n                install: seaRemotingPatchInstall,\n                reboot: seaRemotingPatchReboot,\n                scan: seaRemotingPatchScan,\n                software: seaRemotingPatchSoftware\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPcvisit', ['SeaRequest',\n    function seaRemotingPcvisit(SeaRequest) {\n            var request = new SeaRequest('pcvisit/{customerId}/{cId}/{action}');\n\n            function format(access) {\n                if(access && access.date) {\n                    access.data = new Date(access.date);\n                }\n                \n                return access;\n            }\n        \n            function get(customerId, cId) {\n                return request.get({\n                    customerId: customerId,\n                    cId: cId\n                }).then(function (system) {\n                    format(system.lastAccess);\n                    return system;\n                });\n            }\n        \n            function start(params) {\n                params = params || {};\n                params.action = 'start';\n                \n                return request.post(params);\n            }\n\n            function isInstalled(customerId, cId) {\n                return request.get({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'check'\n                });\n            }\n\n            return {\n                get: function(customerId, cId) {\n                    return get(customerId, cId);\n                },\n                \n                /**\n                 * install pcvisit on remote system\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [cId]\n                 * @config {String} [supporterId]\n                 * @config {String} [supporterPassword]\n                 * @config {String} [user]\n                 * @config {String} [domain]\n                 * @config {String} [password]\n                 */\n                installAndStart: function (params) {\n                    return start(params);\n                },\n                \n                isInstalled: function (customerId, cId) {\n                    return isInstalled(customerId, cId);\n                },\n                \n                getConnectFileLink: function (customerId, cId) {\n                    return request.formatUrl({\n                        customerId: customerId,\n                        cId: cId,\n                        action: 'file'\n                    });\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPowershell', ['SeaRequest',\n    function seaRemotingPowershell(SeaRequest) {\n            var request = new SeaRequest('powershell/{customerId}/{cId}/{action}');\n        \n            function start(params) {\n                params = params || {};\n                params.action = 'start';\n                \n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * start a powershell session on a remote machine\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [cId]\n                 */\n                start: function (params) {\n                    return start(params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemoting', ['SeaRequest', 'seaRemotingPcvisit', 'seaRemotingNetwork', 'seaRemotingAntivirus', 'seaRemotingPatch', 'seaRemotingPowershell',\n        function seaRemoting(SeaRequest, seaRemotingPcvisit, seaRemotingNetwork, seaRemotingAntivirus, seaRemotingPatch, seaRemotingPowershell) {\n            var shutdownRequest = new SeaRequest('shutdown/{customerId}/{containerId}');\n\n            function shutdown(customerId, containerId, credentials, force, reboot) {\n                return shutdownRequest.post({\n                    customerId: customerId,\n                    containerId: containerId,\n                    force: force,\n                    reboot: reboot,\n                    user: credentials.user,\n                    password: credentials.password,\n                    domain: credentials.domain,\n                });\n            }\n\n            return {\n                antivirus: seaRemotingAntivirus,\n                pcvisit: seaRemotingPcvisit,\n                powershell: seaRemotingPowershell,\n                network: seaRemotingNetwork,\n                patch: seaRemotingPatch,\n                shutdown: function (customerId, containerId, credentials, force, reboot) {\n                    return shutdown(customerId, containerId, credentials, force, reboot);\n                }\n            };\n        }]);\n})();","","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaReporting', ['SeaRequest', 'seaReportingTemplate',\n    function seaCustomer(SeaRequest, seaReportingTemplate) {\n            var request = new SeaRequest('reporting/{cId}/report'),\n                reportRequest = new SeaRequest('reporting/{cId}/report/{rId}');\n\n            function formatReport(report) {\n                ['startDate', 'lastDate', 'nextDate'].forEach(function (prop) {\n                    if(report[prop]) {\n                        report[prop] = new Date(report[prop]);\n                    }\n                });\n                \n                if(report.history) {\n                    report.history.forEach(function (generated) {\n                        generated.generatedDate = new Date(generated.generatedDate);\n                    });\n                }\n                \n                return report;\n            }\n        \n            function create(params) {\n                return request.post(params);\n            }\n        \n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (reports) {\n                    reports.forEach(formatReport);\n                    return reports;\n                });\n            }\n        \n            function listTypes(cId) {\n                return reportRequest.get({\n                    cId: cId,\n                    rId: 'type'\n                });\n            }\n\n            function get(cId, rId) {\n                return reportRequest.get({\n                    cId: cId,\n                    rId: rId\n                }).then(function (report) {\n                    return formatReport(report);\n                });\n            }\n        \n            function destroy(cId, rId) {\n                return reportRequest.del({\n                    cId: cId,\n                    rId: rId\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                type: {\n                    list: function (cId) {\n                        return listTypes(cId);\n                    }\n                },\n                \n                report: {\n                    get: function (cId, rId) {\n                        return get(cId, rId);\n                    },\n                    \n                    /**\n                     * create report\n                     * @param {Object} params\n                     * @config {String} [cId]\n                     * @config {String} [rtId]\n                     * @config {String} [repeatCron]\n                     * @config {String} [recipients]\n                     */\n                    create: function(params) {\n                        return create(params);\n                    },\n                    \n                    destroy: function (cId, rId) {\n                        return destroy(cId, rId);\n                    }\n                },\n\n                template: seaReportingTemplate\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaReportingTemplate', ['SeaRequest',\n        function seaReportingTemplate(SeaRequest) {\n            var request = new SeaRequest('reporting/template/{rtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function get(rId) {\n                return reportRequest.get({\n                    rtId: rtId\n                });\n            }\n\n            function destroy(rId) {\n                return reportRequest.del({\n                    rtId: rtId\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                get: function (rtId) {\n                    return get(rtId);\n                },\n\n                /**\n                 * create report template\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Array} [widgets]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                destroy: function (rtId) {\n                    return destroy(rtId);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaScheduledTasksHelper', ['seaConfig',\n        function (seaConfig) {\n            function getUrl(path) {\n                return [seaConfig.getMicroServiceUrl(), seaConfig.getMicroServiceApiVersion(), 'scheduled', path].join('/');\n            }\n\n            return {\n                getUrl: getUrl\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaScheduledTasks', ['SeaRequest', 'seaScheduledTasksHelper', 'seaScheduledTasksTask', 'seaScheduledTasksUtil',\n        function (SeaRequest, seaScheduledTasksHelper, seaScheduledTasksTask, seaScheduledTasksUtil) {\n            var customerRequest =  new SeaRequest(seaScheduledTasksHelper.getUrl('task/customer/{customerId}'));\n            var containerRequest = new SeaRequest(seaScheduledTasksHelper.getUrl('task/container/{containerId}'));\n\n            function getByContainerId(containerId) {\n                return containerRequest.get({\n                    containerId: containerId,\n                });\n            }\n            \n            function getByCustomerId(customerId) {\n                return customerRequest.get({\n                    customerId: customerId,\n                });\n            }\n\n            return {\n                customer: {\n                    list: function (customerId) {\n                        return getByCustomerId(customerId);\n                    },\n                },\n                container: {\n                    list: function (containerId) {\n                        return getByContainerId(containerId)\n                    },\n                },\n                task: seaScheduledTasksTask,\n                util: seaScheduledTasksUtil,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaScheduledTasksTask', ['SeaRequest', 'seaScheduledTasksHelper',\n        function (SeaRequest, seaScheduledTasksHelper) {\n            var request = new SeaRequest(seaScheduledTasksHelper.getUrl('task'));\n            var requestTask = new SeaRequest(seaScheduledTasksHelper.getUrl('task/{taskId}'));\n            var requestTaskAction = new SeaRequest(seaScheduledTasksHelper.getUrl('task/{taskId}/{action}'));\n\n            function get(taskId) {\n                return requestTask.get({\n                    taskId: taskId,\n                });\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return requestTask.put(params);\n            }\n\n            function destroy(taskId, detach) {\n                return requestTask.del({\n                    taskId: taskId,\n                    detach: detach,\n                });\n            }\n\n            function copy(params) {\n                params = angular.extend({}, params, { action: 'copy' });\n                return requestTaskAction.post(params);\n            }\n\n            return {\n                get: function (taskId) {\n                    return get(taskId);\n                },\n                /**\n                 * create task\n                 * @param {Object} params\n                 * @config {String} containerId\n                 * @config {String} customerId\n                 * @config {String} name\n                 * @config {Array<String>} triggers\n                 * @config {String} [description]\n                 * @config {String} [powerShellRepositoryId]\n                 * @config {String} [powerShellRepositoryScriptId]\n                 * @config {String} [scriptData]\n                 * @config {String} [arguments]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                /**\n                 * update task\n                 * @param {Object} params\n                 * @config {String} taskId\n                 * @config {String} name\n                 * @config {Array<String>} triggers\n                 * @config {String} [description]\n                 * @config {String} [powerShellRepositoryId]\n                 * @config {String} [powerShellRepositoryScriptId]\n                 * @config {String} [scriptData]\n                 * @config {String} [arguments]\n                 * @config {Boolean} [detach]\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                /**\n                 * destroy task\n                 * @param {String} taskId\n                 * @param {Boolean} [detach]\n                 */\n                destroy: function (taskId, detach) {\n                    return destroy(taskId, detach);\n                },\n                /**\n                 * copy task\n                 * @param {Object} params\n                 * @config {String} taskId\n                 * @config {Array<String>} containerIds\n                 */\n                copy: function (params) {\n                    return copy(params);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaScheduledTasksUtil', ['seaScheduledTasksHelper', 'SeaRequest',\n        function (seaScheduledTasksHelper, SeaRequest) {\n\n\n            return {\n              \n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaSearch', ['SeaRequest',\n        function seaSearch(SeaRequest) {\n            var request = new SeaRequest('search/{sub}');\n\n            function actionlog(params) {\n                params = params || {};\n                params.sub = 'actionlog';\n\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * search through actionlog\n                 * @param {Object} params\n                 * @config {Object} [query]\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 */\n                actionlog: function (params) {\n                    return actionlog(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserLocation', ['SeaRequest',\n        function seaUserLocation(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/location');\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n            function update(params) {\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * get location\n                 * @param {String} uId\n                 */\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update location\n                 * @param {Object} params\n                 * @config {String} [uId]\n                 * @config {Object} [geo]\n                 * @config {Number} [geo.lat]\n                 * @config {Number} [geo.lon]\n                 * @config {Object} [geo.address]\n                 * @config {String} [geo.address.country]\n                 * @config {String} [geo.address.state]\n                 * @config {String} [geo.address.postcode]\n                 * @config {String} [geo.address.city]\n                 * @config {String} [geo.address.road]\n                 * @config {String} [geo.address.house_number]\n                 */\n                update: function (params) {\n                    return update(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserLocation', 'seaUserSetting', 'seaUserSubstitude',\n        function seaUser(SeaRequest, seaUserGroup, seaUserLocation, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}'),\n                requestUser = new SeaRequest('user/{uId}/{sub}'),\n                requestCustomer = new SeaRequest('user/{uId}/customer'),\n                requestUsers = new SeaRequest('user');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return request.put(user);\n            }\n\n            function destroy(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n\n            function listCustomers(uId) {\n                return requestCustomer.get({\n                    uId: uId\n                });\n            }\n\n            function listUsers(cId, includeLocation) {\n                return requestUsers.get({\n                    customerId: cId,\n                    includeLocation: includeLocation\n                });\n            }\n\n            function deactivateTwoFactor(uId, password) {\n                return requestUser.del({\n                    uId: uId,\n                    password: password,\n                    sub: 'twofactor'\n                });\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n                \n                list: function(cId, includeLocation) {\n                    return listUsers(cId, includeLocation);\n                },\n                \n                group: seaUserGroup,\n                location: seaUserLocation,\n                setting: seaUserSetting,\n                substitude: seaUserSubstitude,\n                customer: {\n                    list: function (uId) {\n                        return listCustomers(uId);\n                    }\n                },\n                twofactor: {\n                    /**\n                     * deactivate two-factor\n                     * @param   {String}   uId\n                     * @param   {String}   password\n                     */\n                    deactivate: function (uId, password) {\n                        return deactivateTwoFactor(uId, password);\n                    }\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultEntry', ['SeaRequest', 'seaVaultHelper',\n        function (SeaRequest, seaVaultHelper) {\n            var request = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry'));\n            var requestEntry = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry/{eId}'));\n            var requestAction = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry/{eId}/{action}'));\n            var requestEntries = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entries'));\n            var requestAgentSetting = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry/{eId}/agent/{aId}/setting/{key}'));\n\n            function listEntries(vId) {\n                return requestEntries.get({\n                    vId: vId,\n                });\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(vId, eId) {\n                return requestEntry.get(vId, eId);\n            }\n\n            function update(params) {\n                return requestEntry.put(params);\n            }\n\n            function destroy(vId, eId) {\n                return requestEntry.del({ vId, eId });\n            }\n\n            function unlock(params) {\n                params = angular.extend({}, params, { action: 'unlock' });\n                return requestAction.put(params);\n            }\n\n            function updateAgentSetting(params) {\n                return requestAgentSetting.put(params);\n            }\n\n\n            return {\n                list: function (vId) {\n                    return listEntries(vId);\n                },\n\n                /**\n                 * create entry\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} name\n                 * @config {String} description\n                 * @config {String} [password]\n                 * @config {String} [privateKey]\n                 * @config {Object} credentials \n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                get: function (vId, eId) {\n                    return get(vId, eId);\n                },\n\n                /**\n                 * update entry\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} eId\n                 * @config {String} name\n                 * @config {String} description\n                 * @config {String} [password]\n                 * @config {String} [privateKey]\n                 * @config {Object} credentials \n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                destroy: function (vId, eId) {\n                    return destroy(vId, eId);\n                },\n                /**\n                * unlock vault\n                * @param {Object} params\n                * @config {String} vId\n                * @config {String} [password]\n                * @config {String} [privateKey]\n                */\n                unlock: function (params) {\n                    return unlock(params);\n                },\n                agent: {\n                    setting: {\n                        /**\n                        * update agent settings with vault entries\n                        * @param {Object} params\n                        * @config {String} vId   vaultId\n                        * @config {String} eId   entryId\n                        * @config {String} aId   agentId\n                        * @config {String} key   agent setting key\n                        * @config {String} [password]\n                        * @config {String} [privateKey]\n                        */\n\n                        update: function (params) {\n                            return updateAgentSetting(params);\n                        }\n                    }\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultHelper', ['seaConfig',\n    function (seaConfig) {        \n            function getUrl(path) {\n                return [seaConfig.getMicroServiceUrl(), seaConfig.getMicroServiceApiVersion(), path].join('/');\n            }\n\n            return {\n                getUrl: getUrl\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultUser', ['SeaRequest', 'seaVaultHelper',\n        function (SeaRequest, seaVaultHelper) {\n            var request = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/user/{uId}'));\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return request.put(params);\n            }\n\n            function destroy(vId, uId) {\n                return request.del({\n                    vId: vId,\n                    uId: uId,\n                });\n            }\n\n            return {\n                /**\n                 * grant user access to a vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} uId\n                 * @config {String} password\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} uId\n                 * @config {String} password\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n\n                destroy: function (vId, uId) {\n                    return destroy(vId, uId);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultUtil', ['SeaRequest', 'seaVaultHelper',\n        function (SeaRequest, seaVaultHelper) {\n\n            var agentsRequest = new SeaRequest(seaVaultHelper.getUrl('vault/{vaultId}/entry/{entryId}/key/{credentialKey}/agent/'));\n            var settingRequest = new SeaRequest(seaVaultHelper.getUrl('vault/{vaultId}/entry/{entryId}/agent/{agentId}/setting/{credentialKey}'));\n\n            function listAgents(vId, eId, key) {\n                return agentsRequest.get({\n                    vaultId: vId,\n                    entryId: eId,\n                    credentialKey: key,\n                });\n            }\n\n            function updateSettings(params) {\n                return settingRequest.put({\n                    vaultId: params.vId,\n                    entryId: params.eId,\n                    agentId: params.aId,\n                    credentialKey: params.key,\n                });\n            }\n\n            return {\n                listAgents: function (vId, eId, key) {\n                    return listAgents(vId, eId, key);\n                },\n                /**\n                * update agent settings with vault entries\n                * @param {Object} params\n                * @config {String} vId   vaultId\n                * @config {String} eId   entryId\n                * @config {String} aId   agentId\n                * @config {String} key   agent setting key\n                * @config {String} [password]\n                * @config {String} [privateKey]\n                * @config {String} [token]\n                */\n                updateSettings: function (params) {\n                    return updateSettings(params);\n                },\n\n            }\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVault', ['SeaRequest', 'seaVaultHelper', 'seaVaultEntry', 'seaVaultUser', 'seaVaultUtil',\n        function (SeaRequest, seaVaultHelper, seaVaultEntry, seaVaultUser, seaVaultUtil) {\n            var requestVault = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}'));\n            var requestAction = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/{action}'));\n            var requestVaults = new SeaRequest(seaVaultHelper.getUrl('vault'));\n\n            function listVaults(queryParams) {\n                return requestVaults.get(queryParams);\n            }\n\n            function create(params) {\n                return requestVaults.post(params);\n            }\n            \n            function update(params) {\n                return requestVault.put(params);\n            }\n\n            function get(vId) {\n                return requestVault.get({\n                    vId: vId,\n                });\n            }\n\n            function destroy(vId) {\n                return requestVault.del({\n                    vId: vId\n                });\n            }\n            \n            function restore(params) {\n                params = angular.extend({}, params, {action: 'restore'});\n                return requestAction.post(params);\n            }\n           \n            function unlock(params) {\n                params = angular.extend({}, params, {action: 'unlock'});\n                return requestAction.put(params);\n            }\n\n            return {\n                list: function (queryParams) {\n                    return listVaults(queryParams);\n                },\n\n                /**\n                 * create vault\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} [userId]\n                 * @config {Boolean} showPassword\n                 * @config {String} authenticationMethod\n                 * @config {String} name\n                 * @config {String} description\n                 * @config {String} password\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (vId) {\n                    return get(vId);\n                },\n                \n                /**\n                 * update vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [showPassword]\n                 * @config {String} [authenticationMethod]\n                 * @config {String} [name]\n                 * @config {String} [description]\n                 * @config {String} password\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n\n                destroy: function (vId) {\n                    return destroy(vId);\n                },\n                \n                /**\n                 * restore vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} restoreKey\n                 */\n                restore: function (params) {\n                    return restore(params);\n                },\n                \n                /**\n                 * unlock vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} [password]\n                 * @config {String} [privateKey]\n                 */\n                unlock: function (params) {\n                    return unlock(params);\n                },\n                entry: seaVaultEntry,\n                user: seaVaultUser,\n                util: seaVaultUtil,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchHistory', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n        function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/history/{action}'));\n\n            function format(container) {\n                if (!container.JobList) {\n                    return container;\n                }\n\n                container.JobList.forEach(function (job) {\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\n                        if (job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n\n                return container;\n            }\n\n            function get(customerId, cId, params) {\n                return list(customerId, [cId], params).then(function (history) {\n                    return (history[0] || {}).JobList;\n                });\n            }\n\n            function list(customerId, containerIds, params) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n\n                params = params || {};\n\n                if (params.index != null) {\n                    query.Index = params.index;\n                }\n\n                if (params.count != null) {\n                    query.Count = params.count;\n                }\n\n                if (params.from != null) {\n                    query.From = params.from;\n                }\n\n                if (params.states != null) {\n                    query.States = params.states;\n                }\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n\n            return {\n                get: function (customerId, cId, params) {\n                    return get(customerId, cId, params);\n                },\n\n                list: function (customerId, containerIds, params) {\n                    return list(customerId, containerIds, params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchInstall', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n        function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/install/{action}'));\n\n            function format(container) {\n                if (!container.JobList) {\n                    return container;\n                }\n\n                container.JobList.forEach(function (job) {\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\n                        if (job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n\n                return container;\n            }\n\n            function get(customerId, cId) {\n                return list(customerId, [cId]).then(function (install) {\n                    return install[0];\n                });\n            }\n\n            function list(customerId, containerIds, params) {\n                var query;\n                params = params || {};\n\n                if (params.jobIds) {\n                    query = helper.getJobIds(params.jobIds);\n                    query.action = 'software';\n                } else {\n                    query = helper.getContainerIds(containerIds);\n                    query.action = 'get';\n                }\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n\n            function create(params) {\n                var customerId = params.customerId,\n                    userId = params.userId,\n                    containerId = params.containerId,\n                    categories = params.categories,\n                    software = params.softwareId,\n                    cron = params.cron,\n                    updateManualRelease = params.updateManualRelease,\n                    postInstall = params.postInstall;\n\n                var reqParams = {\n                    Cron: cron,\n                    UserId: userId\n                };\n\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\n\n                if (categories) {\n                    reqParams.CategoryList = categories;\n                }\n                if (software) {\n                    reqParams = angular.extend(reqParams, helper.getSoftwareIds(software));\n                }\n                if (updateManualRelease != null) {\n                    reqParams.InstallManualReleaseSW = updateManualRelease;\n                }\n                if (postInstall == null) {\n                    postInstall = 'NOTHING';\n                }\n\n                reqParams.PostAction = postInstall;\n\n                return request.post(reqParams).then(helper.idListResult);\n            }\n\n            function destroy(customerId, jobId) {\n                var query = helper.getJobIds(jobId);\n\n                return request.del(query).then(helper.idListResult);\n            }\n\n            function getSoftware(customerId, jobId) {\n                return listSoftware(customerId, [jobId]).then(function (install) {\n                    return (install[0] || {});\n                });\n            }\n\n            function listSoftware(customerId, jobIds) {\n                var query = helper.getJobIds(jobIds);\n                query.action = 'software';\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds, params) {\n                    return list(customerId, containerIds, params);\n                },\n\n                /**\n                 * create scan job\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String|Array} [containerId]\n                 * @config {String|Array} [softwareId]\n                 * @config {Array} [categories]\n                 * @config {String} [cron]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                destroy: function (customerId, jobId) {\n                    return destroy(customerId, jobId);\n                },\n\n                getSoftware: function (customerId, jobId) {\n                    return getSoftware(customerId, jobId);\n                },\n\n                listSoftware: function (customerId, jobIds) {\n                    return listSoftware(customerId, jobIds);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchReboot', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/reboot'));\n\n            function create(params) {\n                var customerId = params.customerId,\n                    userId = params.userId,\n                    containerId = params.containerId,\n                    cron = params.cron,\n                    action = params.action;\n\n                var reqParams = {\n                    Cron: cron,\n                    Action: action,\n                    UserId: userId\n                };\n\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\n\n                return request.post(reqParams).then(helper.idListResult);\n            }\n\n            function destroy(customerId, jobId) {\n                var query = helper.getJobIds(jobId);\n\n                return request.del(query).then(helper.idListResult);\n            }\n\n            return {\n                /**\n                 * create reboot job\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String|Array} [containerId]\n                 * @config {String} [action]\n                 * @config {String} [cron]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                destroy: function (customerId, jobId) {\n                    return destroy(customerId, jobId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchScan', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/scan/{action}'));\n        \n            function format(container) {\n                if(!container.JobList) {\n                    return container;\n                }\n                \n                container.JobList.forEach(function (job) {\n                    ['StartTime', 'EndTime'].forEach(function (key) {\n                        if(job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n                \n                return container;\n            }\n                \n            function get(customerId, cId) {\n                return list(customerId, [cId]).then(function (scan) {\n                    return scan[0];\n                });\n            }\n\n            function list(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n                \n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n        \n            function create(params) {\n                var query = helper.getContainerIds(params.containerIds);\n                query.Cron = params.cron;\n                \n                return request.post(query).then(helper.idListResult);\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds) {\n                    return list(customerId, containerIds);\n                },\n                \n                /**\n                 * create scan job\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String|Array} [containerIds]\n                 * @config {String} [cron]\n                 */\n                create: function (params) {\n                    return create(params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchSoftware', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/software/{action}')),\n                requestSoftware = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/software/{method}/{action}'));\n\n            function get(customerId, softwareId) {\n                var query = helper.getSoftwareIds(softwareId);\n                query.method = 'get';\n\n                return requestSoftware.post(query).then(function (result) { return result[0]; });\n            }\n        \n            function getByContainer(customerId, cId, params) {\n                return listByContainer(customerId, [cId], params).then(function (software) {\n                    return software[0];\n                });\n            }\n\n            function listByContainer(customerId, containerIds, params) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n\n                params = params || {};\n\n                if (params.installed == null) {\n                    query.Installed = 'BOTH';\n                } else {\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\n                }\n\n                if (params.blocked == null) {\n                    query.Blocked = 'BOTH';\n                } else {\n                    query.Blocked = params.blocked ? 'TRUE' : 'FALSE';\n                }\n\n                return request.post(query);\n            }\n\n            function has(customerId, containerIds, softwareIds, params) {\n                var query = helper.getContainerIds(containerIds);\n                query.SoftwareIdList = helper.getSoftwareIds(softwareIds).SoftwareIdList;\n                query.method = 'container';\n\n                params = params || {};\n\n                if (params.installed == null) {\n                    query.Installed = 'BOTH';\n                } else {\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\n                }\n\n                return requestSoftware.post(query);\n            }\n\n            function block(customerId, containerIds, softwareIds, isBlocked) {\n                var query = angular.extend(\n                    helper.getContainerIds(containerIds),\n                    helper.getSoftwareIds(softwareIds)\n                );\n                query.action = 'block';\n                query.Blocked = isBlocked;\n\n                return request.post(query).then(helper.idListResult);\n            }\n\n            return {\n                container: {\n                    /**\n                     * list software of container\n                     * @param {String} customerId\n                     * @param {String} containerId\n                     * @param {Object} params\n                     * @config {Boolean} [installed]\n                     * @config {Boolean} [blocked]\n                     */\n                    get: function (customerId, containerId, params) {\n                        return getByContainer(customerId, containerId, params);\n                    },\n\n                    list: function (customerId, containerIds, params) {\n                        return listByContainer(customerId, containerIds, params);\n                    }\n                },\n\n                get: function(customerId, softwareId) {\n                    return get(customerId, softwareId);\n                },\n                \n                /**\n                 * find out if a container has a specific software installed\n                 * @param {String} customerId\n                 * @param {String} containerId\n                 * @param {String} softwareId\n                 * @param {Object} params\n                 * @config {Boolean} [installed]\n                 */\n                has: function (customerId, containerId, softwareId, params) {\n                    return has(customerId, containerId, softwareId, params);\n                },\n\n                /**\n                 * block software on containers\n                 * @param   {String}   customerId   \n                 * @param   {String|Array}   containerIds \n                 * @param   {String|Array}   softwareIds  \n                 * @param   {Boolean}  isBlocked\n                 */\n                block: function (customerId, containerIds, softwareIds, isBlocked) {\n                    return block(customerId, containerIds, softwareIds, isBlocked);\n                }\n            };\n    }]);\n})();"],"sourceRoot":"/source/"}