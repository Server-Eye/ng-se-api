{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/template.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/setting.js","src/customer/tag.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACntrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ng-se-api.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var fullUrl = seaConfig.getUrl(urlPath || this.urlPath),\r\n                    deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = angular.copy(params);\r\n                conf.url = this.formatUrl(fullUrl, params);\r\n\r\n                if (method === 'POST' || method === 'PUT') {\r\n                    conf.data = params || {};\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params);\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params);\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\r\n    function seaAgentNitification(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\r\n    function seaAgentSetting(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/setting/{key}');\r\n\r\n            function update(setting) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [key]\r\n                 * @config {String} [value]\r\n                 */\r\n                update: function (setting) {\r\n                    return update(setting);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\r\n    function seaAgentState(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/state');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                return state;\r\n            }\r\n\r\n            function hint(setting) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n\r\n                if (angular.isArray(params.aId)) {\r\n                    return request.post(params, 'agent/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n\r\n                        return statesById;\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list agent states\r\n                 * @param   {String}   aId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (aId, params) {\r\n                    return list(aId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\r\n    function seaAgentType(SeaRequest) {\r\n            var request = new SeaRequest('agent/type');\r\n\r\n            function listSettings(akId) {\r\n                return request.get({\r\n                    akId: akId\r\n                }, 'agent/type/{akId}/setting');\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            return {\r\n                setting: {\r\n                    /**\r\n                     * list settings of an agent type\r\n                     * @param {Object} params\r\n                     * @config {String} [akId]\r\n                     */\r\n                    list: function (akId) {\r\n                        return listSettings(akId);\r\n                    }\r\n                },\r\n\r\n                list: list\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\r\n    function seaAuth(SeaRequest) {\r\n            var request = new SeaRequest('auth/{action}');\r\n\r\n            function createApiKey(params) {\r\n                params = params || {};\r\n                params.action = 'key';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function login(params) {\r\n                params = params || {};\r\n                params.action = 'login';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function logout(params) {\r\n                params = params || {};\r\n                params.action = 'logout';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create apiKey\r\n                 * @param {Object} params\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Number} [type]\r\n                 * @config {Number} [validUntil]\r\n                 * @config {Number} [maxUses]\r\n                 */\r\n                createApiKey: function (params) {\r\n                    return createApiKey(params);\r\n                },\r\n\r\n                /**\r\n                 * login\r\n                 * @param {Object} params\r\n                 * @config {String} [apiKey]\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Boolean} [createApiKey]\r\n                 * @config {String} [apiKeyName]\r\n                 */\r\n                login: function (params) {\r\n                    return login(params);\r\n                },\r\n\r\n                logout: function () {\r\n                    return logout();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\r\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\r\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTemplate',\r\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTemplate) {\r\n            var request = new SeaRequest('container/{cId}');\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(container) {\r\n                return request.put(container);\r\n            }\r\n\r\n            function destroy(cId) {\r\n                return request.del({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update container\r\n                 * @param {Object} container\r\n                 * @config {String} [cId]\r\n                 * @config {String} [name]\r\n                 * @config {Boolean} [alertOffline]\r\n                 * @config {Boolean} [alertShutdown]\r\n                 * @config {Number} [maxHeartbeatTimeout]\r\n                 */\r\n                update: function (container) {\r\n                    return update(container);\r\n                },\r\n\r\n                destroy: function (cId) {\r\n                    return destroy(cId);\r\n                },\r\n\r\n                actionlog: seaContainerMisc.actionlog,\r\n                inventory: seaContainerMisc.inventory,\r\n                note: seaContainerNote,\r\n                notification: seaContainerNotification,\r\n                pcvisit: seaContainerMisc.pcvisit,\r\n                proposal: seaContainerProposal,\r\n                state: seaContainerState,\r\n                template: seaContainerTemplate\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\r\n    function seaContainerMisc(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/{action}');\r\n\r\n            function listActionlog(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getInventory(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'inventory';\r\n                return request.get(params);\r\n            }\r\n\r\n            function connectPcvisit(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'pcvisit';\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} cId\r\n                     * @param   {Object} params\r\n                     * @config  {Number} [start]\r\n                     * @config  {Number} [limit]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (cId, params) {\r\n                        return listActionlog(cId, params);\r\n                    }\r\n                },\r\n\r\n                inventory: {\r\n                    /**\r\n                     * get inventory of the container\r\n                     * @param   {String}   cId\r\n                     * @param   {String}   params\r\n                     * @config {String} [format]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (cId, params) {\r\n                        return getInventory(cId, params);\r\n                    }\r\n                },\r\n                pcvisit: {\r\n                    /**\r\n                     * install and connect to pcvisit\r\n                     * @param   {String} cId\r\n                     * @param   {Object}   params\r\n                     * @config  {String}   [supporterId]\r\n                     * @config  {String}   [supporterPassword]\r\n                     * @config  {String}   [user]\r\n                     * @config  {String}   [password]\r\n                     * @config  {String}   [domain]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    connect: function (cId, params) {\r\n                        return connectPcvisit(cId, params);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\r\n    function seaContainerNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    aId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create note\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\r\n    function seaContainerNotification(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\r\n    function seaContainerProposal(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\r\n\r\n            function accept(cId, pId) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function deny(cId, pId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function listSettings(cId, pId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    pId: pId\r\n                }, 'container/{cId}/proposal/{pId}/setting');\r\n            }\r\n\r\n            return {\r\n                accept: function (cId, pId) {\r\n                    return accept(cId, pId);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                deny: function (cId, pId) {\r\n                    return deny(cId, pId);\r\n                },\r\n\r\n                settings: {\r\n                    list: function (cId, pId) {\r\n                        return listSettings(cId, pId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\r\n    function seaContainerState(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/state');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                return state;\r\n            }\r\n\r\n            function hint(setting) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n\r\n                if (angular.isArray(params.cId)) {\r\n                    return request.post(params, 'container/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create container state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list container states\r\n                 * @param   {String}   cId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (cId, params) {\r\n                    return list(cId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\r\n    function seaContainerTemplate(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/template/{tId}');\r\n\r\n            function create(cId) {\r\n                return request.post({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function assign(cId, tId) {\r\n                return request.post({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create template form system\r\n                 * @param {String} cId\r\n                 */\r\n                create: function (cId) {\r\n                    return create(cId);\r\n                },\r\n\r\n                /**\r\n                 * assign a template to a system\r\n                 * @param {String} cId\r\n                 * @param {String} tId\r\n                 */\r\n                assign: function (cId, tId) {\r\n                    return assign(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerSetting', 'seaCustomerDispatchTime', 'seaCustomerTag',\r\n    function seaCustomer(SeaRequest, seaCustomerSetting, seaCustomerDispatchTime, seaCustomerTag) {\r\n            var request = new SeaRequest('customer/{cId}');\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(customer) {\r\n                return request.put(customer);\r\n            }\r\n\r\n            return {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {Object} customer\r\n                 * @config {String} [cId]\r\n                 * @config {String} [country]\r\n                 * @config {Number} [customerNumberIntern]\r\n                 * @config {Number} [customerNumberExtern]\r\n                 * @config {String} [companyName]\r\n                 * @config {String} [street]\r\n                 * @config {String} [zipCode]\r\n                 * @config {String} [city]\r\n                 * @config {String} [email]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (customer) {\r\n                    return update(customer);\r\n                },\r\n\r\n                setting: seaCustomerSetting,\r\n                dispatchTime: seaCustomerDispatchTime,\r\n                tag: seaCustomerTag\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(dispatchTime) {\r\n                return request.put(dispatchTime);\r\n            }\r\n\r\n            function destroy(dtId) {\r\n                return request.del({\r\n                    dtId: dtId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [dtId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                update: function (dispatchTime) {\r\n                    return update(dispatchTime);\r\n                },\r\n\r\n                destroy: function (dtId) {\r\n                    return destroy(dtId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\r\n    function seaCustomerSetting(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/setting');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(cId, settings) {\r\n                settings = settings || {};\r\n                settings.cId = cId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {String} cId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (cId, settings) {\r\n                    return update(cId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(disptagatchTime);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\r\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\r\n            var request = new SeaRequest('group/{gId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(group) {\r\n                return request.put(group);\r\n            }\r\n\r\n            function destroy(gId) {\r\n                return request.del({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create group\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {Object} group\r\n                 * @config {String} [gId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (group) {\r\n                    return update(group);\r\n                },\r\n\r\n                destroy: function (gId) {\r\n                    return destroy(gId);\r\n                },\r\n\r\n                setting: seaGroupSetting,\r\n                user: seaGroupUser\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\r\n    function seaGroupSetting(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/setting');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(gId, settings) {\r\n                settings = settings || {};\r\n                settings.gId = gId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {String} gId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (gId, settings) {\r\n                    return update(gId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\r\n    function seaGroupUser(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/user/{uId}');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function addUser(gId, uId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(gId, uId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (gId, uId) {\r\n                    return addUser(gId, uId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (gId, uId) {\r\n                    return removeUser(gId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\r\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\r\n            var request = new SeaRequest('me/{action}');\r\n\r\n            function _formatNode(node) {\r\n                if (node.date && typeof (node.date) === 'string') {\r\n                    node.date = new Date(node.date);\r\n                }\r\n\r\n                if (node.lastDate && typeof (node.lastDate) === 'string') {\r\n                    node.lastDate = new Date(node.lastDate);\r\n                }\r\n\r\n                return node;\r\n            }\r\n\r\n            function _formatData(data) {\r\n                var idx = data.indexOf('loadfinish');\r\n                if (idx >= 0) {\r\n                    data.splice(idx, 1);\r\n                }\r\n\r\n                for (var i = 0, len = data.length; i < len; i++) {\r\n                    _formatNode(data[i]);\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            function me() {\r\n                return request.get();\r\n            }\r\n\r\n            function customer() {\r\n                return request.get({\r\n                    action: 'customer'\r\n                });\r\n            }\r\n\r\n            function feed(params) {\r\n                params = params || {};\r\n                params.action = 'feed';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            function key(name) {\r\n                return request.get({\r\n                    action: 'key',\r\n                    name: name\r\n                });\r\n            }\r\n\r\n            function nodes(params) {\r\n                params = params || {};\r\n                params.action = 'nodes';\r\n\r\n                return request.get(params).then(_formatData);\r\n            }\r\n\r\n            return {\r\n                me: me,\r\n                customer: customer,\r\n                feed: function (params) {\r\n                    return feed(params);\r\n                },\r\n                key: function (name) {\r\n                    return key(name);\r\n                },\r\n                nodes: function (params) {\r\n                    return nodes(params);\r\n                },\r\n\r\n                mobilepush: seaMeMobilepush,\r\n                notification: seaMeNotification\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\r\n    function seaMeMobilepush(SeaRequest) {\r\n            var request = new SeaRequest('me/mobilepush/{handle}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(handle) {\r\n                return request.get({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            function destroy(handle) {\r\n                return request.del({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: list,\r\n\r\n                /**\r\n                 * add mobilepush\r\n                 * @param   {Object} params\r\n                 * @config  {String} handle\r\n                 * @config  {String} type\r\n                 * @returns {Object} promise\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (handle) {\r\n                    return get(handle);\r\n                },\r\n\r\n                destroy: function (handle) {\r\n                    return destroy(handle);\r\n                }\r\n            };\r\n  }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\r\n    function seaMeNotification(SeaRequest) {\r\n            var request = new SeaRequest('me/notification/{nId}');\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function destroy(nId) {\r\n                return request.del({\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all notifications\r\n                 * @param   {Object} params\r\n                 * @config  {Boolean}  includeGroups\r\n                 * @returns {Object} promise\r\n                 */\r\n                list: function (params) {\r\n                    return list(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId || aId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return get(notification);\r\n                },\r\n\r\n                destroy: function (nId) {\r\n                    return destroy(nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\r\n    function seaUserGroup(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/group/{gId}');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function addUser(uId, gId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(uId, gId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (uId, gId) {\r\n                    return addUser(uId, gId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId, gId) {\r\n                    return removeUser(uId, gId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\r\n    function seaUserSetting(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/setting');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(uId, settings) {\r\n                settings = settings || {};\r\n                settings.uId = uId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {String} uId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (uId, settings) {\r\n                    return update(uId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\r\n    function seaUserSubstitude(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\r\n\r\n            function set(uId, substId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    substitudeId: substId\r\n                });\r\n            }\r\n\r\n            function remove(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * set a substitude\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                set: function (uId, substId) {\r\n                    return set(uId, substId);\r\n                },\r\n\r\n                /**\r\n                 * remove substitude\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId) {\r\n                    return remove(uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\r\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\r\n            var request = new SeaRequest('user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(user) {\r\n                return request.put(user);\r\n            }\r\n\r\n            function destroy(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function search(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create user\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {Object} user\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (user) {\r\n                    return update(user);\r\n                },\r\n\r\n                destroy: function (uId) {\r\n                    return destroy(uId);\r\n                },\r\n\r\n                /**\r\n                 * search users\r\n                 * @param   {Object}   params\r\n                 * @config  {String}   [query]\r\n                 * @config  {String}   [customerId]\r\n                 * @config  {Boolean}  [includeLocation]\r\n                 */\r\n                search: function (params) {\r\n                    return search(params);\r\n                },\r\n\r\n                setting: seaUserSetting,\r\n                group: seaUserGroup,\r\n                substitude: seaUserSubstitude\r\n            };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}