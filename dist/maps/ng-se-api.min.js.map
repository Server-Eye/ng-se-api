{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/template.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/setting.js","src/customer/tag.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey","factory","SeaRequest","seaConfig","$q","$http","urlPath","prototype","formatUrl","url","params","keys","Object","i","length","regex","RegExp","test","replace","send","method","fullUrl","deferred","defer","conf","copy","data","then","resp","resolve","err","reject","promise","get","post","put","del","VALID_EVENTS","$rootScope","fireEvent","name","argsObj","console","log","$broadcast","connect","credentials","rooms","io","error","sio","settings","on","onerror","onconnect","userId","roomId","forEach","evtName","ondata","sendSettings","emit","connected","hasEverBeenConnected","reconnected","evt","type","toLowerCase","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","formatActionlog","entry","changeDate","Date","changed","JSON","parse","userName","formatMeasurement","m","ts","listActionlog","action","getChart","parentId","listCategories","list","entries","chartConfig","measurements","formatNote","postedOn","notes","nId","formatState","date","lastDate","hint","isArray","statesById","key","states","listSettings","akId","createApiKey","login","logout","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTemplate","formatContainer","container","lastBootUpTime","cId","inventory","pcvisit","proposal","template","getInventory","connectPcvisit","accept","pId","deny","assign","tId","seaCustomerSetting","seaCustomerDispatchTime","seaCustomerTag","customer","dispatchTime","tag","dtId","disptagatchTime","seaGroupSetting","seaGroupUser","gId","group","user","addUser","uId","removeUser","add","remove","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","indexOf","splice","len","me","feed","nodes","mobilepush","handle","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","substitude"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var fullUrl = seaConfig.getUrl(urlPath || this.urlPath),\r\n                    deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = angular.copy(params);\r\n                conf.url = this.formatUrl(fullUrl, params);\r\n\r\n                if (method === 'POST' || method === 'PUT') {\r\n                    conf.data = params || {};\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    var VALID_EVENTS = ['USER_UPDATE', 'NODE_ADD', 'NODE_UPDATE', 'NODE_REMOVE', 'REMOTE_RESULT'];\r\n\r\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\r\n    function ($rootScope, seaConfig) {\r\n            var connected = false,\r\n                reconnected = false,\r\n                hasEverBeenConnected = false,\r\n                sio;\r\n\r\n            var settings = {};\r\n\r\n            function fireEvent(name, argsObj) {\r\n                argsObj = argsObj || {};\r\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\r\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\r\n            }\r\n\r\n            function connect(credentials, rooms) {\r\n                if (typeof io == 'undefined') {\r\n                    console.error('required socket.io lib not found');\r\n                    return;\r\n                }\r\n\r\n                sio = io(seaConfig.getBaseUrl());\r\n\r\n                settings.rooms = rooms;\r\n\r\n                sio.on('error', onerror);\r\n                sio.on('connect', onconnect);\r\n                sio.on('connecting', function () {\r\n                    console.log('connecting socket');\r\n                });\r\n                sio.on('disconnect', function () {\r\n                    console.log('disconnected socket');\r\n                    onerror('socket.disconnected');\r\n                });\r\n                sio.on('connect_error', function () {\r\n                    console.log('connect socket failed');\r\n                    onerror('socket.connect_failed');\r\n                });\r\n                sio.on('reconnect_error', function () {\r\n                    console.log('reconnect socket failed');\r\n                    onerror('socket.reconnect_failed');\r\n                });\r\n                sio.on('reconnecting', function () {\r\n                    console.log('reconnecting socket');\r\n                });\r\n\r\n                sio.on('socket:joined', function (userId, roomId) {\r\n                    console.log(userId, 'joined', roomId);\r\n                });\r\n\r\n                // server-eye events\r\n                VALID_EVENTS.forEach(function (evtName) {\r\n                    sio.on(evtName, function (data) {\r\n                        ondata(evtName, data);\r\n                    });\r\n                });\r\n            }\r\n\r\n            function sendSettings() {\r\n                sio.emit('settings', settings);\r\n            }\r\n\r\n            function onerror(err) {\r\n                console.log('socket error:', err);\r\n                connected = false;\r\n                fireEvent('error', err);\r\n            }\r\n\r\n            function onconnect() {\r\n                console.log('connected socket');\r\n                connected = true;\r\n\r\n                if (hasEverBeenConnected) {\r\n                    reconnected = true;\r\n                }\r\n\r\n                hasEverBeenConnected = true;\r\n\r\n                var evt = reconnected ? 'reconnected' : 'connected';\r\n\r\n                console.log('firing socket', evt);\r\n\r\n                sendSettings();\r\n\r\n                fireEvent(evt);\r\n            }\r\n\r\n            function ondata(type, data) {\r\n                fireEvent(type.toLowerCase(), data);\r\n            }\r\n\r\n            return {\r\n                connect: function (credentials, rooms) {\r\n                    return connect(credentials, rooms);\r\n                }\r\n            }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                entry.userName = JSON.parse(entry.userName);\r\n                return entry;\r\n            }\r\n        \r\n            function formatMeasurement(m) {\r\n                m.ts = new Date(m.name);\r\n                return m;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n                            \r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params).then(function (chartConfig) {\r\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\r\n                            \r\n                            return chartConfig;\r\n                        });\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n    function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}');\n\n            function update(setting) {\n                return request.put(params);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n    function seaAgentState(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/state');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                return state;\n            }\n\n            function hint(setting) {\n                return request.post(params);\n            }\n\n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n\n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\n    function seaAuth(SeaRequest) {\n            var request = new SeaRequest('auth/{action}');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            return {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n\n                actionlog: seaContainerMisc.actionlog,\n                inventory: seaContainerMisc.inventory,\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                pcvisit: seaContainerMisc.pcvisit,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                template: seaContainerTemplate\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n    function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                entry.userName = JSON.parse(entry.userName);\n                return entry;\n            }\n        \n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function connectPcvisit(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'pcvisit';\n                return request.get(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n                            \n                            return entries;\n                        });\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    }\n                },\n                pcvisit: {\n                    /**\n                     * install and connect to pcvisit\n                     * @param   {String} cId\n                     * @param   {Object}   params\n                     * @config  {String}   [supporterId]\n                     * @config  {String}   [supporterPassword]\n                     * @config  {String}   [user]\n                     * @config  {String}   [password]\n                     * @config  {String}   [domain]\n                     * @returns {Object} promise\n                     */\n                    connect: function (cId, params) {\n                        return connectPcvisit(cId, params);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    aId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return request.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n    function seaContainerState(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/state');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                return state;\n            }\n\n            function hint(setting) {\n                return request.post(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n\n            function create(cId) {\n                return request.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerSetting', 'seaCustomerDispatchTime', 'seaCustomerTag',\n    function seaCustomer(SeaRequest, seaCustomerSetting, seaCustomerDispatchTime, seaCustomerTag) {\n            var request = new SeaRequest('customer/{cId}');\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return request.put(customer);\n            }\n\n            return {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                setting: seaCustomerSetting,\n                dispatchTime: seaCustomerDispatchTime,\n                tag: seaCustomerTag\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return request.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return request.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(disptagatchTime);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\n            var request = new SeaRequest('me/{action}');\n\n            function _formatNode(node) {\n                if (node.date && typeof (node.date) === 'string') {\n                    node.date = new Date(node.date);\n                }\n\n                if (node.lastDate && typeof (node.lastDate) === 'string') {\n                    node.lastDate = new Date(node.lastDate);\n                }\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            return {\n                me: me,\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return request.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function destroy(nId) {\n                return request.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  includeGroups\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return get(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return request.put(user);\n            }\n\n            function destroy(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n\n                setting: seaUserSetting,\n                group: seaUserGroup,\n                substitude: seaUserSubstitude\n            };\n    }]);\n})();"],"sourceRoot":"/source/"}