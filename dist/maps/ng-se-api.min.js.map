{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/template.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/setting.js","src/customer/tag.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey","factory","SeaRequest","seaConfig","$q","$http","urlPath","prototype","formatUrl","url","params","keys","Object","i","length","regex","RegExp","test","replace","send","method","fullUrl","deferred","defer","conf","copy","data","then","resp","resolve","err","reject","promise","get","post","put","del","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","type","listActionlog","action","getChart","parentId","listCategories","list","formatNote","postedOn","Date","notes","forEach","nId","formatState","date","lastDate","hint","isArray","statesById","key","states","listSettings","akId","createApiKey","login","logout","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTemplate","cId","container","inventory","pcvisit","proposal","template","getInventory","connectPcvisit","connect","accept","pId","deny","settings","assign","tId","seaCustomerSetting","seaCustomerDispatchTime","seaCustomerTag","customer","dispatchTime","tag","dtId","disptagatchTime","seaGroupSetting","seaGroupUser","gId","group","user","addUser","uId","removeUser","add","remove","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","indexOf","splice","len","me","feed","name","nodes","mobilepush","handle","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","substitude"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var fullUrl = seaConfig.getUrl(urlPath || this.urlPath),\r\n                    deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = angular.copy(params);\r\n                conf.url = this.formatUrl(fullUrl, params);\r\n\r\n                if (method === 'POST' || method === 'PUT') {\r\n                    conf.data = params || {};\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params);\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params);\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\r\n    function seaAgentNitification(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\r\n    function seaAgentSetting(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/setting/{key}');\r\n\r\n            function update(setting) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [key]\r\n                 * @config {String} [value]\r\n                 */\r\n                update: function (setting) {\r\n                    return update(setting);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\r\n    function seaAgentState(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/state');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                return state;\r\n            }\r\n\r\n            function hint(setting) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n\r\n                if (angular.isArray(params.aId)) {\r\n                    return request.post(params, 'agent/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n\r\n                        return statesById;\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list agent states\r\n                 * @param   {String}   aId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (aId, params) {\r\n                    return list(aId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\r\n    function seaAgentType(SeaRequest) {\r\n            var request = new SeaRequest('agent/type');\r\n\r\n            function listSettings(akId) {\r\n                return request.get({\r\n                    akId: akId\r\n                }, 'agent/type/{akId}/setting');\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            return {\r\n                setting: {\r\n                    /**\r\n                     * list settings of an agent type\r\n                     * @param {Object} params\r\n                     * @config {String} [akId]\r\n                     */\r\n                    list: function (akId) {\r\n                        return listSettings(akId);\r\n                    }\r\n                },\r\n\r\n                list: list\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\r\n    function seaAuth(SeaRequest) {\r\n            var request = new SeaRequest('auth/{action}');\r\n\r\n            function createApiKey(params) {\r\n                params = params || {};\r\n                params.action = 'key';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function login(params) {\r\n                params = params || {};\r\n                params.action = 'login';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function logout(params) {\r\n                params = params || {};\r\n                params.action = 'logout';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create apiKey\r\n                 * @param {Object} params\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Number} [type]\r\n                 * @config {Number} [validUntil]\r\n                 * @config {Number} [maxUses]\r\n                 */\r\n                createApiKey: function (params) {\r\n                    return createApiKey(params);\r\n                },\r\n\r\n                /**\r\n                 * login\r\n                 * @param {Object} params\r\n                 * @config {String} [apiKey]\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Boolean} [createApiKey]\r\n                 * @config {String} [apiKeyName]\r\n                 */\r\n                login: function (params) {\r\n                    return login(params);\r\n                },\r\n\r\n                logout: function () {\r\n                    return logout();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\r\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\r\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTemplate',\r\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTemplate) {\r\n            var request = new SeaRequest('container/{cId}');\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(container) {\r\n                return request.put(container);\r\n            }\r\n\r\n            function destroy(cId) {\r\n                return request.del({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update container\r\n                 * @param {Object} container\r\n                 * @config {String} [cId]\r\n                 * @config {String} [name]\r\n                 * @config {Boolean} [alertOffline]\r\n                 * @config {Boolean} [alertShutdown]\r\n                 * @config {Number} [maxHeartbeatTimeout]\r\n                 */\r\n                update: function (container) {\r\n                    return update(container);\r\n                },\r\n\r\n                destroy: function (cId) {\r\n                    return destroy(cId);\r\n                },\r\n\r\n                actionlog: seaContainerMisc.actionlog,\r\n                inventory: seaContainerMisc.inventory,\r\n                note: seaContainerNote,\r\n                notification: seaContainerNotification,\r\n                pcvisit: seaContainerMisc.pcvisit,\r\n                proposal: seaContainerProposal,\r\n                state: seaContainerState,\r\n                template: seaContainerTemplate\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\r\n    function seaContainerMisc(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/{action}');\r\n\r\n            function listActionlog(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getInventory(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'inventory';\r\n                return request.get(params);\r\n            }\r\n\r\n            function connectPcvisit(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'pcvisit';\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} cId\r\n                     * @param   {Object} params\r\n                     * @config  {Number} [start]\r\n                     * @config  {Number} [limit]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (cId, params) {\r\n                        return listActionlog(cId, params);\r\n                    }\r\n                },\r\n\r\n                inventory: {\r\n                    /**\r\n                     * get inventory of the container\r\n                     * @param   {String}   cId\r\n                     * @param   {String}   params\r\n                     * @config {String} [format]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (cId, params) {\r\n                        return getInventory(cId, params);\r\n                    }\r\n                },\r\n                pcvisit: {\r\n                    /**\r\n                     * install and connect to pcvisit\r\n                     * @param   {String} cId\r\n                     * @param   {Object}   params\r\n                     * @config  {String}   [supporterId]\r\n                     * @config  {String}   [supporterPassword]\r\n                     * @config  {String}   [user]\r\n                     * @config  {String}   [password]\r\n                     * @config  {String}   [domain]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    connect: function (cId, params) {\r\n                        return connectPcvisit(cId, params);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\r\n    function seaContainerNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    aId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create note\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\r\n    function seaContainerNotification(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\r\n    function seaContainerProposal(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\r\n\r\n            function accept(cId, pId) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function deny(cId, pId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function listSettings(cId, pId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    pId: pId\r\n                }, 'container/{cId}/proposal/{pId}/setting');\r\n            }\r\n\r\n            return {\r\n                accept: function (cId, pId) {\r\n                    return accept(cId, pId);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                deny: function (cId, pId) {\r\n                    return deny(cId, pId);\r\n                },\r\n\r\n                settings: {\r\n                    list: function (cId, pId) {\r\n                        return listSettings(cId, pId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\r\n    function seaContainerState(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/state');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                return state;\r\n            }\r\n\r\n            function hint(setting) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n\r\n                if (angular.isArray(params.cId)) {\r\n                    return request.post(params, 'container/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create container state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list container states\r\n                 * @param   {String}   cId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (cId, params) {\r\n                    return list(cId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\r\n    function seaContainerTemplate(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/template/{tId}');\r\n\r\n            function create(cId) {\r\n                return request.post({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function assign(cId, tId) {\r\n                return request.post({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create template form system\r\n                 * @param {String} cId\r\n                 */\r\n                create: function (cId) {\r\n                    return create(cId);\r\n                },\r\n\r\n                /**\r\n                 * assign a template to a system\r\n                 * @param {String} cId\r\n                 * @param {String} tId\r\n                 */\r\n                assign: function (cId, tId) {\r\n                    return assign(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerSetting', 'seaCustomerDispatchTime', 'seaCustomerTag',\r\n    function seaCustomer(SeaRequest, seaCustomerSetting, seaCustomerDispatchTime, seaCustomerTag) {\r\n            var request = new SeaRequest('customer/{cId}');\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(customer) {\r\n                return request.put(customer);\r\n            }\r\n\r\n            return {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {Object} customer\r\n                 * @config {String} [cId]\r\n                 * @config {String} [country]\r\n                 * @config {Number} [customerNumberIntern]\r\n                 * @config {Number} [customerNumberExtern]\r\n                 * @config {String} [companyName]\r\n                 * @config {String} [street]\r\n                 * @config {String} [zipCode]\r\n                 * @config {String} [city]\r\n                 * @config {String} [email]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (customer) {\r\n                    return update(customer);\r\n                },\r\n\r\n                setting: seaCustomerSetting,\r\n                dispatchTime: seaCustomerDispatchTime,\r\n                tag: seaCustomerTag\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(dispatchTime) {\r\n                return request.put(dispatchTime);\r\n            }\r\n\r\n            function destroy(dtId) {\r\n                return request.del({\r\n                    dtId: dtId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [dtId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                update: function (dispatchTime) {\r\n                    return update(dispatchTime);\r\n                },\r\n\r\n                destroy: function (dtId) {\r\n                    return destroy(dtId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\r\n    function seaCustomerSetting(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/setting');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(cId, settings) {\r\n                settings = settings || {};\r\n                settings.cId = cId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {String} cId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (cId, settings) {\r\n                    return update(cId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(disptagatchTime);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\r\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\r\n            var request = new SeaRequest('group/{gId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(group) {\r\n                return request.put(group);\r\n            }\r\n\r\n            function destroy(gId) {\r\n                return request.del({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create group\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {Object} group\r\n                 * @config {String} [gId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (group) {\r\n                    return update(group);\r\n                },\r\n\r\n                destroy: function (gId) {\r\n                    return destroy(gId);\r\n                },\r\n\r\n                setting: seaGroupSetting,\r\n                user: seaGroupUser\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\r\n    function seaGroupSetting(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/setting');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(gId, settings) {\r\n                settings = settings || {};\r\n                settings.gId = gId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {String} gId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (gId, settings) {\r\n                    return update(gId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\r\n    function seaGroupUser(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/user/{uId}');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function addUser(gId, uId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(gId, uId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (gId, uId) {\r\n                    return addUser(gId, uId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (gId, uId) {\r\n                    return removeUser(gId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\r\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\r\n            var request = new SeaRequest('me/{action}');\r\n\r\n            function _formatNode(node) {\r\n                if (node.date && typeof (node.date) === 'string') {\r\n                    node.date = new Date(node.date);\r\n                }\r\n\r\n                if (node.lastDate && typeof (node.lastDate) === 'string') {\r\n                    node.lastDate = new Date(node.lastDate);\r\n                }\r\n\r\n                return node;\r\n            }\r\n\r\n            function _formatData(data) {\r\n                var idx = data.indexOf('loadfinish');\r\n                if (idx >= 0) {\r\n                    data.splice(idx, 1);\r\n                }\r\n\r\n                for (var i = 0, len = data.length; i < len; i++) {\r\n                    _formatNode(data[i]);\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            function me() {\r\n                return request.get();\r\n            }\r\n\r\n            function customer() {\r\n                return request.get({\r\n                    action: 'customer'\r\n                });\r\n            }\r\n\r\n            function feed(params) {\r\n                params = params || {};\r\n                params.action = 'feed';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            function key(name) {\r\n                return request.get({\r\n                    action: 'key',\r\n                    name: name\r\n                });\r\n            }\r\n\r\n            function nodes(params) {\r\n                params = params || {};\r\n                params.action = 'nodes';\r\n\r\n                return request.get(params).then(_formatData);\r\n            }\r\n\r\n            return {\r\n                me: me,\r\n                customer: customer,\r\n                feed: function (params) {\r\n                    return feed(params);\r\n                },\r\n                key: function (name) {\r\n                    return key(name);\r\n                },\r\n                nodes: function (params) {\r\n                    return nodes(params);\r\n                },\r\n\r\n                mobilepush: seaMeMobilepush,\r\n                notification: seaMeNotification\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\r\n    function seaMeMobilepush(SeaRequest) {\r\n            var request = new SeaRequest('me/mobilepush/{handle}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(handle) {\r\n                return request.get({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            function destroy(handle) {\r\n                return request.del({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: list,\r\n\r\n                /**\r\n                 * add mobilepush\r\n                 * @param   {Object} params\r\n                 * @config  {String} handle\r\n                 * @config  {String} type\r\n                 * @returns {Object} promise\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (handle) {\r\n                    return get(handle);\r\n                },\r\n\r\n                destroy: function (handle) {\r\n                    return destroy(handle);\r\n                }\r\n            };\r\n  }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\r\n    function seaMeNotification(SeaRequest) {\r\n            var request = new SeaRequest('me/notification/{nId}');\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function destroy(nId) {\r\n                return request.del({\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all notifications\r\n                 * @param   {Object} params\r\n                 * @config  {Boolean}  includeGroups\r\n                 * @returns {Object} promise\r\n                 */\r\n                list: function (params) {\r\n                    return list(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId || aId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return get(notification);\r\n                },\r\n\r\n                destroy: function (nId) {\r\n                    return destroy(nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\r\n    function seaUserGroup(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/group/{gId}');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function addUser(uId, gId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(uId, gId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (uId, gId) {\r\n                    return addUser(uId, gId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId, gId) {\r\n                    return removeUser(uId, gId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\r\n    function seaUserSetting(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/setting');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(uId, settings) {\r\n                settings = settings || {};\r\n                settings.uId = uId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {String} uId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (uId, settings) {\r\n                    return update(uId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\r\n    function seaUserSubstitude(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\r\n\r\n            function set(uId, substId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    substitudeId: substId\r\n                });\r\n            }\r\n\r\n            function remove(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * set a substitude\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                set: function (uId, substId) {\r\n                    return set(uId, substId);\r\n                },\r\n\r\n                /**\r\n                 * remove substitude\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId) {\r\n                    return remove(uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\r\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\r\n            var request = new SeaRequest('user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(user) {\r\n                return request.put(user);\r\n            }\r\n\r\n            function destroy(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function search(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create user\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {Object} user\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (user) {\r\n                    return update(user);\r\n                },\r\n\r\n                destroy: function (uId) {\r\n                    return destroy(uId);\r\n                },\r\n\r\n                /**\r\n                 * search users\r\n                 * @param   {Object}   params\r\n                 * @config  {String}   [query]\r\n                 * @config  {String}   [customerId]\r\n                 * @config  {Boolean}  [includeLocation]\r\n                 */\r\n                search: function (params) {\r\n                    return search(params);\r\n                },\r\n\r\n                setting: seaUserSetting,\r\n                group: seaUserGroup,\r\n                substitude: seaUserSubstitude\r\n            };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}