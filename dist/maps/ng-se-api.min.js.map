{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/customer/apiKey.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/externalCall.js","src/customer/manager.js","src/customer/setting.js","src/customer/tag.js","src/customer/template.js","src/customer/usage.js","src/customer/viewFilter.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/remoting/antivirus.js","src/remoting/iasHelper.js","src/remoting/network.js","src/remoting/patch.js","src/remoting/pcvisit.js","src/remoting/remoting.js","src/reporting/reporting.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js","src/remoting/patch/history.js","src/remoting/patch/install.js","src/remoting/patch/reboot.js","src/remoting/patch/scan.js","src/remoting/patch/software.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","patchUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setPatchUrl","setApiVersion","setApiKey","$get","$http","getBaseUrl","getPatchUrl","getApiVersion","getApiKey","seaApiConfigProvider","factory","SeaRequest","seaConfig","$q","urlPath","prototype","formatUrl","params","url","indexOf","keys","Object","i","length","regex","RegExp","test","replace","send","method","deferred","defer","conf","copy","data","Content-Type","then","resp","total","totalCount","resolve","err","reject","promise","get","post","put","del","VALID_EVENTS","$rootScope","fireEvent","name","argsObj","console","log","$broadcast","connect","credentials","rooms","io","error","connectUrl","reduce","p","key","sio","settings","on","onerror","onconnect","userId","roomId","forEach","evtName","ondata","sendSettings","emit","connected","hasEverBeenConnected","reconnected","evt","type","targetNode","date","Date","lastDate","toLowerCase","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentTag","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","restart","tag","formatActionlog","entry","changeDate","changed","JSON","parse","userName","e","email","sur","information","formatMeasurement","m","ts","listActionlog","action","getChart","parentId","listCategories","list","entries","chartConfig","measurements","formatNote","postedOn","notes","count","nId","remote","param","remoteRequest","formatState","silencedUntil","hints","formatHint","hint","until","hintRequest","stats","isArray","statesById","states","tId","format","agentKnown","updateDate","listSettings","akId","aks","map","createApiKey","login","logout","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTag","seaContainerTemplate","formatContainer","container","lastBootUpTime","cId","listAgents","api","proposal","template","extend","getInventory","inventory","getFileLink","stop","start","accept","pId","deny","assign","validUntil","createdOn","requestDistri","apiKeys","query","bucket","bId","listUser","userRequest","addUser","removeUser","uId","user","seaCustomerApiKey","seaCustomerBucket","seaCustomerDispatchTime","seaCustomerExternalCall","seaCustomerManager","seaCustomerSetting","seaCustomerTag","seaCustomerTemplate","seaCustomerUsage","seaCustomerViewFilter","customer","dispatchTime","externalCall","manager","usage","viewFilter","dtId","ecall","ecalls","add","remove","requestAgent","destroyAgent","u","year","month","vfId","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","splice","len","me","feed","nodes","mobilepush","handle","seaGroupSetting","seaGroupUser","gId","group","helper","EventList","job","activate","containerConfig","customerId","c","ContainerId","containerId","Token","token","section","ContainerList","containerIds","getContainerIds","getEvents","paging","listEvents","history","Index","index","Count","containers","checkEvents","eventIds","getEventIds","event","check","convertIds","getSoftwareIds","softwareIds","getJobIds","jobIds","ids","rootName","subName","id","o","idListResult","result","Msg","IdList","Id","Error","createdAt","createdAta","install","getInstallStatus","version","v","jobs","system","installStatus","seaRemotingPatchHistory","seaRemotingPatchInstall","seaRemotingPatchReboot","seaRemotingPatchScan","seaRemotingPatchSoftware","LastScanTime","cron","Cron","deactivate","reboot","scan","software","access","lastAccess","isInstalled","installAndStart","getConnectFileLink","seaRemotingPcvisit","seaRemotingNetwork","seaRemotingAntivirus","seaRemotingPatch","antivirus","pcvisit","network","patch","formatReport","report","prop","generated","generatedDate","reports","listTypes","reportRequest","rId","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","listCustomers","requestCustomer","substitude","JobList","categories","softwareId","postInstall","reqParams","CategoryList","PostAction","jobId","getSoftware","listSoftware","Action","requestSoftware","getByContainer","listByContainer","installed","Installed","blocked","Blocked","has","SoftwareIdList","block","isBlocked"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                patchUrl: 'https://patch.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n            \r\n            this.setPatchUrl = function (patchUrl) {\r\n                config.patchUrl = patchUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getPatchUrl: function () {\r\n                        return config.patchUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(params, url) {\r\n                url = url || this.urlPath;\r\n                \r\n                if(url.indexOf('https://') < 0) {\r\n                    url = seaConfig.getUrl(url || this.urlPath)\r\n                }\r\n                \r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}/ig, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = params || {};\r\n                params = angular.copy(params);\r\n                \r\n                conf.url = this.formatUrl(params, urlPath);\r\n\r\n                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\r\n                    conf.data = params || {};\r\n                    conf.headers = {\r\n                        'Content-Type': 'application/json'\r\n                    };\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    var total = resp.headers('x-total-count');\r\n                    \r\n                    if(total != null) {\r\n                        resp.data.totalCount = total;\r\n                    }\r\n                    \r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n            \r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    var VALID_EVENTS = ['USER_UPDATE', 'NODE_ADD', 'NODE_UPDATE', 'NODE_REMOVE', 'REMOTE_RESULT'];\r\n\r\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\r\n    function ($rootScope, seaConfig) {\r\n            var connected = false,\r\n                reconnected = false,\r\n                hasEverBeenConnected = false,\r\n                sio;\r\n\r\n            var settings = {};\r\n\r\n            function fireEvent(name, argsObj) {\r\n                argsObj = argsObj || {};\r\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\r\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\r\n            }\r\n\r\n            function connect(credentials, rooms) {\r\n                if (typeof io == 'undefined') {\r\n                    console.error('required socket.io lib not found');\r\n                    return;\r\n                }\r\n\r\n                var connectUrl = seaConfig.getBaseUrl();\r\n                \r\n                if(credentials) {\r\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\r\n                        p += [ key, credentials[key] ].join('=');\r\n                        return p;\r\n                    }, '?');\r\n                }\r\n                \r\n                sio = io(connectUrl);\r\n\r\n                settings.rooms = rooms;\r\n\r\n                sio.on('error', onerror);\r\n                sio.on('connect', onconnect);\r\n                sio.on('connecting', function () {\r\n                    console.log('connecting socket');\r\n                });\r\n                sio.on('disconnect', function () {\r\n                    console.log('disconnected socket');\r\n                    onerror('socket.disconnected');\r\n                });\r\n                sio.on('connect_error', function () {\r\n                    console.log('connect socket failed');\r\n                    onerror('socket.connect_failed');\r\n                });\r\n                sio.on('reconnect_error', function () {\r\n                    console.log('reconnect socket failed');\r\n                    onerror('socket.reconnect_failed');\r\n                });\r\n                sio.on('reconnecting', function () {\r\n                    console.log('reconnecting socket');\r\n                });\r\n\r\n                sio.on('socket:joined', function (userId, roomId) {\r\n                    console.log(userId, 'joined', roomId);\r\n                });\r\n\r\n                // server-eye events\r\n                VALID_EVENTS.forEach(function (evtName) {\r\n                    sio.on(evtName, function (data) {\r\n                        ondata(evtName, data);\r\n                    });\r\n                });\r\n            }\r\n\r\n            function sendSettings() {\r\n                sio.emit('settings', settings);\r\n            }\r\n\r\n            function onerror(err) {\r\n                console.log('socket error:', err);\r\n                connected = false;\r\n                fireEvent('error', err);\r\n            }\r\n\r\n            function onconnect() {\r\n                console.log('connected socket');\r\n                connected = true;\r\n\r\n                if (hasEverBeenConnected) {\r\n                    reconnected = true;\r\n                }\r\n\r\n                hasEverBeenConnected = true;\r\n\r\n                var evt = reconnected ? 'reconnected' : 'connected';\r\n\r\n                console.log('firing socket', evt);\r\n\r\n                sendSettings();\r\n\r\n                fireEvent(evt);\r\n            }\r\n\r\n            function ondata(type, data) {\r\n                if(data && data.targetNode) {\r\n                    if(data.targetNode.date) {\r\n                        data.targetNode.date = new Date(data.targetNode.date);\r\n                    }\r\n                    \r\n                    if(data.targetNode.lastDate) {\r\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\r\n                    }\r\n                }\r\n                \r\n                fireEvent(type.toLowerCase(), data);\r\n            }\r\n\r\n            return {\r\n                connect: function (credentials, rooms) {\r\n                    return connect(credentials, rooms);\r\n                }\r\n            }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n                \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                restart: seaAgentMisc.restart,\r\n                tag: seaAgentTag,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n        function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                try {\r\n                    entry.userName = JSON.parse(entry.userName);\r\n                } catch (e) {\r\n                    entry.userName = {\r\n                        email: entry.userName,\r\n                        sur: entry.userName\r\n                    };\r\n                }\r\n\r\n                if (entry.information) {\r\n                    try {\r\n                        entry.information = JSON.parse(entry.information);\r\n                    } catch (e) {\r\n                        entry.information = null;\r\n                    }\r\n                }\r\n\r\n                return entry;\r\n            }\r\n\r\n            function formatMeasurement(m) {\r\n                m.ts = new Date(m.name);\r\n                return m;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function restart(aId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.action = 'restart';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n\r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params).then(function (chartConfig) {\r\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\r\n\r\n                            return chartConfig;\r\n                        });\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                },\r\n\r\n                /**\r\n                 * restart an agent\r\n                 * @param   {String} aId\r\n                 * @returns {Object} promise\r\n                 */\r\n                restart: function (aId) {\r\n                    return restart(aId);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n        \r\n            function count(aId) {\r\n                return request.get({\r\n                    aId: aId,\r\n                    nId: 'count'\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n                \r\n                count: function (aId) {\r\n                    return count(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\r\n    function seaAgentNitification(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\r\n    function seaAgentSetting(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\r\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\r\n        \r\n            function update(setting) {\r\n                return request.put(setting);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n        \r\n            function remote(param) {\r\n                return remoteRequest.get(param);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [key]\r\n                 * @config {String} [value]\r\n                 */\r\n                update: function (setting) {\r\n                    return update(setting);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n                \r\n                /**\r\n                 * load settings from remote\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [key]\r\n                 * @config {String} [information]\r\n                 */\r\n                remote: function (param) {\r\n                    return remote(param);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\r\n    function seaAgentState(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/state/{method}'),\r\n                hintRequest = new SeaRequest('agent/{aId}/state/{sId}/hint');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                \r\n                if(state.silencedUntil) {\r\n                    state.silencedUntil = new Date(state.silencedUntil);\r\n                }\r\n                \r\n                if(state.hints) {\r\n                    angular.forEach(state.hints, formatHint);\r\n                }\r\n                \r\n                return state;\r\n            }\r\n        \r\n            function formatHint(hint) {\r\n                hint.date = new Date(hint.date);\r\n                \r\n                if(hint.until) {\r\n                    hint.until = new Date(hint.until);\r\n                }\r\n                \r\n                return hint;\r\n            }\r\n\r\n            function hint(params) {\r\n                return hintRequest.post(params).then(formatHint);\r\n            }\r\n\r\n            function stats(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.method = 'stats';\r\n                \r\n                return request.get(params);\r\n            }\r\n        \r\n            function list(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n\r\n                if (angular.isArray(params.aId)) {\r\n                    return request.post(params, 'agent/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n\r\n                        return statesById;\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list agent states\r\n                 * @param   {String}   aId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (aId, params) {\r\n                    return list(aId, params);\r\n                },\r\n                \r\n                /**\r\n                 * list agent state stats\r\n                 * @param   {String}   aId\r\n                 * @param {Object}\r\n                 * @config {Number} [start] : now\r\n                 * @config {Number} [end]   : now - 12 months\r\n                 */\r\n                stats: function (aId, params) {\r\n                    return stats(aId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, tId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to agent\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, tId) {\r\n                    return destroy(aId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\r\n    function seaAgentType(SeaRequest) {\r\n            var request = new SeaRequest('agent/type');\r\n\r\n            function format(agentKnown) {\r\n                if(agentKnown.updateDate) {\r\n                    agentKnown.updateDate = new Date(agentKnown.updateDate);\r\n                }\r\n                \r\n                return agentKnown;\r\n            }\r\n        \r\n            function listSettings(akId) {\r\n                return request.get({\r\n                    akId: akId\r\n                }, 'agent/type/{akId}/setting');\r\n            }\r\n\r\n            function list(params) {\r\n                return request.get(params).then(function (aks) { return aks.map(format); });\r\n            }\r\n\r\n            return {\r\n                setting: {\r\n                    /**\r\n                     * list settings of an agent type\r\n                     * @param {Object} params\r\n                     * @config {String} [akId]\r\n                     */\r\n                    list: function (akId) {\r\n                        return listSettings(akId);\r\n                    }\r\n                },\r\n\r\n                list: list\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\r\n    function seaAuth(SeaRequest) {\r\n            var request = new SeaRequest('auth/{action}');\r\n\r\n            function createApiKey(params) {\r\n                params = params || {};\r\n                params.action = 'key';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function login(params) {\r\n                params = params || {};\r\n                params.action = 'login';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function logout(params) {\r\n                params = params || {};\r\n                params.action = 'logout';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create apiKey\r\n                 * @param {Object} params\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Number} [type]\r\n                 * @config {Number} [validUntil]\r\n                 * @config {Number} [maxUses]\r\n                 */\r\n                createApiKey: function (params) {\r\n                    return createApiKey(params);\r\n                },\r\n\r\n                /**\r\n                 * login\r\n                 * @param {Object} params\r\n                 * @config {String} [apiKey]\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Boolean} [createApiKey]\r\n                 * @config {String} [apiKeyName]\r\n                 */\r\n                login: function (params) {\r\n                    return login(params);\r\n                },\r\n\r\n                logout: function () {\r\n                    return logout();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\r\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\r\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\r\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\r\n            var request = new SeaRequest('container/{cId}/{action}');\r\n\r\n            function formatContainer(container) {\r\n                if (container.lastBootUpTime) {\r\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\r\n                }\r\n                return container;\r\n            }\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(formatContainer);\r\n            }\r\n        \r\n            function listAgents(cId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    action: 'agents'\r\n                });\r\n            }\r\n\r\n            function update(container) {\r\n                return request.put(container);\r\n            }\r\n\r\n            function destroy(cId) {\r\n                return request.del({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            var api = {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update container\r\n                 * @param {Object} container\r\n                 * @config {String} [cId]\r\n                 * @config {String} [name]\r\n                 * @config {Boolean} [alertOffline]\r\n                 * @config {Boolean} [alertShutdown]\r\n                 * @config {Number} [maxHeartbeatTimeout]\r\n                 */\r\n                update: function (container) {\r\n                    return update(container);\r\n                },\r\n\r\n                destroy: function (cId) {\r\n                    return destroy(cId);\r\n                },\r\n                \r\n                agent: {\r\n                    list: function (cId) {\r\n                        return listAgents(cId);\r\n                    }\r\n                },\r\n\r\n                note: seaContainerNote,\r\n                notification: seaContainerNotification,\r\n                proposal: seaContainerProposal,\r\n                state: seaContainerState,\r\n                tag: seaContainerTag,\r\n                template: seaContainerTemplate\r\n            };\r\n                \r\n            angular.extend(api, seaContainerMisc);\r\n        \r\n            return api;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\r\n        function seaContainerMisc(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                try {\r\n                    entry.userName = JSON.parse(entry.userName);\r\n                } catch (e) {\r\n                    entry.userName = {\r\n                        email: entry.userName,\r\n                        sur: entry.userName\r\n                    };\r\n                }\r\n\r\n                if (entry.information) {\r\n                    try {\r\n                        entry.information = JSON.parse(entry.information);\r\n                    } catch (e) {\r\n                        entry.information = null;\r\n                    }\r\n                }\r\n\r\n                return entry;\r\n            }\r\n\r\n            function listActionlog(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getInventory(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'inventory';\r\n                return request.get(params);\r\n            }\r\n\r\n            function action(cId, action, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = action;\r\n                return request.post(params);\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} cId\r\n                     * @param   {Object} params\r\n                     * @config  {Number} [start]\r\n                     * @config  {Number} [limit]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (cId, params) {\r\n                        return listActionlog(cId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n\r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n\r\n                inventory: {\r\n                    /**\r\n                     * get inventory of the container\r\n                     * @param   {String}   cId\r\n                     * @param   {String}   params\r\n                     * @config {String} [format]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (cId, params) {\r\n                        return getInventory(cId, params);\r\n                    },\r\n\r\n                    getFileLink: function (cId, params) {\r\n                        params = params || {};\r\n                        params.cId = cId;\r\n                        params.action = 'inventory';\r\n\r\n                        return request.formatUrl(params);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * restart a container\r\n                 * @param   {String} cId\r\n                 * @returns {Object} promise\r\n                 */\r\n                restart: function (cId) {\r\n                    return action(cId, 'restart');\r\n                },\r\n\r\n                /**\r\n                 * stop a container\r\n                 * @param   {String} cId\r\n                 * @param   {Int}    until timestamp\r\n                 * @returns {Object} promise\r\n                 */\r\n                stop: function (cId, until) {\r\n                    return action(cId, 'stop', {\r\n                        until: until\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * start a container\r\n                 * @param   {String} cId\r\n                 * @returns {Object} promise\r\n                 */\r\n                start: function (cId) {\r\n                    return action(cId, 'start');\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\r\n    function seaContainerNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function count(cId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    nId: 'count'\r\n                });\r\n            }\r\n        \r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create note\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n                \r\n                count: function (cId) {\r\n                    return count(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\r\n    function seaContainerNotification(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\r\n    function seaContainerProposal(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\r\n\r\n            function accept(cId, pId) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function deny(cId, pId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function listSettings(cId, pId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    pId: pId\r\n                }, 'container/{cId}/proposal/{pId}/setting');\r\n            }\r\n\r\n            return {\r\n                accept: function (cId, pId) {\r\n                    return accept(cId, pId);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                deny: function (cId, pId) {\r\n                    return deny(cId, pId);\r\n                },\r\n\r\n                settings: {\r\n                    list: function (cId, pId) {\r\n                        return listSettings(cId, pId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\r\n    function seaContainerState(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/state/{method}'),\r\n                hintRequest = new SeaRequest('container/{cId}/state/{sId}/hint');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                \r\n                if(state.silencedUntil) {\r\n                    state.silencedUntil = new Date(state.silencedUntil);\r\n                }\r\n                \r\n                if(state.hints) {\r\n                    angular.forEach(state.hints, formatHint);\r\n                }\r\n                \r\n                return state;\r\n            }\r\n        \r\n            function formatHint(hint) {\r\n                hint.date = new Date(hint.date);\r\n                \r\n                if(hint.until) {\r\n                    hint.until = new Date(hint.until);\r\n                }\r\n                \r\n                return hint;\r\n            }\r\n\r\n            function hint(params) {\r\n                return hintRequest.post(params).then(formatHint);\r\n            }\r\n        \r\n            function stats(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.method = 'stats';\r\n                \r\n                return request.get(params);\r\n            }\r\n\r\n            function list(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n\r\n                if (angular.isArray(params.cId)) {\r\n                    return request.post(params, 'container/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create container state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list container states\r\n                 * @param   {String}   cId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (cId, params) {\r\n                    return list(cId, params);\r\n                },\r\n                \r\n                /**\r\n                 * list container state stats\r\n                 * @param   {String}   cId\r\n                 * @param {Object}\r\n                 * @config {Number} [start] : now\r\n                 * @config {Number} [end]   : now - 12 months\r\n                 */\r\n                stats: function (cId, params) {\r\n                    return stats(cId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, tId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to container\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, tId) {\r\n                    return destroy(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\r\n    function seaContainerTemplate(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/template/{tId}');\r\n\r\n            function create(cId) {\r\n                return request.post({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function assign(cId, tId) {\r\n                return request.post({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create template form system\r\n                 * @param {String} cId\r\n                 */\r\n                create: function (cId) {\r\n                    return create(cId);\r\n                },\r\n\r\n                /**\r\n                 * assign a template to a system\r\n                 * @param {String} cId\r\n                 * @param {String} tId\r\n                 */\r\n                assign: function (cId, tId) {\r\n                    return assign(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerApiKey', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/apiKey/{apiKey}'),\r\n                requestDistri = new SeaRequest('customer/apiKey/{apiKey}');\r\n\r\n            function format(apiKey) {\r\n                if(apiKey.validUntil) {\r\n                    apiKey.validUntil = new Date(apiKey.validUntil);\r\n                }\r\n                \r\n                if(apiKey.createdOn) {\r\n                    apiKey.createdOn = new Date(apiKey.createdOn);\r\n                }\r\n                \r\n                return apiKey;\r\n            }\r\n        \r\n            function list(cId) {\r\n                var p;\r\n                \r\n                if(!cId) {\r\n                    p = requestDistri.get();\r\n                } else {\r\n                    p = request.get({\r\n                        cId: cId\r\n                    });\r\n                }\r\n                \r\n                return p.then(function (apiKeys) {\r\n                    angular.forEach(apiKeys, format);\r\n                    \r\n                    return apiKeys;\r\n                });\r\n            }\r\n        \r\n            function get(cId, query) {\r\n                query = query || {};\r\n                query.cId = cId;\r\n                \r\n                return request.get(query).then(format);\r\n            }\r\n\r\n            function destroy(cId, apiKey) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    apiKey: apiKey\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all api keys of a customer or all your customers\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n                \r\n                get: function (cId, query) {\r\n                    return get(cId, query);\r\n                },\r\n\r\n                destroy: function (cId, apiKey) {\r\n                    return destroy(cId, apiKey);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/bucket/{bId}'),\r\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(bucket) {\r\n                return request.put(bucket);\r\n            }\r\n\r\n            function destroy(bId) {\r\n                return request.del({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function listUser(bId) {\r\n                return userRequest.get({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function addUser(params) {\r\n                return userRequest.put(params);\r\n            }\r\n\r\n            function removeUser(bId, uId) {\r\n                return userRequest.del({\r\n                    bId: bId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [bId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (bucket) {\r\n                    return update(bucket);\r\n                },\r\n\r\n                destroy: function (bId) {\r\n                    return destroy(bId);\r\n                },\r\n\r\n                user: {\r\n                    list: function (bId) {\r\n                        return listUser(bId);\r\n                    },\r\n\r\n                    /**\r\n                     * add user to bucket\r\n                     * @param {Object} params\r\n                     * @config {String} [bId]\r\n                     * @config {String} [uId]\r\n                     */\r\n                    create: function (params) {\r\n                        return addUser(params);\r\n                    },\r\n\r\n                    /**\r\n                     * remove user from bucket\r\n                     * @param {String} [bId]\r\n                     * @param {String} [uId]\r\n                     */\r\n                    destroy: function (bId, uId) {\r\n                        return removeUser(bId, uId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerApiKey', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerExternalCall', 'seaCustomerManager', 'seaCustomerSetting', 'seaCustomerTag', 'seaCustomerTemplate', 'seaCustomerUsage', 'seaCustomerViewFilter',\r\n    function seaCustomer(SeaRequest, seaCustomerApiKey, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerExternalCall, seaCustomerManager, seaCustomerSetting, seaCustomerTag, seaCustomerTemplate, seaCustomerUsage, seaCustomerViewFilter) {\r\n            var request = new SeaRequest('customer/{cId}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n        \r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(customer) {\r\n                return request.put(customer);\r\n            }\r\n\r\n            return {\r\n                list: function () {\r\n                    return list();\r\n                },\r\n                \r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {Object} customer\r\n                 * @config {String} [cId]\r\n                 * @config {String} [country]\r\n                 * @config {Number} [customerNumberIntern]\r\n                 * @config {Number} [customerNumberExtern]\r\n                 * @config {String} [companyName]\r\n                 * @config {String} [street]\r\n                 * @config {String} [zipCode]\r\n                 * @config {String} [city]\r\n                 * @config {String} [email]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (customer) {\r\n                    return update(customer);\r\n                },\r\n\r\n                apiKey: seaCustomerApiKey,\r\n                bucket: seaCustomerBucket,\r\n                dispatchTime: seaCustomerDispatchTime,\r\n                externalCall: seaCustomerExternalCall,\r\n                manager: seaCustomerManager,\r\n                setting: seaCustomerSetting,\r\n                tag: seaCustomerTag,\r\n                template: seaCustomerTemplate,\r\n                usage: seaCustomerUsage,\r\n                viewFilter: seaCustomerViewFilter\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(dispatchTime) {\r\n                return request.put(dispatchTime);\r\n            }\r\n\r\n            function destroy(dtId) {\r\n                return request.del({\r\n                    dtId: dtId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [dtId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                update: function (dispatchTime) {\r\n                    return update(dispatchTime);\r\n                },\r\n\r\n                destroy: function (dtId) {\r\n                    return destroy(dtId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerExternalCall', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var requestDistri = new SeaRequest('customer/externalCall');\r\n\r\n            function format(ecall) {\r\n                if(ecall.lastDate) {\r\n                    ecall.lastDate = new Date(ecall.lastDate);\r\n                }\r\n                \r\n                return ecall;\r\n            }\r\n        \r\n            function list() {\r\n                return requestDistri.get().then(function (ecalls) {\r\n                    angular.forEach(ecalls, format);\r\n                    \r\n                    return ecalls;\r\n                });\r\n            }\r\n        \r\n            return {\r\n                /**\r\n                 * list all external url calls of your customers\r\n                 */\r\n                list: function () {\r\n                    return list();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerManager', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/manager/{uId}');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function addUser(cId, email) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    uId: email\r\n                });\r\n            }\r\n\r\n            function removeUser(cId, uId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * add user as manager\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [email] email address of the user\r\n                 */\r\n                add: function (cId, email) {\r\n                    return addUser(cId, email);\r\n                },\r\n\r\n                remove: function (cId, uId) {\r\n                    return removeUser(cId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\r\n    function seaCustomerSetting(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/setting');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(cId, settings) {\r\n                settings = settings || {};\r\n                settings.cId = cId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {String} cId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (cId, settings) {\r\n                    return update(cId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(tag);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTemplate', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/template/{tId}'),\r\n                requestAgent = new SeaRequest('customer/template/{tId}/agent/{aId}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n        \r\n            function listAgents(tId) {\r\n                return requestAgent.get({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n        \r\n            function destroyAgent(tId, aId) {\r\n                return request.del({\r\n                    tId: tId,\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                },\r\n                \r\n                agent: {\r\n                    list: function(tId) {\r\n                        return listAgents(tId);\r\n                    },\r\n                    destroy: function(tId, aId) {\r\n                        return destroyAgent(tId, aId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerUsage', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/usage'),\r\n                requestDistri = new SeaRequest('customer/usage');\r\n\r\n            function format(u) {\r\n                if (u.date) {\r\n                    u.date = new Date(u.date);\r\n                }\r\n\r\n                return u;\r\n            }\r\n\r\n            function list(year, month, cId) {\r\n                var params = {\r\n                    year: year,\r\n                    month: month\r\n                };\r\n\r\n                if (cId) {\r\n                    params.cId = cId;\r\n\r\n                }\r\n\r\n                return requestDistri.get(params).then(function (usage) {\r\n                    angular.forEach(usage, format);\r\n\r\n                    return usage;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list the max usage of all customers or the usage graph of a specific customer\r\n                 * @param   {Date} year of the required usage\r\n                 * @param   {Date} month of the required usage\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (year, month, cId) {\r\n                    return list(year, month, cId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerViewFilter', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/viewFilter/{vfId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(viewFilter) {\r\n                return request.put(viewFilter);\r\n            }\r\n\r\n            function destroy(vfId) {\r\n                return request.del({\r\n                    vfId: vfId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [vfId]\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                update: function (viewFilter) {\r\n                    return update(viewFilter);\r\n                },\r\n\r\n                destroy: function (vfId) {\r\n                    return destroy(vfId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\r\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\r\n            var request = new SeaRequest('me/{action}');\r\n\r\n            function _formatNode(node) {\r\n                ['date', 'lastDate', 'silencedUntil'].forEach(function (key) {\r\n                    if (node[key] && typeof (node[key]) === 'string') {\r\n                        node[key] = new Date(node[key]);\r\n                    }\r\n                });\r\n\r\n                return node;\r\n            }\r\n\r\n            function _formatData(data) {\r\n                var idx = data.indexOf('loadfinish');\r\n                if (idx >= 0) {\r\n                    data.splice(idx, 1);\r\n                }\r\n\r\n                for (var i = 0, len = data.length; i < len; i++) {\r\n                    _formatNode(data[i]);\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            function me() {\r\n                return request.get();\r\n            }\r\n\r\n            function customer() {\r\n                return request.get({\r\n                    action: 'customer'\r\n                });\r\n            }\r\n\r\n            function feed(params) {\r\n                params = params || {};\r\n                params.action = 'feed';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            function key(name) {\r\n                return request.get({\r\n                    action: 'key',\r\n                    name: name\r\n                });\r\n            }\r\n\r\n            function nodes(params) {\r\n                params = params || {};\r\n                params.action = 'nodes';\r\n\r\n                return request.get(params).then(_formatData);\r\n            }\r\n\r\n            return {\r\n                me: me,\r\n                customer: customer,\r\n                feed: function (params) {\r\n                    return feed(params);\r\n                },\r\n                key: function (name) {\r\n                    return key(name);\r\n                },\r\n                nodes: function (params) {\r\n                    return nodes(params);\r\n                },\r\n\r\n                mobilepush: seaMeMobilepush,\r\n                notification: seaMeNotification\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\r\n    function seaMeMobilepush(SeaRequest) {\r\n            var request = new SeaRequest('me/mobilepush/{handle}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(handle) {\r\n                return request.get({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            function destroy(handle) {\r\n                return request.del({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: list,\r\n\r\n                /**\r\n                 * add mobilepush\r\n                 * @param   {Object} params\r\n                 * @config  {String} handle\r\n                 * @config  {String} type\r\n                 * @returns {Object} promise\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (handle) {\r\n                    return get(handle);\r\n                },\r\n\r\n                destroy: function (handle) {\r\n                    return destroy(handle);\r\n                }\r\n            };\r\n  }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\r\n    function seaMeNotification(SeaRequest) {\r\n            var request = new SeaRequest('me/notification/{nId}');\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function destroy(nId) {\r\n                return request.del({\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all notifications\r\n                 * @param   {Object} params\r\n                 * @config  {Boolean}  type\r\n                 * @returns {Object} promise\r\n                 */\r\n                list: function (params) {\r\n                    return list(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId || aId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return get(notification);\r\n                },\r\n\r\n                destroy: function (nId) {\r\n                    return destroy(nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\r\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\r\n            var request = new SeaRequest('group/{gId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(group) {\r\n                return request.put(group);\r\n            }\r\n\r\n            function destroy(gId) {\r\n                return request.del({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create group\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {Object} group\r\n                 * @config {String} [gId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (group) {\r\n                    return update(group);\r\n                },\r\n\r\n                destroy: function (gId) {\r\n                    return destroy(gId);\r\n                },\r\n\r\n                setting: seaGroupSetting,\r\n                user: seaGroupUser\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\r\n    function seaGroupSetting(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/setting');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(gId, settings) {\r\n                settings = settings || {};\r\n                settings.gId = gId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {String} gId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (gId, settings) {\r\n                    return update(gId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\r\n    function seaGroupUser(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/user/{uId}');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function addUser(gId, uId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(gId, uId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (gId, uId) {\r\n                    return addUser(gId, uId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (gId, uId) {\r\n                    return removeUser(gId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingAntivirus', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/virus/1.0/{section}/{action}'));\r\n\r\n            function format(container) {\r\n                if (!container.EventList) {\r\n                    return container;\r\n                }\r\n\r\n                container.EventList.forEach(function (job) {\r\n                    ['Timestamp'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig;\r\n\r\n                if (!angular.isArray(containerConfig)) {\r\n                    containerConfig = [containerConfig];\r\n                }\r\n\r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n\r\n                return request.post({\r\n                    section: 'container',\r\n                    ContainerList: containerConfig\r\n                });\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'container';\r\n                query.action = 'get';\r\n                \r\n                return request.post(query);\r\n            }\r\n        \r\n            function getEvents(customerId, cId, paging) {\r\n                return listEvents(customerId, [cId], paging).then(function (history) {\r\n                    return (history[0] || {}).EventList;\r\n                });\r\n            }\r\n\r\n            function listEvents(customerId, containerIds, paging) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'event';\r\n                query.action = 'get';\r\n\r\n                if (paging) {\r\n                    query.Index = paging.index;\r\n                    query.Count = paging.count;\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function checkEvents(customerId, containerIds, eventIds) {\r\n                var query = helper.getEventIds(eventIds);\r\n                query.section = 'event';\r\n                query.action = 'check';\r\n                \r\n                return request.post(query);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n\r\n                /**\r\n                 * activate antivirus on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n\r\n                event: {\r\n                    get: function (customerId, cId, paging) {\r\n                        return getEvents(customerId, cId, paging);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, paging) {\r\n                        return getEvents(customerId, containerIds, paging);\r\n                    },\r\n                    \r\n                    check: function (customerId, containerIds, eventIds) {\r\n                        return checkEvents(customerId, containerIds, eventIds);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingIasHelper', [ '$q', 'seaConfig',\r\n    function seaRemotingPcvisit($q, seaConfig) {\r\n            function getContainerIds(containerIds) {\r\n                return convertIds(containerIds, 'ContainerIdList', 'ContainerId');\r\n            }\r\n\r\n            function getSoftwareIds(softwareIds) {\r\n                return convertIds(softwareIds, 'SoftwareIdList', 'SoftwareId');\r\n            }\r\n\r\n            function getJobIds(jobIds) {                \r\n                return convertIds(jobIds, 'JobIdList', 'JobId');\r\n            }\r\n        \r\n            function getEventIds(eventIds) {\r\n                return convertIds(eventIds, 'EventIdList', 'EventId');\r\n            }\r\n        \r\n            function convertIds(ids, rootName, subName) {\r\n                if (!angular.isArray(ids)) {\r\n                    ids = [ids];\r\n                }\r\n\r\n                var query = ids.map(function (id) {\r\n                    var o = {};\r\n                    o[subName] = id;\r\n                    return o;\r\n                });\r\n\r\n                var o = {};\r\n                o[rootName] = query;\r\n                \r\n                return o;\r\n            }\r\n\r\n            function idListResult(result) {\r\n                if (result.Msg == 'success') {\r\n                    return $q.resolve(result.IdList.map(function (entry) {\r\n                        return entry.Id;\r\n                    }));\r\n                }\r\n\r\n                return $q.reject(new Error(result.Msg));\r\n            }\r\n        \r\n            function getUrl(path) {\r\n                return [seaConfig.getPatchUrl(), path].join('/');\r\n            }\r\n\r\n            return {\r\n                getContainerIds: getContainerIds,\r\n                getSoftwareIds: getSoftwareIds,\r\n                getJobIds: getJobIds,\r\n                getEventIds: getEventIds,\r\n                idListResult: idListResult,\r\n                getUrl: getUrl\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingNetwork', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('network/{customerId}/{cId}/system/{action}');\r\n\r\n            function format(job) {\r\n                if (job && job.createdAt) {\r\n                    job.createdAta = new Date(job.createdAt);\r\n                }\r\n\r\n                return job;\r\n            }\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function install(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function getInstallStatus(params) {\r\n                params = params || {};\r\n                \r\n                var customerId = params.customerId,\r\n                    cId = params.cId,\r\n                    version = params.version,\r\n                    jobIds = params.jobIds;\r\n                \r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'installstatus',\r\n                    v: version,\r\n                    jobIds: jobIds\r\n                }).then(function (jobs) {\r\n                   jobs.forEach(format);\r\n                    return jobs;\r\n                });\r\n            }\r\n\r\n            return {\r\n                system: {\r\n                    /**\r\n                     * list active directory of OCC Connector\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     */\r\n                    list: function (params) {\r\n                        return list(params);\r\n                    },\r\n\r\n                    /**\r\n                     * install Server-Eye on remote system\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     * @config {String} [host] Name of the host Server-Eye will be installed on\r\n                     */\r\n                    install: function (params) {\r\n                        return install(params);\r\n                    },\r\n\r\n                    /**\r\n                     * get the install status of install jobs\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {Array}  [jobIds]\r\n                     * @config {Integer} [version] remote install version\r\n                     */\r\n                    installStatus: function (params) {\r\n                        return getInstallStatus(params);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatch', ['$http', 'SeaRequest', 'seaRemotingIasHelper', 'seaRemotingPatchHistory', 'seaRemotingPatchInstall', 'seaRemotingPatchReboot', 'seaRemotingPatchScan', 'seaRemotingPatchSoftware',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper, seaRemotingPatchHistory, seaRemotingPatchInstall, seaRemotingPatchReboot, seaRemotingPatchScan, seaRemotingPatchSoftware) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/{section}/{action}'));\r\n        \r\n            function format(container) {\r\n                if(container.LastScanTime) {\r\n                    container.LastScanTime = new Date(container.LastScanTime);\r\n                }\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n                \r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig,\r\n                    cron = params.cron;\r\n                \r\n                if(!angular.isArray(containerConfig)) {\r\n                    containerConfig = [ containerConfig ];\r\n                }\r\n                \r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n                \r\n                return request.post({\r\n                    ContainerList: containerConfig,\r\n                    Cron: cron\r\n                });\r\n            }\r\n        \r\n            function destroy(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                \r\n                return request.del(query)\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * activate patchmanagement on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 * @config {String} [cron]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n                deactivate: function (customerId, containerIds) {\r\n                    return destroy(customerId, containerIds);\r\n                },\r\n                \r\n                history: seaRemotingPatchHistory,\r\n                install: seaRemotingPatchInstall,\r\n                reboot: seaRemotingPatchReboot,\r\n                scan: seaRemotingPatchScan,\r\n                software: seaRemotingPatchSoftware\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPcvisit', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('pcvisit/{customerId}/{cId}/{action}');\r\n\r\n            function format(access) {\r\n                if(access && access.date) {\r\n                    access.data = new Date(access.date);\r\n                }\r\n                \r\n                return access;\r\n            }\r\n        \r\n            function get(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId\r\n                }).then(function (system) {\r\n                    format(system.lastAccess);\r\n                    return system;\r\n                });\r\n            }\r\n        \r\n            function start(params) {\r\n                params = params || {};\r\n                params.action = 'start';\r\n                \r\n                return request.post(params);\r\n            }\r\n\r\n            function isInstalled(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'check'\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function(customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n                \r\n                /**\r\n                 * install pcvisit on remote system\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [supporterId]\r\n                 * @config {String} [supporterPassword]\r\n                 * @config {String} [user]\r\n                 * @config {String} [domain]\r\n                 * @config {String} [password]\r\n                 */\r\n                installAndStart: function (params) {\r\n                    return start(params);\r\n                },\r\n                \r\n                isInstalled: function (customerId, cId) {\r\n                    return isInstalled(customerId, cId);\r\n                },\r\n                \r\n                getConnectFileLink: function (customerId, cId) {\r\n                    return request.formatUrl({\r\n                        customerId: customerId,\r\n                        cId: cId,\r\n                        action: 'file'\r\n                    });\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemoting', ['SeaRequest', 'seaRemotingPcvisit', 'seaRemotingNetwork', 'seaRemotingAntivirus', 'seaRemotingPatch',\r\n    function seaRemoting(SeaRequest, seaRemotingPcvisit, seaRemotingNetwork, seaRemotingAntivirus, seaRemotingPatch) {\r\n            return {\r\n                antivirus: seaRemotingAntivirus,\r\n                pcvisit: seaRemotingPcvisit,\r\n                network: seaRemotingNetwork,\r\n                patch: seaRemotingPatch\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaReporting', ['SeaRequest',\r\n    function seaCustomer(SeaRequest) {\r\n            var request = new SeaRequest('reporting/{cId}'),\r\n                reportRequest = new SeaRequest('reporting/{cId}/{rId}');\r\n\r\n            function formatReport(report) {\r\n                ['startDate', 'lastDate', 'nextDate'].forEach(function (prop) {\r\n                    if(report[prop]) {\r\n                        report[prop] = new Date(report[prop]);\r\n                    }\r\n                });\r\n                \r\n                if(report.history) {\r\n                    report.history.forEach(function (generated) {\r\n                        generated.generatedDate = new Date(generated.generatedDate);\r\n                    });\r\n                }\r\n                \r\n                return report;\r\n            }\r\n        \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (reports) {\r\n                    reports.forEach(formatReport);\r\n                    return reports;\r\n                });\r\n            }\r\n        \r\n            function listTypes(cId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: 'type'\r\n                });\r\n            }\r\n\r\n            function get(cId, rId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: rId\r\n                }).then(function (report) {\r\n                    return formatReport(report);\r\n                });\r\n            }\r\n        \r\n            function destroy(cId, rId) {\r\n                return reportRequest.del({\r\n                    cId: cId,\r\n                    rId: rId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                type: {\r\n                    list: function (cId) {\r\n                        return listTypes(cId);\r\n                    }\r\n                },\r\n                \r\n                report: {\r\n                    get: function (cId, rId) {\r\n                        return get(cId, rId);\r\n                    },\r\n                    \r\n                    /**\r\n                     * create report\r\n                     * @param {Object} params\r\n                     * @config {String} [cId]\r\n                     * @config {String} [rtId]\r\n                     * @config {String} [targetId]\r\n                     * @config {String} [repeatInterval]\r\n                     * @config {String} [recipients]\r\n                     */\r\n                    create: function(params) {\r\n                        return create(params);\r\n                    },\r\n                    \r\n                    destroy: function (cId, rId) {\r\n                        return destroy(cId, rId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\r\n    function seaUserGroup(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/group/{gId}');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function addUser(uId, gId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(uId, gId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (uId, gId) {\r\n                    return addUser(uId, gId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId, gId) {\r\n                    return removeUser(uId, gId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\r\n    function seaUserSetting(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/setting');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(uId, settings) {\r\n                settings = settings || {};\r\n                settings.uId = uId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {String} uId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (uId, settings) {\r\n                    return update(uId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\r\n    function seaUserSubstitude(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\r\n\r\n            function set(uId, substId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    substitudeId: substId\r\n                });\r\n            }\r\n\r\n            function remove(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * set a substitude\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                set: function (uId, substId) {\r\n                    return set(uId, substId);\r\n                },\r\n\r\n                /**\r\n                 * remove substitude\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId) {\r\n                    return remove(uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\r\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\r\n            var request = new SeaRequest('user/{uId}'),\r\n                requestCustomer = new SeaRequest('user/{uId}/customer');\r\n        \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(user) {\r\n                return request.put(user);\r\n            }\r\n\r\n            function destroy(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function search(params) {\r\n                return request.get(params);\r\n            }\r\n        \r\n            function listCustomers(uId) {\r\n                return requestCustomer.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create user\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {Object} user\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (user) {\r\n                    return update(user);\r\n                },\r\n\r\n                destroy: function (uId) {\r\n                    return destroy(uId);\r\n                },\r\n\r\n                /**\r\n                 * search users\r\n                 * @param   {Object}   params\r\n                 * @config  {String}   [query]\r\n                 * @config  {String}   [customerId]\r\n                 * @config  {Boolean}  [includeLocation]\r\n                 */\r\n                search: function (params) {\r\n                    return search(params);\r\n                },\r\n\r\n                setting: seaUserSetting,\r\n                group: seaUserGroup,\r\n                substitude: seaUserSubstitude,\r\n                customer: {\r\n                    list: function (uId) {\r\n                        return listCustomers(uId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchHistory', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/history/{action}'));\r\n        \r\n            function format(container) {\r\n                if(!container.JobList) {\r\n                    return container;\r\n                }\r\n                \r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if(job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId, paging) {\r\n                return list(customerId, [cId], paging).then(function (history) {\r\n                    return (history[0] || {}).JobList;\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, paging) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                if(paging) {\r\n                    query.Index = paging.index;\r\n                    query.Count = paging.count;\r\n                }\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId, paging) {\r\n                    return get(customerId, cId, paging);\r\n                },\r\n\r\n                list: function (customerId, containerIds, paging) {\r\n                    return list(customerId, containerIds, paging);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchInstall', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/install/{action}'));\r\n\r\n            function format(container) {\r\n                if (!container.JobList) {\r\n                    return container;\r\n                }\r\n\r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (install) {\r\n                    return install[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, params) {\r\n                var query;\r\n                params = params || {};\r\n\r\n                if (params.jobIds) {\r\n                    query = helper.getJobIds(params.jobIds);\r\n                    query.action = 'software';\r\n                } else {\r\n                    query = helper.getContainerIds(containerIds);\r\n                    query.action = 'get';\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            function create(params) {\r\n                var customerId = params.customerId,\r\n                    containerId = params.containerId,\r\n                    categories = params.categories,\r\n                    software = params.softwareId,\r\n                    cron = params.cron,\r\n                    postInstall = params.postInstall;\r\n\r\n                var reqParams = {\r\n                    Cron: cron\r\n                };\r\n\r\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\r\n\r\n                if (categories) {\r\n                    reqParams.CategoryList = categories;\r\n                }\r\n                if (software) {\r\n                    reqParams = angular.extend(reqParams, helper.getSoftwareIds(software));\r\n                }\r\n                if (postInstall == null) {\r\n                    postInstall = 'NOTHING';\r\n                }\r\n\r\n                reqParams.PostAction = postInstall;\r\n\r\n                return request.post(reqParams).then(helper.idListResult);\r\n            }\r\n\r\n            function destroy(customerId, jobId) {\r\n                var query = helper.getJobIds(jobId);\r\n\r\n                return request.del(query).then(helper.idListResult);\r\n            }\r\n\r\n            function getSoftware(customerId, jobId) {\r\n                return listSoftware(customerId, [jobId]).then(function (install) {\r\n                    return (install[0] || {});\r\n                });\r\n            }\r\n\r\n            function listSoftware(customerId, jobIds) {\r\n                var query = helper.getJobIds(jobIds);\r\n                query.action = 'software';\r\n\r\n                return request.post(query).then(function(containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds, params) {\r\n                    return list(customerId, containerIds, params);\r\n                },\r\n\r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerId]\r\n                 * @config {String|Array} [softwareId]\r\n                 * @config {Array} [categories]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (customerId, jobId) {\r\n                    return destroy(customerId, jobId);\r\n                },\r\n\r\n                getSoftware: function (customerId, jobId) {\r\n                    return getSoftware(customerId, jobId);\r\n                },\r\n\r\n                listSoftware: function (customerId, jobIds) {\r\n                    return listSoftware(customerId, jobIds);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchReboot', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/reboot'));\r\n\r\n            function create(params) {\r\n                var customerId = params.customerId,\r\n                    containerId = params.containerId,\r\n                    cron = params.cron,\r\n                    action = params.action;\r\n\r\n                var reqParams = {\r\n                    Cron: cron,\r\n                    Action: action\r\n                };\r\n\r\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\r\n\r\n                return request.post(reqParams).then(helper.idListResult);\r\n            }\r\n\r\n            function destroy(customerId, jobId) {\r\n                var query = helper.getJobIds(jobId);\r\n\r\n                return request.del(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create reboot job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerId]\r\n                 * @config {String} [action]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (customerId, jobId) {\r\n                    return destroy(customerId, jobId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchScan', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/scan/{action}'));\r\n        \r\n            function format(container) {\r\n                if(!container.JobList) {\r\n                    return container;\r\n                }\r\n                \r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime'].forEach(function (key) {\r\n                        if(job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (scan) {\r\n                    return scan[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function create(params) {\r\n                var query = helper.getContainerIds(params.containerIds);\r\n                query.Cron = params.cron;\r\n                \r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerIds]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchSoftware', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/software/{action}')),\r\n                requestSoftware = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/software/{method}/{action}'));\r\n\r\n            function get(customerId, softwareId) {\r\n                var query = helper.getSoftwareIds(softwareId);\r\n                query.method = 'get';\r\n\r\n                return requestSoftware.post(query).then(function (result) { return result[0]; });\r\n            }\r\n        \r\n            function getByContainer(customerId, cId, params) {\r\n                return listByContainer(customerId, [cId], params).then(function (software) {\r\n                    return software[0];\r\n                });\r\n            }\r\n\r\n            function listByContainer(customerId, containerIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                if (params.blocked == null) {\r\n                    query.Blocked = 'BOTH';\r\n                } else {\r\n                    query.Blocked = params.blocked ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return request.post(query);\r\n            }\r\n\r\n            function has(customerId, containerIds, softwareIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.SoftwareIdList = helper.getSoftwareIds(softwareIds).SoftwareIdList;\r\n                query.method = 'container';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return requestSoftware.post(query);\r\n            }\r\n\r\n            function block(customerId, containerIds, softwareIds, isBlocked) {\r\n                var query = angular.extend(\r\n                    helper.getContainerIds(containerIds),\r\n                    helper.getSoftwareIds(softwareIds)\r\n                );\r\n                query.action = 'block';\r\n                query.Blocked = isBlocked;\r\n\r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                container: {\r\n                    /**\r\n                     * list software of container\r\n                     * @param {String} customerId\r\n                     * @param {String} containerId\r\n                     * @param {Object} params\r\n                     * @config {Boolean} [installed]\r\n                     * @config {Boolean} [blocked]\r\n                     */\r\n                    get: function (customerId, containerId, params) {\r\n                        return getByContainer(customerId, containerId, params);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, params) {\r\n                        return listByContainer(customerId, containerIds, params);\r\n                    }\r\n                },\r\n\r\n                get: function(customerId, softwareId) {\r\n                    return get(customerId, softwareId);\r\n                },\r\n                \r\n                /**\r\n                 * find out if a container has a specific software installed\r\n                 * @param {String} customerId\r\n                 * @param {String} containerId\r\n                 * @param {String} softwareId\r\n                 * @param {Object} params\r\n                 * @config {Boolean} [installed]\r\n                 */\r\n                has: function (customerId, containerId, softwareId, params) {\r\n                    return has(customerId, containerId, softwareId, params);\r\n                },\r\n\r\n                /**\r\n                 * block software on containers\r\n                 * @param   {String}   customerId   \r\n                 * @param   {String|Array}   containerIds \r\n                 * @param   {String|Array}   softwareIds  \r\n                 * @param   {Boolean}  isBlocked\r\n                 */\r\n                block: function (customerId, containerIds, softwareIds, isBlocked) {\r\n                    return block(customerId, containerIds, softwareIds, isBlocked);\r\n                }\r\n            };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}