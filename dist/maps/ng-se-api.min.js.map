{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/setting.js","src/customer/tag.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey","factory","SeaRequest","seaConfig","$q","$http","urlPath","prototype","formatUrl","url","params","keys","Object","i","length","regex","RegExp","test","replace","send","method","fullUrl","deferred","defer","conf","copy","data","then","resp","resolve","err","reject","promise","get","post","put","del","VALID_EVENTS","$rootScope","fireEvent","name","argsObj","console","log","$broadcast","connect","credentials","rooms","io","error","connectUrl","reduce","p","key","sio","settings","on","onerror","onconnect","userId","roomId","forEach","evtName","ondata","sendSettings","emit","connected","hasEverBeenConnected","reconnected","evt","type","targetNode","date","Date","lastDate","toLowerCase","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentTag","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","tag","formatActionlog","entry","changeDate","changed","JSON","parse","userName","formatMeasurement","m","ts","listActionlog","action","getChart","parentId","listCategories","list","entries","chartConfig","measurements","formatNote","postedOn","notes","nId","remote","param","remoteRequest","formatState","hint","isArray","statesById","states","tId","listSettings","akId","createApiKey","login","logout","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTag","seaContainerTemplate","formatContainer","container","lastBootUpTime","cId","inventory","pcvisit","proposal","template","getInventory","connectPcvisit","accept","pId","deny","assign","bucket","bId","listUser","userRequest","addUser","removeUser","uId","user","seaCustomerSetting","seaCustomerBucket","seaCustomerDispatchTime","seaCustomerTag","customer","dispatchTime","dtId","seaGroupSetting","seaGroupUser","gId","group","add","remove","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","indexOf","splice","len","me","feed","nodes","mobilepush","handle","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","substitude"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var fullUrl = seaConfig.getUrl(urlPath || this.urlPath),\r\n                    deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = angular.copy(params);\r\n                conf.url = this.formatUrl(fullUrl, params);\r\n\r\n                if (method === 'POST' || method === 'PUT') {\r\n                    conf.data = params || {};\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    var VALID_EVENTS = ['USER_UPDATE', 'NODE_ADD', 'NODE_UPDATE', 'NODE_REMOVE', 'REMOTE_RESULT'];\r\n\r\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\r\n    function ($rootScope, seaConfig) {\r\n            var connected = false,\r\n                reconnected = false,\r\n                hasEverBeenConnected = false,\r\n                sio;\r\n\r\n            var settings = {};\r\n\r\n            function fireEvent(name, argsObj) {\r\n                argsObj = argsObj || {};\r\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\r\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\r\n            }\r\n\r\n            function connect(credentials, rooms) {\r\n                if (typeof io == 'undefined') {\r\n                    console.error('required socket.io lib not found');\r\n                    return;\r\n                }\r\n\r\n                var connectUrl = seaConfig.getBaseUrl();\r\n                \r\n                if(credentials) {\r\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\r\n                        p += [ key, credentials[key] ].join('=');\r\n                        return p;\r\n                    }, '?');\r\n                }\r\n                \r\n                sio = io(connectUrl);\r\n\r\n                settings.rooms = rooms;\r\n\r\n                sio.on('error', onerror);\r\n                sio.on('connect', onconnect);\r\n                sio.on('connecting', function () {\r\n                    console.log('connecting socket');\r\n                });\r\n                sio.on('disconnect', function () {\r\n                    console.log('disconnected socket');\r\n                    onerror('socket.disconnected');\r\n                });\r\n                sio.on('connect_error', function () {\r\n                    console.log('connect socket failed');\r\n                    onerror('socket.connect_failed');\r\n                });\r\n                sio.on('reconnect_error', function () {\r\n                    console.log('reconnect socket failed');\r\n                    onerror('socket.reconnect_failed');\r\n                });\r\n                sio.on('reconnecting', function () {\r\n                    console.log('reconnecting socket');\r\n                });\r\n\r\n                sio.on('socket:joined', function (userId, roomId) {\r\n                    console.log(userId, 'joined', roomId);\r\n                });\r\n\r\n                // server-eye events\r\n                VALID_EVENTS.forEach(function (evtName) {\r\n                    sio.on(evtName, function (data) {\r\n                        ondata(evtName, data);\r\n                    });\r\n                });\r\n            }\r\n\r\n            function sendSettings() {\r\n                sio.emit('settings', settings);\r\n            }\r\n\r\n            function onerror(err) {\r\n                console.log('socket error:', err);\r\n                connected = false;\r\n                fireEvent('error', err);\r\n            }\r\n\r\n            function onconnect() {\r\n                console.log('connected socket');\r\n                connected = true;\r\n\r\n                if (hasEverBeenConnected) {\r\n                    reconnected = true;\r\n                }\r\n\r\n                hasEverBeenConnected = true;\r\n\r\n                var evt = reconnected ? 'reconnected' : 'connected';\r\n\r\n                console.log('firing socket', evt);\r\n\r\n                sendSettings();\r\n\r\n                fireEvent(evt);\r\n            }\r\n\r\n            function ondata(type, data) {\r\n                if(data && data.targetNode) {\r\n                    if(data.targetNode.date) {\r\n                        data.targetNode.date = new Date(data.targetNode.date);\r\n                    }\r\n                    \r\n                    if(data.targetNode.lastDate) {\r\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\r\n                    }\r\n                }\r\n                \r\n                fireEvent(type.toLowerCase(), data);\r\n            }\r\n\r\n            return {\r\n                connect: function (credentials, rooms) {\r\n                    return connect(credentials, rooms);\r\n                }\r\n            }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                tag: seaAgentTag,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                entry.userName = JSON.parse(entry.userName);\r\n                return entry;\r\n            }\r\n        \r\n            function formatMeasurement(m) {\r\n                m.ts = new Date(m.name);\r\n                return m;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n                            \r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params).then(function (chartConfig) {\r\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\r\n                            \r\n                            return chartConfig;\r\n                        });\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n    function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\n        \n            function update(setting) {\n                return request.put(setting);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n        \n            function remote(param) {\n                return remoteRequest.get(param);\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n                \n                /**\n                 * load settings from remote\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [information]\n                 */\n                remote: function (param) {\n                    return remote(param);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n    function seaAgentState(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/state');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                return state;\n            }\n\n            function hint(setting) {\n                return request.post(params);\n            }\n\n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, tId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to agent\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, tId) {\r\n                    return destroy(aId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n\n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\n    function seaAuth(SeaRequest) {\n            var request = new SeaRequest('auth/{action}');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            return {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n\n                actionlog: seaContainerMisc.actionlog,\n                inventory: seaContainerMisc.inventory,\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                pcvisit: seaContainerMisc.pcvisit,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                tag: seaContainerTag,\n                template: seaContainerTemplate\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n    function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                entry.userName = JSON.parse(entry.userName);\n                return entry;\n            }\n        \n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function connectPcvisit(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'pcvisit';\n                return request.get(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n                            \n                            return entries;\n                        });\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    }\n                },\n                pcvisit: {\n                    /**\n                     * install and connect to pcvisit\n                     * @param   {String} cId\n                     * @param   {Object}   params\n                     * @config  {String}   [supporterId]\n                     * @config  {String}   [supporterPassword]\n                     * @config  {String}   [user]\n                     * @config  {String}   [password]\n                     * @config  {String}   [domain]\n                     * @returns {Object} promise\n                     */\n                    connect: function (cId, params) {\n                        return connectPcvisit(cId, params);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    aId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return request.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n    function seaContainerState(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/state');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                return state;\n            }\n\n            function hint(setting) {\n                return request.post(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, tId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to container\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, tId) {\r\n                    return destroy(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n\n            function create(cId) {\n                return request.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/bucket/{bId}'),\r\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(bucket) {\r\n                return request.put(bucket);\r\n            }\r\n\r\n            function destroy(bId) {\r\n                return request.del({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function listUser(bId) {\r\n                return userRequest.get({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function addUser(params) {\r\n                return userRequest.put(params);\r\n            }\r\n\r\n            function removeUser(bId, uId) {\r\n                return userRequest.del({\r\n                    bId: bId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [bId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (bucket) {\r\n                    return update(bucket);\r\n                },\r\n\r\n                destroy: function (bId) {\r\n                    return destroy(bId);\r\n                },\r\n\r\n                user: {\r\n                    list: function (bId) {\r\n                        return listUser(bId);\r\n                    },\r\n\r\n                    /**\r\n                     * add user to bucket\r\n                     * @param {Object} params\r\n                     * @config {String} [bId]\r\n                     * @config {String} [uId]\r\n                     */\r\n                    create: function (params) {\r\n                        return addUser(params);\r\n                    },\r\n\r\n                    /**\r\n                     * remove user from bucket\r\n                     * @param {String} [bId]\r\n                     * @param {String} [uId]\r\n                     */\r\n                    destroy: function (bId, uId) {\r\n                        return removeUser(bId, uId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerSetting', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerTag',\n    function seaCustomer(SeaRequest, seaCustomerSetting, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerTag) {\n            var request = new SeaRequest('customer/{cId}');\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return request.put(customer);\n            }\n\n            return {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                setting: seaCustomerSetting,\n                bucket: seaCustomerBucket,\n                dispatchTime: seaCustomerDispatchTime,\n                tag: seaCustomerTag\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return request.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return request.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(tag);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\n            var request = new SeaRequest('me/{action}');\n\n            function _formatNode(node) {\n                if (node.date && typeof (node.date) === 'string') {\n                    node.date = new Date(node.date);\n                }\n\n                if (node.lastDate && typeof (node.lastDate) === 'string') {\n                    node.lastDate = new Date(node.lastDate);\n                }\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            return {\n                me: me,\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return request.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function destroy(nId) {\n                return request.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  includeGroups\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return get(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}');\n        \n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return request.put(user);\n            }\n\n            function destroy(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n\n                setting: seaUserSetting,\n                group: seaUserGroup,\n                substitude: seaUserSubstitude\n            };\n    }]);\n})();"],"sourceRoot":"/source/"}