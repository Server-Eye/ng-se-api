{"version":3,"sources":["node_modules/stjs/st.js","src/module.js","src/config.js","src/request.js","src/socket.js","src/transform.js","src/types.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/customer/apiKey.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/externalCall.js","src/customer/location.js","src/customer/manager.js","src/customer/property.js","src/customer/setting.js","src/customer/tag.js","src/customer/template.js","src/customer/usage.js","src/customer/viewFilter.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/me/location.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/me/setting.js","src/me/twofactor.js","src/patch/container.js","src/patch/helper.js","src/patch/patch.js","src/patch/viewFilter.js","src/powershell/helper.js","src/powershell/powershell.js","src/powershell/script.js","src/powershell/user.js","src/powershell/util.js","src/remoting/antivirus.js","src/remoting/iasHelper.js","src/remoting/network.js","src/remoting/patch.js","src/remoting/pcvisit.js","src/remoting/powershell.js","src/remoting/remoting.js","src/remoting/shutdown.js","src/reporting/reporting.js","src/reporting/template.js","src/search/search.js","src/user/group.js","src/user/location.js","src/user/setting.js","src/user/substitude.js","src/user/user.js","src/vault/entry.js","src/vault/helper.js","src/vault/user.js","src/vault/util.js","src/vault/vault.js","src/remoting/patch/history.js","src/remoting/patch/install.js","src/remoting/patch/reboot.js","src/remoting/patch/scan.js","src/remoting/patch/software.js"],"names":[],"mappingspjhlYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpnbvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvphHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACplHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"ng-se-api.min.js","sourcesContent":["(function() {\n  var $context = this;\n  var root; // root context\n  var Helper = {\n    is_template: function(str) {\n      var re = /\\{\\{(.+)\\}\\}/g;\n      return re.test(str);\n    },\n    is_array: function(item) {\n      return (\n        Array.isArray(item) ||\n        (!!item &&\n          typeof item === 'object' && typeof item.length === 'number' &&\n          (item.length === 0 || (item.length > 0 && (item.length - 1) in item))\n        )\n      );\n    },\n    resolve: function(o, path, new_val) {\n      // 1. Takes any object\n      // 2. Finds subtree based on path\n      // 3. Sets the value to new_val\n      // 4. Returns the object;\n      if (path && path.length > 0) {\n        var func = Function('new_val', 'with(this) {this' + path + '=new_val; return this;}').bind(o);\n        return func(new_val);\n      } else {\n        o = new_val;\n        return o;\n      }\n    },\n  };\n  var Conditional = {\n    run: function(template, data) {\n      // expecting template as an array of objects,\n      // each of which contains '#if', '#elseif', 'else' as key\n\n      // item should be in the format of:\n      // {'#if item': 'blahblah'}\n\n      // Step 1. get all the conditional keys of the template first.\n      // Step 2. then try evaluating one by one until something returns true\n      // Step 3. if it reaches the end, the last item shall be returned\n      for (var i = 0; i < template.length; i++) {\n        var item = template[i];\n        var keys = Object.keys(item);\n        // assuming that there's only a single kv pair for each item\n        var key = keys[0];\n        var func = TRANSFORM.tokenize(key);\n        if (func.name === '#if' || func.name === '#elseif') {\n          var expression = func.expression;\n          var res = TRANSFORM.fillout(data, '{{' + expression + '}}');\n          if (res === ('{{' + expression + '}}')) {\n            // if there was at least one item that was not evaluatable,\n            // we halt parsing and return the template;\n            return template;\n          } else {\n            if (res) {\n              // run the current one and return\n              return TRANSFORM.run(item[key], data);\n            } else {\n              // res was falsy. Ignore this branch and go on to the next item\n            }\n          }\n        } else {\n          // #else\n          // if you reached this point, it means:\n          //  1. there were no non-evaluatable expressions\n          //  2. Yet all preceding expressions evaluated to falsy value\n          //  Therefore we run this branch\n          return TRANSFORM.run(item[key], data);\n        }\n      }\n      // if you've reached this point, it means nothing matched.\n      // so return null\n      return null;\n    },\n    is: function(template) {\n      // TRUE ONLY IF it's in a correct format.\n      // Otherwise return the original template\n      // Condition 0. Must be an array\n      // Condition 1. Must have at least one item\n      // Condition 2. Each item in the array should be an object of a single key/value pair\n      // Condition 3. starts with #if\n      // Condition 4. in case there's more than two items, everything between the first and the last item should be #elseif\n      // Condition 5. in case there's more than two items, the last one should be either '#else' or '#elseif'\n      if (!Helper.is_array(template)) {\n        // Condition 0, it needs to be an array to be a conditional\n        return false;\n      }\n      // Condition 1.\n      // Must have at least one item\n      if (template.length === 0) {\n        return false;\n      }\n      // Condition 2.\n      // Each item in the array should be an object\n      // , and  of a single key/value pair\n      var containsValidObjects = true;\n      for (var i = 0; i < template.length; i++) {\n        var item = template[0];\n        if (typeof item !== 'object') {\n          containsValidObjects = false;\n          break;\n        }\n        if (Object.keys(item).length !== 1) {\n          // first item in the array has multiple key value pairs, so invalid.\n          containsValidObjects = false;\n          break;\n        }\n      }\n      if (!containsValidObjects) {\n        return false;\n      }\n      // Condition 3.\n      // the first item should have #if as its key\n      // the first item should also contain an expression\n      var first = template[0];\n      var func;\n      for (var key in first) {\n        func = TRANSFORM.tokenize(key);\n        if (!func) {\n          return false;\n        }\n        if (!func.name) {\n          return false;\n        }\n        // '{{#if }}'\n        if (!func.expression || func.expression.length === 0) {\n          return false;\n        }\n        if (func.name.toLowerCase() !== '#if') {\n          return false;\n        }\n      }\n      if (template.length === 1) {\n        // If we got this far and the template has only one item, it means\n        // template had one item which was '#if' so it's valid\n        return true;\n      }\n      // Condition 4.\n      // in case there's more than two items, everything between the first and the last item should be #elseif\n      var they_are_all_elseifs = true;\n      for (var template_index = 1; template_index < template.length-1; template_index++) {\n        var template_item = template[template_index];\n        for (var template_key in template_item) {\n          func = TRANSFORM.tokenize(template_key);\n          if (func.name.toLowerCase() !== '#elseif') {\n            they_are_all_elseifs = false;\n            break;\n          }\n        }\n      }\n      if (!they_are_all_elseifs) {\n        // There was at least one item that wasn't an elseif\n        // therefore invalid\n        return false;\n      }\n      // If you've reached this point, it means we have multiple items and everything between the first and the last item\n      // are elseifs\n      // Now we need to check the validity of the last item\n      // Condition 5.\n      // in case there's more than one item, it should end with #else or #elseif\n      var last = template[template.length-1];\n      for (var last_key in last) {\n        func = TRANSFORM.tokenize(last_key);\n        if (['#else', '#elseif'].indexOf(func.name.toLowerCase()) === -1) {\n          return false;\n        }\n      }\n      // Congrats, if you've reached this point, it's valid\n      return true;\n    },\n  };\n  var TRANSFORM = {\n    transform: function(template, data, injection, serialized) {\n      var selector = null;\n      if (/#include/.test(JSON.stringify(template))) {\n        selector = function(key, value) { return /#include/.test(key) || /#include/.test(value); };\n      }\n      var res;\n      if (injection) {\n        // resolve template with selector\n        var resolved_template = SELECT.select(template, selector, serialized)\n          .transform(data, serialized)\n          .root();\n        // apply the resolved template on data\n        res = SELECT.select(data, null, serialized)\n          .inject(injection, serialized)\n          .transformWith(resolved_template, serialized)\n          .root();\n      } else {\n        // no need for separate template resolution step\n        // select the template with selector and transform data\n        res = SELECT.select(template, selector, serialized)\n          .transform(data, serialized)\n          .root();\n      }\n      if (serialized) {\n        // needs to return stringified version\n        return JSON.stringify(res);\n      } else {\n        return res;\n      }\n    },\n    tokenize: function(str) {\n      // INPUT : string\n      // OUTPUT : {name: FUNCTION_NAME:STRING, args: ARGUMENT:ARRAY}\n      var re = /\\{\\{(.+)\\}\\}/g;\n      str = str.replace(re, '$1');\n      // str : '#each $jason.items'\n\n      var tokens = str.trim().split(' ');\n      // => tokens: ['#each', '$jason.items']\n\n      var func;\n      if (tokens.length > 0) {\n        if (tokens[0][0] === '#') {\n          func = tokens.shift();\n          // => func: '#each' or '#if'\n          // => tokens: ['$jason.items', '&&', '$jason.items.length', '>', '0']\n\n          var expression = tokens.join(' ');\n          // => expression: '$jason.items && $jason.items.length > 0'\n\n          return { name: func, expression: expression };\n        }\n      }\n      return null;\n    },\n    run: function(template, data) {\n      var result;\n      var fun;\n      if (typeof template === 'string') {\n        // Leaf node, so call TRANSFORM.fillout()\n        if (Helper.is_template(template)) {\n          var include_string_re = /\\{\\{([ ]*#include)[ ]*([^ ]*)\\}\\}/g;\n          if (include_string_re.test(template)) {\n            fun = TRANSFORM.tokenize(template);\n            if (fun.expression) {\n              // if #include has arguments, evaluate it before attaching\n              result = TRANSFORM.fillout(data, '{{' + fun.expression + '}}', true);\n            } else {\n              // shouldn't happen =>\n              // {'wrapper': '{{#include}}'}\n              result = template;\n            }\n          } else {\n            // non-#include\n            result = TRANSFORM.fillout(data, template);\n          }\n        } else {\n          result = template;\n        }\n      } else if (Helper.is_array(template)) {\n        if (Conditional.is(template)) {\n          result = Conditional.run(template, data);\n        } else {\n          result = [];\n          for (var i = 0; i < template.length; i++) {\n            var item = TRANSFORM.run(template[i], data);\n            if (item) {\n              // only push when the result is not null\n              // null could mean #if clauses where nothing matched => In this case instead of rendering 'null', should just skip it completely\n              // Todo : Distinguish between #if arrays and ordinary arrays, and return null for ordinary arrays\n              result.push(item);\n            }\n          }\n        }\n      } else if (Object.prototype.toString.call(template) === '[object Object]') {\n        // template is an object\n        result = {};\n\n        // ## Handling #include\n        // This needs to precede everything else since it's meant to be overwritten\n        // in case of collision\n        var include_object_re = /\\{\\{([ ]*#include)[ ]*(.*)\\}\\}/;\n        var include_keys = Object.keys(template).filter(function(key) { return include_object_re.test(key); });\n        if (include_keys.length > 0) {\n        // find the first key with #include\n          fun = TRANSFORM.tokenize(include_keys[0]);\n          if (fun.expression) {\n            // if #include has arguments, evaluate it before attaching\n            result = TRANSFORM.fillout(template[include_keys[0]], '{{' + fun.expression + '}}', true);\n          } else {\n            // no argument, simply attach the child\n            result = template[include_keys[0]];\n          }\n        }\n\n        for (var key in template) {\n          // Checking to see if the key contains template..\n          // Currently the only case for this are '#each' and '#include'\n          if (Helper.is_template(key)) {\n            fun = TRANSFORM.tokenize(key);\n            if (fun) {\n              if (fun.name === '#include') {\n                // this was handled above (before the for loop) so just ignore\n              } else if (fun.name === '#concat') {\n                if (Helper.is_array(template[key])) {\n                  result = [];\n                  template[key].forEach(function(concat_item) {\n                    var res = TRANSFORM.run(concat_item, data);\n                    result = result.concat(res);\n                  });\n\n                  if (/\\{\\{(.*?)\\}\\}/.test(JSON.stringify(result))) {\n                    // concat should only trigger if all of its children\n                    // have successfully parsed.\n                    // so check for any template expression in the end result\n                    // and if there is one, revert to the original template\n                    result = template;\n                  }\n                }\n              } else if (fun.name === '#merge') {\n                if (Helper.is_array(template[key])) {\n                  result = {};\n                  template[key].forEach(function(merge_item) {\n                    var res = TRANSFORM.run(merge_item, data);\n                    for (var key in res) {\n                      result[key] = res[key];\n                    }\n                  });\n                  // clean up $index from the result\n                  // necessary because #merge merges multiple objects into one,\n                  // and one of them may be 'this', in which case the $index attribute\n                  // will have snuck into the final result\n                  if(typeof data === 'object') {\n                    delete result[\"$index\"];\n                  } else {\n                    delete String.prototype.$index;\n                    delete Number.prototype.$index;\n                    delete Function.prototype.$index;\n                    delete Array.prototype.$index;\n                    delete Boolean.prototype.$index;\n                  }\n                }\n              } else if (fun.name === '#each') {\n                // newData will be filled with parsed results\n                var newData = TRANSFORM.fillout(data, '{{' + fun.expression + '}}', true);\n\n                // Ideally newData should be an array since it was prefixed by #each\n                if (newData && Helper.is_array(newData)) {\n                  result = [];\n                  for (var index = 0; index < newData.length; index++) {\n                    // temporarily set $index\n                    if(typeof newData[index] === 'object') {\n                      newData[index][\"$index\"] = index;\n                    } else {\n                      String.prototype.$index = index;\n                      Number.prototype.$index = index;\n                      Function.prototype.$index = index;\n                      Array.prototype.$index = index;\n                      Boolean.prototype.$index = index;\n                    }\n\n                    // run\n                    var loop_item = TRANSFORM.run(template[key], newData[index]);\n\n                    // clean up $index\n                    if(typeof newData[index] === 'object') {\n                      delete newData[index][\"$index\"];\n                    } else {\n                      delete String.prototype.$index;\n                      delete Number.prototype.$index;\n                      delete Function.prototype.$index;\n                      delete Array.prototype.$index;\n                      delete Boolean.prototype.$index;\n                    }\n\n                    if (loop_item) {\n                      // only push when the result is not null\n                      // null could mean #if clauses where nothing matched => In this case instead of rendering 'null', should just skip it completely\n                      result.push(loop_item);\n                    }\n                  }\n                } else {\n                  // In case it's not an array, it's an exception, since it was prefixed by #each.\n                  // This probably means this #each is not for the current variable\n                  // For example {{#each items}} may not be an array, but just leave it be, so\n                  // But don't get rid of it,\n                  // Instead, just leave it as template\n                  // So some other parse run could fill it in later.\n                  result = template;\n                }\n              } // end of #each\n            } else { // end of if (fun)\n              // If the key is a template expression but aren't either #include or #each,\n              // it needs to be parsed\n              var k = TRANSFORM.fillout(data, key);\n              var v = TRANSFORM.fillout(data, template[key]);\n              if (k !== undefined && v !== undefined) {\n                result[k] = v;\n              }\n            }\n          } else {\n            // Helper.is_template(key) was false, which means the key was not a template (hardcoded string)\n            if (typeof template[key] === 'string') {\n              fun = TRANSFORM.tokenize(template[key]);\n              if (fun && fun.name === '#?') {\n                // If the key is a template expression but aren't either #include or #each,\n                // it needs to be parsed\n                var filled = TRANSFORM.fillout(data, '{{' + fun.expression + '}}');\n                if (filled === '{{' + fun.expression + '}}' || !filled) {\n                  // case 1.\n                  // not parsed, which means the evaluation failed.\n\n                  // case 2.\n                  // returns fasly value\n\n                  // both cases mean this key should be excluded\n                } else {\n                  // only include if the evaluation is truthy\n                  result[key] = filled;\n                }\n              } else {\n                var item = TRANSFORM.run(template[key], data);\n                if (item !== undefined) {\n                  result[key] = item;\n                }\n              }\n            } else {\n              var item = TRANSFORM.run(template[key], data);\n              if (item !== undefined) {\n                result[key] = item;\n              }\n            }\n          }\n        }\n      } else {\n        return template;\n      }\n      return result;\n    },\n    fillout: function(data, template, raw) {\n      // 1. fill out if possible\n      // 2. otherwise return the original\n      var replaced = template;\n      // Run fillout() only if it's a template. Otherwise just return the original string\n      if (Helper.is_template(template)) {\n        var re = /\\{\\{(.*?)\\}\\}/g;\n\n        // variables are all instances of {{ }} in the current expression\n        // for example '{{this.item}} is {{this.user}}'s' has two variables: ['this.item', 'this.user']\n        var variables = template.match(re);\n\n        if (variables) {\n          if (raw) {\n            // 'raw' is true only for when this is called from #each\n            // Because #each is expecting an array, it shouldn't be stringified.\n            // Therefore we pass template:null,\n            // which will result in returning the original result instead of trying to\n            // replace it into the template with a stringified version\n            replaced = TRANSFORM._fillout({\n              variable: variables[0],\n              data: data,\n              template: null,\n            });\n          } else {\n            // Fill out the template for each variable\n            for (var i = 0; i < variables.length; i++) {\n              var variable = variables[i];\n              replaced = TRANSFORM._fillout({\n                variable: variable,\n                data: data,\n                template: replaced,\n              });\n            }\n          }\n        } else {\n          return replaced;\n        }\n      }\n      return replaced;\n    },\n    _fillout: function(options) {\n      // Given a template and fill it out with passed slot and its corresponding data\n      var re = /\\{\\{(.*?)\\}\\}/g;\n      var full_re = /^\\{\\{((?!\\}\\}).)*\\}\\}$/;\n      var variable = options.variable;\n      var data = options.data;\n      var template = options.template;\n      try {\n        // 1. Evaluate the variable\n        var slot = variable.replace(re, '$1');\n\n        // data must exist. Otherwise replace with blank\n        if (data) {\n          var func;\n          // Attach $root to each node so that we can reference it from anywhere\n          var data_type = typeof data;\n          if (['number', 'string', 'array', 'boolean', 'function'].indexOf(data_type === -1)) {\n            data.$root = root;\n          }\n          // If the pattern ends with a return statement, but is NOT wrapped inside another function ([^}]*$), it's a function expression\n          var match = /function\\([ ]*\\)[ ]*\\{(.*)\\}[ ]*$/g.exec(slot);\n          if (match) {\n            func = Function('with(this) {' + match[1] + '}').bind(data);\n          } else if (/\\breturn [^;]+;?[ ]*$/.test(slot) && /return[^}]*$/.test(slot)) {\n            // Function expression with explicit 'return' expression\n            func = Function('with(this) {' + slot + '}').bind(data);\n          } else {\n            // Function expression with explicit 'return' expression\n            // Ordinary simple expression that\n            func = Function('with(this) {return (' + slot + ')}').bind(data);\n          }\n          var evaluated = func();\n          delete data.$root;  // remove $root now that the parsing is over\n          if (evaluated) {\n            // In case of primitive types such as String, need to call valueOf() to get the actual value instead of the promoted object\n            evaluated = evaluated.valueOf();\n          }\n          if (typeof evaluated === 'undefined') {\n            // it tried to evaluate since the variable existed, but ended up evaluating to undefined\n            // (example: var a = [1,2,3,4]; var b = a[5];)\n            return template;\n          } else {\n            // 2. Fill out the template with the evaluated value\n            // Be forgiving and print any type, even functions, so it's easier to debug\n            if (evaluated) {\n              // IDEAL CASE : Return the replaced template\n              if (template) {\n                // if the template is a pure template with no additional static text,\n                // And if the evaluated value is an object or an array, we return the object itself instead of\n                // replacing it into template via string replace, since that will turn it into a string.\n                if (full_re.test(template)) {\n                  return evaluated;\n                } else {\n                  return template.replace(variable, evaluated);\n                }\n              } else {\n                return evaluated;\n              }\n            } else {\n              // Treat false or null as blanks (so that #if can handle it)\n              if (template) {\n                // if the template is a pure template with no additional static text,\n                // And if the evaluated value is an object or an array, we return the object itself instead of\n                // replacing it into template via string replace, since that will turn it into a string.\n                if (full_re.test(template)) {\n                  return evaluated;\n                } else {\n                  return template.replace(variable, '');\n                }\n              } else {\n                return '';\n              }\n            }\n          }\n        }\n        // REST OF THE CASES\n        // if evaluated is null or undefined,\n        // it probably means one of the following:\n        //  1. The current data being parsed is not for the current template\n        //  2. It's an error\n        //\n        //  In either case we need to return the original template unparsed.\n        //    1. for case1, we need to leave the template alone so that the template can be parsed\n        //      by another data set\n        //    2. for case2, it's better to just return the template so it's easier to debug\n        return template;\n      } catch (err) {\n        return template;\n      }\n    },\n  };\n  var SELECT = {\n    // current: currently accessed object\n    // path: the path leading to this item\n    // filter: The filter function to decide whether to select or not\n    $val: null,\n    $selected: [],\n    $injected: [],\n    $progress: null,\n    exec: function(current, path, filter) {\n      // if current matches the pattern, put it in the selected array\n      if (typeof current === 'string') {\n        // leaf node should be ignored\n        // we're lookin for keys only\n      } else if (Helper.is_array(current)) {\n        for (var i=0; i<current.length; i++) {\n          SELECT.exec(current[i], path+'['+i+']', filter);\n        }\n      } else {\n        // object\n        for (var key in current) {\n          // '$root' is a special key that links to the root node\n          // so shouldn't be used to iterate\n          if (key !== '$root') {\n            if (filter(key, current[key])) {\n              var index = SELECT.$selected.length;\n              SELECT.$selected.push({\n                index: index,\n                key: key,\n                path: path,\n                object: current,\n                value: current[key],\n              });\n            }\n            SELECT.exec(current[key], path+'[\"'+key+'\"]', filter);\n          }\n        }\n      }\n    },\n    inject: function(obj, serialized) {\n      SELECT.$injected = obj;\n      try {\n        if (serialized) SELECT.$injected = JSON.parse(obj);\n      } catch (error) { }\n\n      if (Object.keys(SELECT.$injected).length > 0) {\n        SELECT.select(SELECT.$injected);\n      }\n      return SELECT;\n    },\n    // returns the object itself\n    select: function(obj, filter, serialized) {\n      // iterate '$selected'\n      //\n      /*\n      SELECT.$selected = [{\n        value {\n          '{{#include}}': {\n            '{{#each items}}': {\n              'type': 'label',\n              'text': '{{name}}'\n            }\n          }\n        },\n        path: '$jason.head.actions.$load'\n        ...\n      }]\n      */\n      var json = obj;\n      try {\n        if (serialized) json = JSON.parse(obj);\n      } catch (error) { }\n\n      if (filter) {\n        SELECT.$selected = [];\n        SELECT.exec(json, '', filter);\n      } else {\n        SELECT.$selected = null;\n      }\n\n      if (json && (Helper.is_array(json) || typeof json === 'object')) {\n        if (!SELECT.$progress) {\n          // initialize\n          if (Helper.is_array(json)) {\n            SELECT.$val = [];\n            SELECT.$selected_root = [];\n          } else {\n            SELECT.$val = {};\n            SELECT.$selected_root = {};\n          }\n        }\n        Object.keys(json).forEach(function(key) {\n        //for (var key in json) {\n          SELECT.$val[key] = json[key];\n          SELECT.$selected_root[key] = json[key];\n        });\n      } else {\n        SELECT.$val = json;\n        SELECT.$selected_root = json;\n      }\n      SELECT.$progress = true; // set the 'in progress' flag\n\n      return SELECT;\n    },\n    transformWith: function(obj, serialized) {\n      SELECT.$parsed = [];\n      SELECT.$progress = null;\n      /*\n      *  'selected' is an array that contains items that looks like this:\n      *  {\n      *    key: The selected key,\n      *    path: The path leading down to the selected key,\n      *    object: The entire object that contains the currently selected key/val pair\n      *    value: The selected value\n      *  }\n      */\n      var template = obj;\n      try {\n        if (serialized) template = JSON.parse(obj);\n      } catch (error) { }\n\n      // Setting $root\n      SELECT.$template_root = template;\n      String.prototype.$root = SELECT.$selected_root;\n      Number.prototype.$root = SELECT.$selected_root;\n      Function.prototype.$root = SELECT.$selected_root;\n      Array.prototype.$root = SELECT.$selected_root;\n      Boolean.prototype.$root = SELECT.$selected_root;\n      root = SELECT.$selected_root;\n      // generate new $selected_root\n      if (SELECT.$selected && SELECT.$selected.length > 0) {\n        SELECT.$selected.sort(function(a, b) {\n          // sort by path length, so that deeper level items will be replaced first\n          // TODO: may need to look into edge cases\n          return b.path.length - a.path.length;\n        }).forEach(function(selection) {\n        //SELECT.$selected.forEach(function(selection) {\n          // parse selected\n          var parsed_object = TRANSFORM.run(template, selection.object);\n\n          // apply the result to root\n          SELECT.$selected_root = Helper.resolve(SELECT.$selected_root, selection.path, parsed_object);\n\n          // update selected object with the parsed result\n          selection.object = parsed_object;\n        });\n        SELECT.$selected.sort(function(a, b) {\n          return a.index - b.index;\n        });\n      } else {\n        var parsed_object = TRANSFORM.run(template, SELECT.$selected_root);\n        // apply the result to root\n        SELECT.$selected_root = Helper.resolve(SELECT.$selected_root, '', parsed_object);\n      }\n      delete String.prototype.$root;\n      delete Number.prototype.$root;\n      delete Function.prototype.$root;\n      delete Array.prototype.$root;\n      delete Boolean.prototype.$root;\n      return SELECT;\n    },\n    transform: function(obj, serialized) {\n      SELECT.$parsed = [];\n      SELECT.$progress = null;\n      /*\n      'selected' is an array that contains items that looks like this:\n\n      {\n        key: The selected key,\n        path: The path leading down to the selected key,\n        object: The entire object that contains the currently selected key/val pair\n        value: The selected value\n      }\n      */\n      var data = obj;\n      try {\n        if (serialized) data = JSON.parse(obj);\n      } catch (error) { }\n\n      // since we're assuming that the template has been already selected, the $template_root is $selected_root\n      SELECT.$template_root = SELECT.$selected_root;\n\n      String.prototype.$root = data;\n      Number.prototype.$root = data;\n      Function.prototype.$root = data;\n      Array.prototype.$root = data;\n      Boolean.prototype.$root = data;\n      root = data;\n\n      if (SELECT.$selected && SELECT.$selected.length > 0) {\n        SELECT.$selected.sort(function(a, b) {\n          // sort by path length, so that deeper level items will be replaced first\n          // TODO: may need to look into edge cases\n          return b.path.length - a.path.length;\n        }).forEach(function(selection) {\n          // parse selected\n          var parsed_object = TRANSFORM.run(selection.object, data);\n          // apply the result to root\n          SELECT.$template_root = Helper.resolve(SELECT.$template_root, selection.path, parsed_object);\n          SELECT.$selected_root = SELECT.$template_root;\n\n          // update selected object with the parsed result\n          selection.object = parsed_object;\n        });\n        SELECT.$selected.sort(function(a, b) {\n          return a.index - b.index;\n        });\n      } else {\n        var parsed_object = TRANSFORM.run(SELECT.$selected_root, data);\n        // apply the result to root\n        SELECT.$template_root = Helper.resolve(SELECT.$template_root, '', parsed_object);\n        SELECT.$selected_root = SELECT.$template_root;\n      }\n      delete String.prototype.$root;\n      delete Number.prototype.$root;\n      delete Function.prototype.$root;\n      delete Array.prototype.$root;\n      delete Boolean.prototype.$root;\n      return SELECT;\n    },\n\n    // Terminal methods\n    objects: function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.object; });\n      } else {\n        return [SELECT.$selected_root];\n      }\n    },\n    keys: function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.key; });\n      } else {\n        if (Array.isArray(SELECT.$selected_root)) {\n          return Object.keys(SELECT.$selected_root).map(function(key) { return parseInt(key); });\n        } else {\n          return Object.keys(SELECT.$selected_root);\n        }\n      }\n    },\n    paths: function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.path; });\n      } else {\n        if (Array.isArray(SELECT.$selected_root)) {\n          return Object.keys(SELECT.$selected_root).map(function(item) {\n            // key is integer\n            return '[' + item + ']';\n          });\n        } else {\n          return Object.keys(SELECT.$selected_root).map(function(item) {\n            // key is string\n            return '[\"' + item + '\"]';\n          });\n        }\n      }\n    },\n    values: function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.value; });\n      } else {\n        return Object.values(SELECT.$selected_root);\n      }\n    },\n    root: function() {\n      SELECT.$progress = null;\n      return SELECT.$selected_root;\n    },\n  };\n\n  // Native JSON object override\n  var _stringify = JSON.stringify;\n  JSON.stringify = function(val, replacer, spaces) {\n    var t = typeof val;\n    if (['number', 'string', 'boolean'].indexOf(t) !== -1) {\n      return _stringify(val, replacer, spaces);\n    }\n    if (!replacer) {\n      return _stringify(val, function(key, val) {\n        if (SELECT.$injected && SELECT.$injected.length > 0 && SELECT.$injected.indexOf(key) !== -1) { return undefined; }\n        if (key === '$root' || key === '$index') {\n          return undefined;\n        }\n        if (typeof val === 'function') {\n          return '(' + val.toString() + ')';\n        } else {\n          return val;\n        }\n      }, spaces);\n    } else {\n      return _stringify(val, replacer, spaces);\n    }\n  };\n\n  // Export\n  if (typeof exports !== 'undefined') {\n    var x = {\n      TRANSFORM: TRANSFORM,\n      transform: TRANSFORM,\n      SELECT: SELECT,\n      Conditional: Conditional,\n      Helper: Helper,\n      inject: SELECT.inject,\n      select: SELECT.select,\n      transform: TRANSFORM.transform,\n    };\n    if (typeof module !== 'undefined' && module.exports) { exports = module.exports = x; }\n    exports = x;\n  } else {\n    $context.ST = {\n      select: SELECT.select,\n      inject: SELECT.inject,\n      transform: TRANSFORM.transform,\n    };\n  }\n}());\n","(function () {\n    \"use strict\";\n    \n    angular.module('ngSeApi', []);\n})();\n","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\n        function SeaConfigProvider($httpProvider) {\n            var config = {\n                baseUrl: 'https://api.server-eye.de',\n                patchUrl: 'https://patch.server-eye.de',\n                pmUrl: 'https://pm.server-eye.de',\n                microServiceUrl: 'https://api-ms.server-eye.de',\n                apiVersion: 2,\n                microServiceApiVersion: 3,\n                apiKey: null,\n                getUrl: function (path) {\n                    return [this.baseUrl, this.apiVersion, path].join('/');\n                }\n            };\n\n            $httpProvider.interceptors.push(function () {\n                return {\n                    'request': function (reqConfig) {\n                        if (config.apiKey) {\n                            reqConfig.headers['x-api-key'] = config.apiKey;\n                        }\n\n                        return reqConfig;\n                    },\n\n                    'response': function (response) {\n                        return response;\n                    }\n                };\n            });\n\n            this.setBaseUrl = function (baseUrl) {\n                config.baseUrl = baseUrl;\n            }\n\n            this.setPatchUrl = function (patchUrl) {\n                config.patchUrl = patchUrl;\n            }\n\n            this.setPmUrl = function (pmUrl) {\n                config.pmUrl = pmUrl;\n            }\n\n            this.setMicroServiceUrl = function (microServiceUrl) {\n                config.microServiceUrl = microServiceUrl;\n            }\n\n            this.setApiVersion = function (apiVersion) {\n                config.apiVersion = apiVersion;\n            }\n\n            this.setMicroServiceApiVersion = function (microServiceApiVersion) {\n                config.microServiceApiVersion = microServiceApiVersion;\n            }\n\n            this.setApiKey = function (apiKey) {\n                config.apiKey = apiKey;\n            }\n\n            this.$get = function ($http) {\n                return {\n                    getBaseUrl: function () {\n                        return config.baseUrl;\n                    },\n                    getPatchUrl: function () {\n                        return config.patchUrl;\n                    },\n                    getPmUrl: function () {\n                        return config.pmUrl;\n                    },\n                    getMicroServiceUrl: function () {\n                        return config.microServiceUrl;\n                    },\n                    getMicroServiceUrl: function () {\n                        return config.microServiceUrl;\n                    },\n                    getApiVersion: function () {\n                        return config.apiVersion;\n                    },\n                    getMicroServiceApiVersion: function () {\n                        return config.microServiceApiVersion;\n                    },\n                    getMicroServiceApiVersion: function () {\n                        return config.microServiceApiVersion;\n                    },\n                    getApiKey: function () {\n                        return config.apiKey;\n                    },\n                    setApiKey: function (apiKey) {\n                        config.apiKey = apiKey;\n                    },\n                    getUrl: function (path) {\n                        return [config.baseUrl, config.apiVersion, path].join('/');\n                    },\n                    getMsUrl: function(path) {\n                        return [config.microServiceUrl, config.microServiceApiVersion, path].join('/');\n                    },\n                }\n            };\n        }]);\n\n    angular.module('ngSeApi').config(['seaConfigProvider',\n        function (seaApiConfigProvider) {\n\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http', 'SeaRequestHelperService',\n        function SeaRequest(seaConfig, $q, $http, SeaRequestHelperService) {\n            function SeaRequest(urlPath, useMicroServiceAPI) {\n                this.urlPath = urlPath;\n                this.useMicroServiceAPI = !!useMicroServiceAPI;\n            }\n\n            /**\n             * Merges url and params to a valid api url path.\n             *\n             * <pre><code>\n             * url = '/agent/:aId'\n             * params = { aId: 'test-agent-id', name: 'test agent' }\n             *\n             * url = formatUrl(urlPath, params)\n             * url == '/agent/test-agent-id'\n             * </pre></code>\n             *\n             * @param   {String} url    url template\n             * @param   {Object} params request parameters\n             * @returns {String}\n             */\n            SeaRequest.prototype.formatUrl = function formatUrl(params, url) {\n                url = url || this.urlPath;\n\n                if (url.indexOf('http') < 0) {\n                    var urlGetter = (this.useMicroServiceAPI) ? seaConfig.getMsUrl : seaConfig.getUrl;\n                    url = urlGetter(url || this.urlPath)\n                }\n\n                params = params || {};\n\n                var keys = Object.keys(params),\n                    i = keys.length;\n\n                while (i--) {\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\n                    if (regex.test(url)) {\n                        url = url.replace(regex, params[keys[i]]);\n                        delete params[keys[i]];\n                    }\n                }\n\n                url = url.replace(/\\/{[a-z0-9]*}/ig, '');\n\n                return url;\n            }\n\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\n                var deferred = $q.defer(),\n                    conf = {\n                        method: method\n                    };\n\n                params = params || {};\n                params = angular.copy(params);\n\n                conf.url = this.formatUrl(params, urlPath);\n\n                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\n                    conf.data = params || {};\n                    conf.headers = {\n                        'Content-Type': 'application/json'\n                    };\n                } else {\n                    conf.params = params || {};\n                }\n\n                SeaRequestHelperService.dumpRequest(conf);\n\n                $http(conf).then(function (resp) {\n                    var total = resp.headers('x-total-count');\n\n                    if (total != null) {\n                        resp.data.totalCount = total;\n                    }\n\n                    deferred.resolve(resp.data);\n                }, function (err) {\n                    SeaRequestHelperService.dumpResponse(err);\n                    deferred.reject(err);\n                });\n\n                return deferred.promise;\n            }\n\n            /**\n             * perform GET request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.get = function get(params, urlPath) {\n                return this.send('GET', params, urlPath);\n            }\n\n            /**\n             * perform POST request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.post = function get(params, urlPath) {\n                return this.send('POST', params, urlPath);\n            }\n\n            /**\n             * perform PUT request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.put = function get(params, urlPath) {\n                return this.send('PUT', params, urlPath);\n            }\n\n            /**\n             * perform DELETE request\n             * @param {Object}  params  The request parameters\n             * @param {String}  urlPath only append if url is different to classes urlPath\n             * @returns {Boolean} promise\n             */\n            SeaRequest.prototype.del = function get(params, urlPath) {\n                return this.send('DELETE', params, urlPath);\n            }\n\n            return SeaRequest;\n        }]);\n\n    angular.module('ngSeApi').factory('SeaRequestHelperService', [\n        function () {\n            var dump = {\n                request: undefined,\n                response: undefined,\n            };\n\n            function dumpRequest(data) {\n                dump.request = data;\n            }\n\n            function dumpResponse(data) {\n                dump.response = data;\n            }\n\n            function getDump() {\n                var dumpData = JSON.stringify(dump);\n                dump.request = undefined;\n                dump.response = undefined;\n\n                return dumpData;\n            }\n\n            return {\n                dumpRequest: dumpRequest,\n                dumpResponse: dumpResponse,\n                getDump: getDump,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    var VALID_EVENTS = [\n        'USER_UPDATE',\n        'NODE_ADD',\n        'NODE_UPDATE',\n        'NODE_REMOVE',\n        'REMOTE_RESULT',\n        'user_location_change',\n    ];\n\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\n    function ($rootScope, seaConfig) {\n            var connected = false,\n                reconnected = false,\n                hasEverBeenConnected = false,\n                sio;\n\n            var settings = {};\n\n            function fireEvent(name, argsObj) {\n                argsObj = argsObj || {};\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\n            }\n\n            function connect(credentials, rooms) {\n                if (typeof io == 'undefined') {\n                    console.error('required socket.io lib not found');\n                    return;\n                }\n\n                var connectUrl = seaConfig.getBaseUrl();\n                \n                if(credentials) {\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\n                        p += [ key, credentials[key] ].join('=');\n                        return p;\n                    }, '?');\n                }\n                \n                sio = io(connectUrl);\n\n                settings.rooms = rooms;\n\n                sio.on('error', onerror);\n                sio.on('connect', onconnect);\n                sio.on('connecting', function () {\n                    console.log('connecting socket');\n                });\n                sio.on('disconnect', function () {\n                    console.log('disconnected socket');\n                    onerror('socket.disconnected');\n                });\n                sio.on('connect_error', function () {\n                    console.log('connect socket failed');\n                    onerror('socket.connect_failed');\n                });\n                sio.on('reconnect_error', function () {\n                    console.log('reconnect socket failed');\n                    onerror('socket.reconnect_failed');\n                });\n                sio.on('reconnecting', function () {\n                    console.log('reconnecting socket');\n                });\n\n                sio.on('socket:joined', function (userId, roomId) {\n                    console.log(userId, 'joined', roomId);\n                });\n\n                // server-eye events\n                VALID_EVENTS.forEach(function (evtName) {\n                    sio.on(evtName, function (data) {\n                        ondata(evtName, data);\n                    });\n                });\n            }\n\n            function sendSettings() {\n                sio.emit('settings', settings);\n            }\n\n            function onerror(err) {\n                console.log('socket error:', err);\n                connected = false;\n                fireEvent('error', err);\n            }\n\n            function onconnect() {\n                console.log('connected socket');\n                connected = true;\n\n                if (hasEverBeenConnected) {\n                    reconnected = true;\n                }\n\n                hasEverBeenConnected = true;\n\n                var evt = reconnected ? 'reconnected' : 'connected';\n\n                console.log('firing socket', evt);\n\n                sendSettings();\n\n                fireEvent(evt);\n            }\n\n            function ondata(type, data) {\n                if(data && data.targetNode) {\n                    if(data.targetNode.date) {\n                        data.targetNode.date = new Date(data.targetNode.date);\n                    }\n                    \n                    if(data.targetNode.lastDate) {\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\n                    }\n                }\n                \n                fireEvent(type.toLowerCase(), data);\n            }\n\n            return {\n                connect: function (credentials, rooms) {\n                    return connect(credentials, rooms);\n                }\n            }\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('SeaTransform', ['SeaTypes',\n        function SeaTransform(SeaTypes) {\n            function SeaTransform(template) {\n                this.parser = ST;\n                this.template = template;\n            }\n\n            SeaTransform.prototype.parse = function (source) {\n                return this.parser.select(angular.extend({}, { SE_TYPES: SeaTypes }, source)).transformWith(this.template).root();\n            };\n\n            return SeaTransform;\n        }]);\n})();\n\n(function () {\n    \"use strict\";\n\n    var TPL_ME_ME = {\n        \"userId\": \"{{userId}}\",\n        \"customerId\": \"{{customer.customerId}}\",\n        \"substitudeId\": \"\",\n        \"customerNumberExtern\": \"{{distributor.customerNumberExtern}}\",\n        \"companyName\": \"\",\n        \"country\": \"\",\n        \"street\": \"\",\n        \"streetNumber\": \"\",\n        \"zipCode\": \"\",\n        \"city\": \"\",\n        \"licenseType\": \"\",\n        \"role\": \"{{role}}\", // needs to be transformed to a number\n        \"roles\": {\n            \"{{#each roles}}\": \"{{this.toLowerCase()}}\"\n        },\n        \"surname\": \"{{surname}}\",\n        \"prename\": \"{{prename}}\",\n        \"email\": \"{{email}}\",\n        \"phone\": \"{{phone}}\",\n        \"customerSettings\": {},\n        \"distributor\": {\n            \"id\": \"{{distributor.customerId}}\",\n            \"customerNumberExtern\": \"{{distributor.customerNumberExtern}}\"\n        },\n        \"distributorInformation\": {\n            \"website\": \"{{distributor.information.website}}\",\n            \"phone\": \"{{distributor.information.phone}}\",\n            \"hasLogo\": \"{{distributor.information.hasLogo}}\"\n        },\n        \"settings\": {\n            \"sendSummary\": \"{{settings.sendSummary}}\",\n            \"defaultNotifyEmail\": \"{{settings.defaultNotifyEmail}}\",\n            \"defaultNotifyPhone\": \"{{settings.defaultNotifyPhone}}\",\n            \"defaultNotifyTicket\": \"{{settings.defaultNotifyTicket}}\",\n            \"timezone\": \"{{settings.timezone}}\",\n            \"theme\": \"{{settings.theme}}\",\n            \"webNotification\": \"{{settings.webNotification}}\",\n            \"highlightCustomers\": \"{{settings.highlightCustomers}}\",\n            \"defaultViewFilter\": \"{{settings.defaultViewFilter}}\",\n            \"agreeAnalytics\": \"{{settings.agreeAnalytics}}\"\n        },\n        \"customers\": {\n            \"{{#each $root.managedCustomers}}\": {\n                \"customer_id\": \"{{customerId}}\"\n            }\n        },\n        \"isDistributor\": \"{{isDistributor}}\",\n        \"accessTo\": \"{{accessTo}}\",\n        \"productVersion\": \"\",\n        \"hasKeyPair\": \"{{hasKeyPair}}\"\n    }\n\n    var TPL_AGENT_STATE_HINT_CREATE = {\n        \"hintType\": \"{{ $root.SE_TYPES.LOGNOTE_TYPE.N2S[$root.hintType] }}\",\n        \"message\": \"{{message}}\",\n        \"assignedUser\": \"{{assignedUser}}\",\n        \"mentionedUsers\": \"{{mentionedUsers}}\",\n        \"private\": \"{{private}}\",\n        \"until\": \"{{#? until}}\",\n        \"aId\": \"{{aId}}\",\n        \"sId\": \"{{sId}}\",\n    }\n\n    var TPL_ME_PASSWORD_UPDATE = {\n        \"password\": \"{{password}}\",\n        \"passwordRepeat\": \"{{passwordre}}\",\n        \"validationPassword\": \"{{validationPassword}}\",\n        \"code\": \"{{#? code}}\",\n    }\n\n    var TPL_CONTAINER_STATE_HINT_CREATE = JSON.parse(JSON.stringify(TPL_AGENT_STATE_HINT_CREATE));\n    delete TPL_CONTAINER_STATE_HINT_CREATE[\"aId\"];\n    TPL_CONTAINER_STATE_HINT_CREATE[\"cId\"] = \"{{cId}}\";\n\n    angular.module('ngSeApi').factory('SeaTransformTemplate', [\n        function SeaTransformTemplate() {\n            return {\n                ME: {\n                    ME: TPL_ME_ME,\n                },\n                AGENT: {\n                    STATE: {\n                        HINT: {\n                            CREATE: TPL_AGENT_STATE_HINT_CREATE,\n                        },\n                    },\n                },\n                CONTAINER: {\n                    STATE: {\n                        HINT: {\n                            CREATE: TPL_CONTAINER_STATE_HINT_CREATE,\n                        },\n                    },\n                },\n                ME: {\n                    PASSWORD: {\n                        UPDATE: TPL_ME_PASSWORD_UPDATE,\n                    },\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    var SE_TYPES = {\n        ACTION_LOG_TYPE: {\n            N2S: {\n                0: \"AGENT_SETTING\",\n                1: \"AGENT_PROPERTY\",\n                2: \"AGENT_CREATE\",\n                3: \"AGENT_DELETE\",\n                4: \"AGENT_GENERIC\",\n                22: \"AGENT_TAG_ADD\",\n                23: \"AGENT_TAG_REMOVE\",\n                100: \"CONTAINER_SETTING\",\n                101: \"CONTAINER_PROPERTY\",\n                102: \"CONTAINER_CREATE\",\n                103: \"CONTAINER_DELETE\",\n                104: \"CONTAINER_GENERIC\",\n                105: \"CONTAINER_INVENTORY\",\n                106: \"CONTAINER_REMOTEACCESS\",\n                107: \"CONTAINER_REMOTEACCESSPERFORMED\",\n                108: \"CONTAINER_POWERSHELLACCESS\",\n                109: \"CONTAINER_POWERSHELLACCESSPERFORMED\",\n                110: \"CONTAINER_SYSTEMSHUTDOWN\",\n                122: \"CONTAINER_TAG_ADD\",\n                123: \"CONTAINER_TAG_REMOVE\",\n                202: \"NOTE_CREATE\",\n                203: \"NOTE_DELETE\",\n                300: \"NOTIFY_SETTING\",\n                302: \"NOTIFY_CREATE\",\n                303: \"NOTIFY_DELETE\",\n                310: \"NOTIFY_SENT_OK\",\n                311: \"NOTIFY_SENT_ERROR\",\n                402: \"REPORT_CREATE\",\n                403: \"REPORT_DELETE\",\n                410: \"REPORT_TEMPLATE_CHANGE\",\n                412: \"REPORT_TEMPLATE_CREATE\",\n                413: \"REPORT_TEMPLATE_DELETE\",\n                502: \"USER_TWOFACTOR_ENABLE\",\n                503: \"USER_TWOFACTOR_DISABLE\",\n                600: \"COMPLIANCE_CONFIG_CHANGE\",\n                602: \"COMPLIANCE_CONFIG_CREATE\",\n                603: \"COMPLIANCE_CONFIG_DELETE\",\n                700: \"TAG_CHANGE\",\n                702: \"TAG_CREATE\",\n                703: \"TAG_DELETE\",\n                800: \"PM_CONFIG_CHANGE\",\n                802: \"PM_CONFIG_CREATE\",\n                803: \"PM_CONFIG_DELETE\",\n                900: \"VAULT_CREATE\",\n                901: \"VAULT_UPDATE\",\n                902: \"VAULT_DELETE\",\n                903: \"VAULT_RESTORE\",\n                904: \"VAULT_ENTRY_CREATE\",\n                905: \"VAULT_ENTRY_UPDATE\",\n                906: \"VAULT_ENTRY_DELETE\",\n                907: \"VAULT_USER_CREATE\",\n                908: \"VAULT_USER_UPDATE\",\n                909: \"VAULT_USER_DELETE\",\n                1000: \"POWERSHELL_REPOSITORY_CREATE\",\n                1001: \"POWERSHELL_REPOSITORY_UPDATE\",\n                1002: \"POWERSHELL_REPOSITORY_DELETE\",\n                1003: \"POWERSHELL_REPOSITORY_SCRIPT_CREATE\",\n                1004: \"POWERSHELL_REPOSITORY_SCRIPT_UPDATE\",\n                1005: \"POWERSHELL_REPOSITORY_SCRIPT_DELETE\",\n                1006: \"POWERSHELL_REPOSITORY_USER_CREATE\",\n                1007: \"POWERSHELL_REPOSITORY_USER_UPDATE\",\n                1008: \"POWERSHELL_REPOSITORY_USER_DELETE\",\n                1100: \"RMM_SESSION_CREATE\",\n                1102: \"RMM_SESSION_DELETE\",\n                1200: \"SCHEDULED_TASK_CREATE\",\n                1201: \"SCHEDULED_TASK_UPDATE\",\n                1202: \"SCHEDULED_TASK_DELETE\",\n                1203: \"SCHEDULED_TASK_TRIGGER_CREATE\",\n                1204: \"SCHEDULED_TASK_TRIGGER_UPDATE\",\n                1205: \"SCHEDULED_TASK_TRIGGER_DELETE\",\n            },\n            S2N: {\n                AGENT_SETTING: 0,\n                AGENT_PROPERTY: 1,\n                AGENT_CREATE: 2,\n                AGENT_DELETE: 3,\n                AGENT_GENERIC: 4,\n                AGENT_TAG_ADD: 22,\n                AGENT_TAG_REMOVE: 23,\n                CONTAINER_SETTING: 100,\n                CONTAINER_PROPERTY: 101,\n                CONTAINER_CREATE: 102,\n                CONTAINER_DELETE: 103,\n                CONTAINER_GENERIC: 104,\n                CONTAINER_INVENTORY: 105,\n                CONTAINER_REMOTEACCESS: 106,\n                CONTAINER_REMOTEACCESSPERFORMED: 107,\n                CONTAINER_POWERSHELLACCESS: 108,\n                CONTAINER_POWERSHELLACCESSPERFORMED: 109,\n                CONTAINER_SYSTEMSHUTDOWN: 110,\n                CONTAINER_TAG_ADD: 122,\n                CONTAINER_TAG_REMOVE: 123,\n                NOTE_CREATE: 202,\n                NOTE_DELETE: 203,\n                NOTIFY_SETTING: 300,\n                NOTIFY_CREATE: 302,\n                NOTIFY_DELETE: 303,\n                NOTIFY_SENT_OK: 310,\n                NOTIFY_SENT_ERROR: 311,\n                REPORT_CREATE: 402,\n                REPORT_DELETE: 403,\n                REPORT_TEMPLATE_CHANGE: 410,\n                REPORT_TEMPLATE_CREATE: 412,\n                REPORT_TEMPLATE_DELETE: 413,\n                USER_TWOFACTOR_ENABLE: 502,\n                USER_TWOFACTOR_DISABLE: 503,\n                COMPLIANCE_CONFIG_CHANGE: 600,\n                COMPLIANCE_CONFIG_CREATE: 602,\n                COMPLIANCE_CONFIG_DELETE: 603,\n                TAG_CHANGE: 700,\n                TAG_CREATE: 702,\n                TAG_DELETE: 703,\n                PM_CONFIG_CHANGE: 800,\n                PM_CONFIG_CREATE: 802,\n                PM_CONFIG_DELETE: 803,\n                VAULT_CREATE: 900,\n                VAULT_UPDATE: 901,\n                VAULT_DELETE: 902,\n                VAULT_RESTORE: 903,\n                VAULT_ENTRY_CREATE: 904,\n                VAULT_ENTRY_UPDATE: 905,\n                VAULT_ENTRY_DELETE: 906,\n                VAULT_USER_CREATE: 907,\n                VAULT_USER_UPDATE: 908,\n                VAULT_USER_DELETE: 909,\n                POWERSHELL_REPOSITORY_CREATE: 1000,\n                POWERSHELL_REPOSITORY_UPDATE: 1001,\n                POWERSHELL_REPOSITORY_DELETE: 1002,\n                POWERSHELL_REPOSITORY_SCRIPT_CREATE: 1003,\n                POWERSHELL_REPOSITORY_SCRIPT_UPDATE: 1004,\n                POWERSHELL_REPOSITORY_SCRIPT_DELETE: 1005,\n                POWERSHELL_REPOSITORY_USER_CREATE: 1006,\n                POWERSHELL_REPOSITORY_USER_UPDATE: 1007,\n                POWERSHELL_REPOSITORY_USER_DELETE: 1008,\n                RMM_SESSION_CREATE: 1100,\n                RMM_SESSION_DELETE: 1102,\n                SCHEDULED_TASK_CREATE: 1200,\n                SCHEDULED_TASK_UPDATE: 1201,\n                SCHEDULED_TASK_DELETE: 1202,\n                SCHEDULED_TASK_TRIGGER_CREATE: 1203,\n                SCHEDULED_TASK_TRIGGER_UPDATE: 1204,\n                SCHEDULED_TASK_TRIGGER_DELETE: 1205\n            },\n        },\n        AGENT_INCARNATION: {\n            N2S: {\n                0: \"AGENT\",\n                1: \"SHADOW\",\n                2: \"DENIED_SHADOW\",\n                3: \"TEMPLATE\",\n                4: \"EXTERNAL\",\n            },\n            S2N: {\n                \"AGENT\": 0,\n                \"SHADOW\": 1,\n                \"DENIED_SHADOW\": 2,\n                \"TEMPLATE\": 3,\n                \"EXTERNAL\": 4,\n            },\n        },\n        APIKEY_TYPE: {\n            N2S: {\n                0: \"USER\",\n                1: \"CUSTOMER\",\n                2: \"CONTAINER\",\n            },\n            S2N: {\n                \"USER\": 0,\n                \"CUSTOMER\": 1,\n                \"CONTAINER\": 2,\n            },\n        },\n        CONTAINER_TYPE: {\n            N2S: {\n                0: \"MAC\",\n                1: \"SECMAC\",\n                2: \"CAC\",\n                3: \"TEMPLATE\",\n                4: \"EXTERNAL\",\n            },\n            S2N: {\n                \"MAC\": 0,\n                \"SECMAC\": 1,\n                \"CAC\": 2,\n                \"TEMPLATE\": 3,\n                \"EXTERNAL\": 4,\n            },\n        },\n        INTERNAL_EVENT: {\n            N2S: {\n                0: \"USER_CHANGE\",\n                1: \"NODE_ADD\",\n                2: \"NODE_UPDATE\",\n                3: \"NODE_REMOVE\",\n                4: \"REMOTE_RESULT\",\n            },\n            S2N: {\n                \"USER_CHANGE\": 0,\n                \"NODE_ADD\": 1,\n                \"NODE_UPDATE\": 2,\n                \"NODE_REMOVE\": 3,\n                \"REMOTE_RESULT\": 4,\n            },\n        },\n        LICENSE_TYPE: {\n            N2S: {\n                0: \"DEACTIVATED\",\n                1: \"DEMO\",\n                2: \"FREEWARE\",\n                3: \"FULL\",\n            },\n            S2N: {\n                \"DEACTIVATED\": 0,\n                \"DEMO\": 1,\n                \"FREEWARE\": 2,\n                \"FULL\": 3,\n            },\n        },\n        NODE_STATUS: {\n            N2S: {\n                0: \"NOT_INITIALIZED\",\n                1: \"SHUTDOWN\",\n                2: \"OK\",\n                3: \"ERROR\",\n                4: \"NO_HEARTBEAT\",\n                5: \"INHERIT\",\n                6: \"WORKING\",\n            },\n            S2N: {\n                \"NOT_INITIALIZED\": 0,\n                \"SHUTDOWN\": 1,\n                \"OK\": 2,\n                \"ERROR\": 3,\n                \"NO_HEARTBEAT\": 4,\n                \"INHERIT\": 5,\n                \"WORKING\": 6,\n            },\n        },\n        NODE_TYPE: {\n            N2S: {\n                0: \"USER\",\n                1: \"CUSTOMER\",\n                2: \"CONTAINER\",\n                3: \"AGENT\",\n                4: \"TEMPLATES\",\n                5: \"TEMPLATE\",\n                6: \"TEMPLATEAGENT\",\n                7: \"CUSTOMERS\",\n                8: \"EXTERNALS\",\n                9: \"EXTERNAL_CONTAINER\",\n                10: \"EXTERNAL_AGENT\",\n                11: \"REPORT\",\n                12: \"REPORT_TEMPLATE\",\n                13: \"COMPLIANCE_CONFIG\",\n                14: \"PM_CONFIG\",\n                15: \"VAULT\",\n                16: \"POWERSHELL_REPOSITORY\",\n                17: \"SCHEDULED_TASK\",\n            },\n            S2N: {\n                \"USER\": 0,\n                \"CUSTOMER\": 1,\n                \"CONTAINER\": 2,\n                \"AGENT\": 3,\n                \"TEMPLATES\": 4,\n                \"TEMPLATE\": 5,\n                \"TEMPLATEAGENT\": 6,\n                \"CUSTOMERS\": 7,\n                \"EXTERNALS\": 8,\n                \"EXTERNAL_CONTAINER\": 9,\n                \"EXTERNAL_AGENT\": 10,\n                \"REPORT\": 11,\n                \"REPORT_TEMPLATE\": 12,\n                \"COMPLIANCE_CONFIG\": 13,\n                \"PM_CONFIG\": 14,\n                \"VAULT\": 15,\n                \"POWERSHELL_REPOSITORY\": 16,\n                \"SCHEDULED_TASK\": 17,\n            },\n        },\n        PUSH_CONTROL: {\n            N2S: {\n                0: 'ADD_OR_UPDATE_AGENT',\n                1: 'DELETE_AGENT',\n                2: 'REFRESH_AGENT',\n                3: 'UPDATE_CONTAINER',\n                4: 'RESTART_CONTAINER',\n                5: 'REMOTE_DRIVE',\n                6: 'REMOTE_SERVICE',\n                7: 'REMOTE_PROCESS',\n                8: 'REMOTE_INFORMATION',\n                9: 'REMOTE_ACTION',\n                10: 'CUSTOM_ACTION',\n                11: 'REMOTE_INSTALL',\n                12: 'REMOTE_INSTALL2',\n                13: 'REMOTE_ACTIVE_DIRECTORY',\n                14: 'SHUTDOWN_CONTAINER',\n                15: 'REFRESH_ONLINE_PROPERTIES',\n                16: 'ADD_OR_UPDATE_TASKS',\n            },\n            S2N: {\n                'ADD_OR_UPDATE_AGENT': 0,\n                'DELETE_AGENT': 1,\n                'REFRESH_AGENT': 2,\n                'UPDATE_CONTAINER': 3,\n                'RESTART_CONTAINER': 4,\n                'REMOTE_DRIVE': 5,\n                'REMOTE_SERVICE': 6,\n                'REMOTE_PROCESS': 7,\n                'REMOTE_INFORMATION': 8,\n                'REMOTE_ACTION': 9,\n                'CUSTOM_ACTION': 10,\n                'REMOTE_INSTALL': 11,\n                'REMOTE_INSTALL2': 12,\n                'REMOTE_ACTIVE_DIRECTORY': 13,\n                'SHUTDOWN_CONTAINER': 14,\n                'REFRESH_ONLINE_PROPERTIES': 15,\n                'ADD_OR_UPDATE_TASKS': 16,\n            },\n        },\n        LOGNOTE_TYPE: {\n            N2S: {\n                0: \"WORKING\",\n                1: \"REOPEN\",\n                2: \"FALSE_ALERT\",\n                3: \"HINT\",\n                4: \"CHANGE\",\n            },\n            S2N: {\n                \"WORKING\": 0,\n                \"REOPEN\": 1,\n                \"FALSE_ALERT\": 2,\n                \"HINT\": 3,\n                \"CHANGE\": 4,\n            },\n        },\n        USER_ROLE: {\n            N2S: {\n                0: \"ADMIN\",\n                1: \"USER\",\n                2: \"LEAD\",\n                3: 'INSTALLER',\n                4: 'ARCHITECT',\n                5: 'TECHIE',\n                6: 'HINTER',\n                7: 'HR',\n                8: 'REPORTING',\n                9: 'MAV',\n                10: 'PM',\n                11: 'PCVISIT',\n                12: 'POWERSHELL',\n                13: 'TANSS',\n                14: 'RMM',\n                15: 'TASKS',\n            },\n            S2N: {\n                ADMIN: 0,\n                USER: 1,\n                LEAD: 2,\n                INSTALLER: 3,\n                ARCHITECT: 4,\n                TECHIE: 5,\n                HINTER: 6,\n                HR: 7,\n                REPORTING: 8,\n                MAV: 9,\n                PM: 10,\n                PCVISIT: 11,\n                POWERSHELL: 12,\n                TANSS: 13,\n                RMM: 14,\n                TASKS: 15,\n            },\n        },\n    }\n\n    angular.module('ngSeApi').factory('SeaTypes', [\n        function () {\n            return SE_TYPES;\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\n            var request = new SeaRequest('agent/{aId}');\n                \n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function update(agent) {\n                return request.put(agent);\n            }\n\n            function destroy(aId) {\n                return request.del({\n                    aId: aId\n                });\n            }\n\n            return {\n                /**\n                 * create agent\n                 * @param {Object} params\n                 * @config {String} [parentId]\n                 * @config {String} [type]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                copy: seaAgentMisc.copy,\n\n                get: function (aId) {\n                    return get(aId);\n                },\n\n                /**\n                 * update agent\n                 * @param {Object} agent\n                 * @config {String} [aId]\n                 * @config {String} [name]\n                 * @config {Number} [interval]\n                 */\n                update: function (agent) {\n                    return update(agent);\n                },\n\n                destroy: function (aId) {\n                    return destroy(aId);\n                },\n\n                note: seaAgentNote,\n                actionlog: seaAgentMisc.actionlog,\n                chart: seaAgentMisc.chart,\n                notification: seaAgentNotification,\n                setting: seaAgentSetting,\n                state: seaAgentState,\n                category: seaAgentMisc.category,\n                restart: seaAgentMisc.restart,\n                tag: seaAgentTag,\n                type: seaAgentType,\n                events: seaAgentMisc.events,\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\n        function seaAgentMisc(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/{action}');\n            var requestMicroService = new SeaRequest('agent/{aId}/{action}', 'v3');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                try {\n                    entry.userName = JSON.parse(entry.userName);\n                } catch (e) {\n                    entry.userName = {\n                        email: entry.userName,\n                        sur: entry.userName\n                    };\n                }\n\n                if (entry.information) {\n                    try {\n                        entry.information = JSON.parse(entry.information);\n                    } catch (e) {\n                        entry.information = null;\n                    }\n                }\n\n                return entry;\n            }\n\n            function formatMeasurement(m) {\n                m.ts = new Date(m.name);\n                return m;\n            }\n\n            function listActionlog(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function listEvents(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.action = 'events';\n                return request.get(params);\n            }\n\n            function getChart(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.action = 'chart';\n                return request.get(params);\n            }\n\n            function copy(aId, parentId) {\n                var params = {};\n                params.aId = aId;\n                params.parentId = parentId;\n                params.action = 'copy';\n                return request.post(params);\n            }\n\n            function restart(aId) {\n                var params = {};\n                params.aId = aId;\n                params.action = 'restart';\n                return requestMicroService.post(params);\n            }\n\n            function listCategories() {\n                return request.get({}, 'agent/category');\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} aId    agent id\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} limit\n                     * @returns {Object} promise\n                     */\n                    list: function (aId, params) {\n                        return listActionlog(aId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n\n                            return entries;\n                        });\n                    }\n                },\n\n                events: {\n                    /**\n                     * list action log entries\n                     * @param   {String} aId    agent id\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} end\n                     * @returns {Object} promise\n                     */\n                    list: function (aId, params) {\n                        return listEvents(aId, params);\n                    }\n                },\n\n                chart: {\n                    /**\n                     * get chart config and values\n                     * @param   {String} aId    agent id\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} limit\n                     * @config  {Number} valueType\n                     * @returns {Object} promise\n                     */\n                    get: function (aId, params) {\n                        return getChart(aId, params).then(function (chartConfig) {\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\n\n                            return chartConfig;\n                        });\n                    }\n                },\n                category: {\n                    list: listCategories\n                },\n                /**\n                 * copy agent to a parent\n                 * @param   {String} aId\n                 * @param   {String}   parentId\n                 * @returns {Object} promise\n                 */\n                copy: function (aId, parentId) {\n                    return copy(aId, parentId);\n                },\n\n\n\n                /**\n                 * restart an agent\n                 * @param   {String} aId\n                 * @returns {Object} promise\n                 */\n                restart: function (aId) {\n                    return restart(aId);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\n    function seaAgentNote(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\n            var requestMicroService = new SeaRequest('agent/{aId}/note/{nId}', 'v3');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return requestMicroService.post(params).then(formatNote);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n        \n            function count(aId) {\n                return request.get({\n                    aId: aId,\n                    nId: 'count'\n                });\n            }\n\n            function destroy(aId, nId) {\n                return requestMicroService.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n                \n                count: function (aId) {\n                    return count(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n            var requestMicroService = new SeaRequest('agent/{aId}/notification/{nId}', 'v3');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return requestMicroService.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n        function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\n            var requestMicroService = new SeaRequest('agent/{aId}/setting/{key}', 'v3');\n            var remoteRequestMicroService = new SeaRequest('agent/{aId}/setting/{key}/remote', 'v3');\n\n            function update(setting) {\n                return request.put(setting);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function remote(param) {\n                return remoteRequest.get(param);\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                /**\n                 * load settings from remote\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [information]\n                 */\n                remote: function (param) {\n                    return remote(param);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest', 'SeaTransform', 'SeaTransformTemplate',\n        function seaAgentState(SeaRequest, SeaTransform, SeaTransformTemplate) {\n            var request = new SeaRequest('agent/{aId}/state/{method}'),\n                stateRequest = new SeaRequest('agent/{aId}/state/{sId}'),\n                hintRequest = new SeaRequest('agent/{aId}/state/{sId}/hint');\n            var requestMicroService = new SeaRequest('agent/{aId}/state/{method}', 'v3'),\n                stateRequestMicroService = new SeaRequest('agent/{aId}/state/{sId}', 'v3'),\n                hintRequestMicroService = new SeaRequest('agent/{aId}/state/{sId}/hint', 'v3');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n\n                if (state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n\n                if (state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n\n                return state;\n            }\n\n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n\n                if (hint.until) {\n                    hint.until = new Date(hint.until);\n                }\n\n                return hint;\n            }\n\n            function hint(params) {\n                var parser = new SeaTransform(SeaTransformTemplate.AGENT.STATE.HINT.CREATE);\n                var paramsParsed = parser.parse(params);\n\n                return hintRequestMicroService.post(paramsParsed).then(formatHint);\n            }\n\n            function stats(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.method = 'stats';\n\n                return request.get(params);\n            }\n\n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        if (angular.isArray(statesById)) {\n                            var n = {};\n                            n[params.aId[0]] = statesById;\n                            statesById = n;\n                        }\n\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            function get(aId, sId, params) {\n                params = params || {};\n                params.sId = sId;\n                params.aId = aId;\n\n                return stateRequest.get(params).then(function (state) {\n                    return formatState(state);\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                },\n\n                /**\n               * get state by Id\n               * @param   {String}   aId\n               * @param   {String}   sId\n               * @param {Object}\n               * @config {Boolean} [includeHints]\n               * @config {Boolean} [includeMessage]\n               * @config {Boolean} [includeRawData]\n               * @config {String} [format]\n               */\n                get: function (aId, sId, params) {\n                    return get(aId, sId, params);\n                },\n\n                /**\n                 * list agent state stats\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (aId, params) {\n                    return stats(aId, params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\n    function seaAgentNote(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\n\n            function create(params) {\n                return request.put(params);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, tId) {\n                return request.del({\n                    aId: aId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * add tag to agent\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [tId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, tId) {\n                    return destroy(aId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n            var requestFaq = new SeaRequest('agent/type/{agentType}/faq');\n\n            function format(agentKnown) {\n                if(agentKnown.updateDate) {\n                    agentKnown.updateDate = new Date(agentKnown.updateDate);\n                }\n                \n                return agentKnown;\n            }\n        \n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list(params) {\n                return request.get(params).then(function (aks) { return aks.map(format); });\n            }\n\n            function listFaq(agentType) {\n                return requestFaq.get({agentType: agentType});\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list,\n                faq: {\n                    list: function(agentType) {\n                        return listFaq(agentType);\n                    },\n                },\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest', 'seaConfig', 'SeaTransform', 'SeaTransformTemplate',\n        function seaAuth(SeaRequest, seaConfig, SeaTransform, SeaTransformTemplate) {\n            var request = new SeaRequest('auth/{action}');\n            var requestMicroService = new SeaRequest('auth/{action}', 'v3');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            function requestResetLink(params) {\n                params = params || {};\n                params.action = 'reset';\n\n                return request.get(params);\n            }\n\n            function resetPassword(params) {\n                params = params || {};\n                params.action = 'reset';\n\n                return request.post(params);\n            }\n\n            function token(params) {\n                params = params || {};\n                params.action = 'token';\n\n                return requestMicroService.post(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                },\n\n                requestResetLink: function (params) {\n                    return requestResetLink(params);\n                },\n\n                resetPassword: function (params) {\n                    return resetPassword(params);\n                },\n\n                token: function (params) {\n                    return token(params);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}/{action}');\n            var multiRequest = new SeaRequest('container/{action}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n        \n            function listAgents(cId) {\n                return request.get({\n                    cId: cId,\n                    action: 'agents'\n                });\n            }\n\n            function listProposals(cId) {\n                return multiRequest.post({\n                    cId: cId,\n                    action: 'proposal'\n                });\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            var api = {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n                \n                agent: {\n                    list: function (cId) {\n                        return listAgents(cId);\n                    }\n                },\n\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                tag: seaContainerTag,\n                template: seaContainerTemplate,\n                listProposals: listProposals,\n            };\n                \n            angular.extend(api, seaContainerMisc);\n        \n            return api;\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n        function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n            var requestMicroService = new SeaRequest('container/{cId}/{action}', 'v3');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                try {\n                    entry.userName = JSON.parse(entry.userName);\n                } catch (e) {\n                    entry.userName = {\n                        email: entry.userName,\n                        sur: entry.userName\n                    };\n                }\n\n                if (entry.information) {\n                    try {\n                        entry.information = JSON.parse(entry.information);\n                    } catch (e) {\n                        entry.information = null;\n                    }\n                }\n\n                return entry;\n            }\n\n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function listEvents(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'events';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function action(cId, action, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = action;\n                return requestMicroService.post(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n\n                            return entries;\n                        });\n                    }\n                },\n\n                events: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} start\n                     * @config  {Number} end\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listEvents(cId, params);\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    },\n\n                    getFileLink: function (cId, params) {\n                        params = params || {};\n                        params.cId = cId;\n                        params.action = 'inventory';\n\n                        return request.formatUrl(params);\n                    }\n                },\n\n                /**\n                 * restart a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                restart: function (cId) {\n                    return action(cId, 'restart');\n                },\n\n                /**\n                 * stop a container\n                 * @param   {String} cId\n                 * @param   {Int}    until timestamp\n                 * @returns {Object} promise\n                 */\n                stop: function (cId, until) {\n                    return action(cId, 'stop', {\n                        until: until\n                    });\n                },\n\n                /**\n                 * start a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                start: function (cId) {\n                    return action(cId, 'start');\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n            var requestMicroService = new SeaRequest('container/{cId}/note/{nId}', 'v3')\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return requestMicroService.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function count(cId) {\n                return request.get({\n                    cId: cId,\n                    nId: 'count'\n                });\n            }\n        \n            function destroy(cId, nId) {\n                return requestMicroService.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n                \n                count: function (cId) {\n                    return count(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n            var requestMicroService = new SeaRequest('container/{cId}/notification/{nId}', 'v3');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return requestMicroService.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n            var requestMicroService = new SeaRequest('container/{cId}/proposal/{pId}', 'v3');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return requestMicroService.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest', 'SeaTransform', 'SeaTransformTemplate',\n        function seaContainerState(SeaRequest, SeaTransform, SeaTransformTemplate) {\n            var request = new SeaRequest('container/{cId}/state/{method}'),\n                stateRequest = new SeaRequest('container/{cId}/state/{sId}'),\n                hintRequest = new SeaRequest('container/{cId}/state/{sId}/hint');\n            var requestMicroService = new SeaRequest('container/{cId}/state/{method}', 'v3'),\n                stateRequestMicroService = new SeaRequest('container/{cId}/state/{sId}', 'v3'),\n                hintRequestMicroService = new SeaRequest('container/{cId}/state/{sId}/hint', 'v3');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n\n                if (state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n\n                if (state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n\n                return state;\n            }\n\n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n\n                if (hint.until) {\n                    hint.until = new Date(hint.until);\n                }\n\n                return hint;\n            }\n\n            function hint(params) {\n                var parser = new SeaTransform(SeaTransformTemplate.CONTAINER.STATE.HINT.CREATE);\n                var paramsParsed = parser.parse(params);\n\n                return hintRequestMicroService.post(paramsParsed).then(formatHint);\n            }\n\n            function stats(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.method = 'stats';\n\n                return request.get(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        if (angular.isArray(statesById)) {\n                            var n = {};\n                            n[params.cId[0]] = statesById;\n                            statesById = n;\n                        }\n\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            function get(cId, sId, params) {\n                params = params || {};\n                params.sId = sId;\n                params.cId = cId;\n\n                return stateRequest.get(params).then(function (state) {\n                    return formatState(state);\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                },\n\n                /**\n              * get state by Id\n              * @param   {String}   cId\n              * @param   {String}   sId\n              * @param {Object}\n              * @config {Boolean} [includeHints]\n              * @config {Boolean} [includeMessage]\n              * @config {Boolean} [includeRawData]\n              * @config {String} [format]\n              */\n                get: function (cId, sId, params) {\n                    return get(cId, sId, params);\n                },\n\n                /**\n                 * list container state stats\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (cId, params) {\n                    return stats(cId, params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\n    function seaAgentNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\n\n            function create(params) {\n                return request.put(params);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, tId) {\n                return request.del({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * add tag to container\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [tId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, tId) {\n                    return destroy(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n            var requestMicroService = new SeaRequest('container/{cId}/template/{tId}', 'v3');\n\n            function create(cId) {\n                return requestMicroService.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerApiKey', ['SeaRequest',\n        function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/apiKey/{apiKey}'),\n                requestDistri = new SeaRequest('customer/apiKey/{apiKey}');\n            var requestMicroService = new SeaRequest('customer/{cId}/apiKey/{apiKey}', 'v3');\n\n            function format(apiKey) {\n                if (apiKey.validUntil) {\n                    apiKey.validUntil = new Date(apiKey.validUntil);\n                }\n\n                if (apiKey.createdOn) {\n                    apiKey.createdOn = new Date(apiKey.createdOn);\n                }\n\n                return apiKey;\n            }\n\n            function list(cId) {\n                var p;\n\n                if (!cId) {\n                    p = requestDistri.get();\n                } else {\n                    p = request.get({\n                        cId: cId\n                    });\n                }\n\n                return p.then(function (apiKeys) {\n                    angular.forEach(apiKeys, format);\n\n                    return apiKeys;\n                });\n            }\n\n            function get(cId, query) {\n                query = query || {};\n                query.cId = cId;\n\n                return request.get(query).then(format);\n            }\n\n            function destroy(cId, apiKey) {\n                return requestMicroService.del({\n                    cId: cId,\n                    apiKey: apiKey\n                });\n            }\n\n            return {\n                /**\n                 * list all api keys of a customer or all your customers\n                 * @param   {String} cId empty or customerId\n                 */\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                get: function (cId, query) {\n                    return get(cId, query);\n                },\n\n                destroy: function (cId, apiKey) {\n                    return destroy(cId, apiKey);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\n        function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/bucket/{bId}'),\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\n            var requestMicroService = new SeaRequest('customer/bucket/{bId}', 'v3'),\n                userRequestMicroService = new SeaRequest('customer/bucket/{bId}/user/{uId}', 'v3');\n\n            function create(params) {\n                return requestMicroService.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(bucket) {\n                return request.put(bucket);\n            }\n\n            function destroy(bId) {\n                return requestMicroService.del({\n                    bId: bId\n                });\n            }\n\n            function listUser(bId) {\n                return userRequest.get({\n                    bId: bId\n                });\n            }\n\n            function addUser(params) {\n                return userRequestMicroService.put(params);\n            }\n\n            function removeUser(bId, uId) {\n                return userRequestMicroService.del({\n                    bId: bId,\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * create bucket\n                 * @param {Object} params\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update bucket\n                 * @param {Object} params\n                 * @config {String} [bId]\n                 * @config {String} [name]\n                 */\n                update: function (bucket) {\n                    return update(bucket);\n                },\n\n                destroy: function (bId) {\n                    return destroy(bId);\n                },\n\n                user: {\n                    list: function (bId) {\n                        return listUser(bId);\n                    },\n\n                    /**\n                     * add user to bucket\n                     * @param {Object} params\n                     * @config {String} [bId]\n                     * @config {String} [uId]\n                     */\n                    create: function (params) {\n                        return addUser(params);\n                    },\n\n                    /**\n                     * remove user from bucket\n                     * @param {String} [bId]\n                     * @param {String} [uId]\n                     */\n                    destroy: function (bId, uId) {\n                        return removeUser(bId, uId);\n                    }\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerApiKey', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerExternalCall', 'seaCustomerLocation', 'seaCustomerManager', 'seaCustomerProperty', 'seaCustomerSetting', 'seaCustomerTag', 'seaCustomerTemplate', 'seaCustomerUsage', 'seaCustomerViewFilter',\n        function seaCustomer(SeaRequest, seaCustomerApiKey, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerExternalCall, seaCustomerLocation, seaCustomerManager, seaCustomerProperty, seaCustomerSetting, seaCustomerTag, seaCustomerTemplate, seaCustomerUsage, seaCustomerViewFilter) {\n            var request = new SeaRequest('customer/{cId}');\n            var requestMicroService = new SeaRequest('customer/{cId}', 'v3');\n\n            function list() {\n                return request.get();\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return requestMicroService.put(customer);\n            }\n            \n            function create(customer) {\n                return requestMicroService.post(customer);\n            }\n\n            return {\n                list: function () {\n                    return list();\n                },\n\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                create: function (customer) {\n                    return create(customer);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                apiKey: seaCustomerApiKey,\n                bucket: seaCustomerBucket,\n                dispatchTime: seaCustomerDispatchTime,\n                externalCall: seaCustomerExternalCall,\n                location: seaCustomerLocation,\n                manager: seaCustomerManager,\n                property: seaCustomerProperty,\n                setting: seaCustomerSetting,\n                tag: seaCustomerTag,\n                template: seaCustomerTemplate,\n                usage: seaCustomerUsage,\n                viewFilter: seaCustomerViewFilter\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n            var requestMicroService = new SeaRequest('customer/dispatch-time/{dtId}', 'v3');\n\n            function create(params) {\n                return requestMicroService.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return requestMicroService.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return requestMicroService.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerExternalCall', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var requestDistri = new SeaRequest('customer/externalCall');\n\n            function format(ecall) {\n                if(ecall.lastDate) {\n                    ecall.lastDate = new Date(ecall.lastDate);\n                }\n                \n                return ecall;\n            }\n        \n            function list() {\n                return requestDistri.get().then(function (ecalls) {\n                    angular.forEach(ecalls, format);\n                    \n                    return ecalls;\n                });\n            }\n        \n            return {\n                /**\n                 * list all external url calls of your customers\n                 */\n                list: function () {\n                    return list();\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerLocation', ['SeaRequest',\n        function seaCustomerLocation(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/location');\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(params) {\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * get location\n                 * @param {String} cId\n                 */\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update location\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {Object} [geo]\n                 * @config {Number} [geo.lat]\n                 * @config {Number} [geo.lon]\n                 * @config {Object} [geo.address]\n                 * @config {String} [geo.address.country]\n                 * @config {String} [geo.address.state]\n                 * @config {String} [geo.address.postcode]\n                 * @config {String} [geo.address.city]\n                 * @config {String} [geo.address.road]\n                 * @config {String} [geo.address.house_number]\n                 */\n                update: function (params) {\n                    return update(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerManager', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/manager/{uId}');\n            var requestMicroService = new SeaRequest('customer/{cId}/manager/{uId}', 'v3');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function addUser(cId, email) {\n                return requestMicroService.post({\n                    cId: cId,\n                    uId: email\n                });\n            }\n\n            function removeUser(cId, uId) {\n                return requestMicroService.del({\n                    cId: cId,\n                    uId: uId\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * add user as manager\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [email] email address of the user\n                 */\n                add: function (cId, email) {\n                    return addUser(cId, email);\n                },\n\n                remove: function (cId, uId) {\n                    return removeUser(cId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerProperty', ['SeaRequest',\n    function seaCustomerProperty(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/property/{key}');\n            var requestPost = new SeaRequest('customer/{cId}/property');\n            var requestMicroService = new SeaRequest('customer/{cId}/property', 'v3');\n            var requestMicroServiceKey = new SeaRequest('customer/{cId}/property/{key}', 'v3');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function create(cId, key, value) {\n                return requestMicroService.post({\n                    cId: cId,\n                    key: key,\n                    value: value\n                });\n            }\n\n            function destroy(cId, key) {\n                return requestMicroServiceKey.del({\n                    cId: cId,\n                    key: key\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * add customer property\n                 * @param {String} cId\n                 * @param {String} key\n                 * @param {String} value\n                 */\n                create: function (cId, key, value) {\n                    return create(cId, key, value);\n                },\n\n                destroy: function (cId, key) {\n                    return destroy(cId, key);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n            var requestMicroService = new SeaRequest('customer/{cId}/setting', 'v3');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return requestMicroService.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/tag/{tId}');\n            var requestMicroService = new SeaRequest('customer/tag/{tId}', 'v3');\n\n            function create(params) {\n                return requestMicroService.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(tag) {\n                return requestMicroService.put(tag);\n            }\n\n            function destroy(tId) {\n                return requestMicroService.del({\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create a tag\n                 * @param {Object} params\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update tag\n                 * @param {Object} params\n                 * @config {String} [tId]\n                 * @config {String} [name]\n                 */\n                update: function (tag) {\n                    return update(tag);\n                },\n\n                destroy: function (tId) {\n                    return destroy(tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerTemplate', ['SeaRequest',\n    function seaCustomerTemplate(SeaRequest) {\n            var request = new SeaRequest('customer/template/{tId}'),\n                requestAgent = new SeaRequest('customer/template/{tId}/agent/{aId}');\n\n            function list() {\n                return request.get();\n            }\n        \n            function listAgents(tId) {\n                return requestAgent.get({\n                    tId: tId\n                });\n            }\n\n            function destroy(tId) {\n                return request.del({\n                    tId: tId\n                });\n            }\n        \n            function destroyAgent(tId, aId) {\n                return request.del({\n                    tId: tId,\n                    aId: aId\n                });\n            }\n\n            return {\n                list: function () {\n                    return list();\n                },\n\n                destroy: function (tId) {\n                    return destroy(tId);\n                },\n                \n                agent: {\n                    list: function(tId) {\n                        return listAgents(tId);\n                    },\n                    destroy: function(tId, aId) {\n                        return destroyAgent(tId, aId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerUsage', ['SeaRequest',\n    function seaCustomerTag(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/usage'),\n                requestDistri = new SeaRequest('customer/usage');\n\n            function format(u) {\n                if (u.date) {\n                    u.date = new Date(u.date);\n                }\n\n                return u;\n            }\n\n            function list(year, month, cId) {\n                var params = {\n                    year: year,\n                    month: month\n                };\n\n                if (cId) {\n                    params.cId = cId;\n\n                }\n\n                return requestDistri.get(params).then(function (usage) {\n                    angular.forEach(usage, format);\n\n                    return usage;\n                });\n            }\n\n            return {\n                /**\n                 * list the max usage of all customers or the usage graph of a specific customer\n                 * @param   {Date} year of the required usage\n                 * @param   {Date} month of the required usage\n                 * @param   {String} cId empty or customerId\n                 */\n                list: function (year, month, cId) {\n                    return list(year, month, cId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerViewFilter', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/viewFilter/{vfId}');\n            var requestMicroService = new SeaRequest('customer/view-filter/{vfId}', 'v3');\n\n            function create(params) {\n                return requestMicroService.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(viewFilter) {\n                return requestMicroService.put(viewFilter);\n            }\n\n            function destroy(vfId) {\n                return requestMicroService.del({\n                    vfId: vfId\n                });\n            }\n\n            return {\n                /**\n                 * create viewFilter\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Object} [query]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update viewFilter\n                 * @param {Object} params\n                 * @config {String} [vfId]\n                 * @config {String} [name]\n                 * @config {Object} [query]\n                 */\n                update: function (viewFilter) {\n                    return update(viewFilter);\n                },\n\n                destroy: function (vfId) {\n                    return destroy(vfId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeLocation', ['SeaRequest',\n        function seaMeLocation(SeaRequest) {\n            var request = new SeaRequest('me/location');\n\n            function get() {\n                return request.get();\n            }\n\n            function update(params) {\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * get location\n                 */\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update location\n                 * @param {Object} params\n                 * @config {Object} [geo]\n                 * @config {Number} [geo.lat]\n                 * @config {Number} [geo.lon]\n                 * @config {Object} [geo.address]\n                 * @config {String} [geo.address.country]\n                 * @config {String} [geo.address.state]\n                 * @config {String} [geo.address.postcode]\n                 * @config {String} [geo.address.city]\n                 * @config {String} [geo.address.road]\n                 * @config {String} [geo.address.house_number]\n                 */\n                update: function (params) {\n                    return update(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeLocation', 'seaMeMobilepush', 'seaMeNotification', 'seaMeTwoFactor', 'seaMeSetting', 'SeaTransform', 'SeaTransformTemplate',\n        function seaMe(SeaRequest, seaMeLocation, seaMeMobilepush, seaMeNotification, seaMeTwoFactor, seaMeSetting, SeaTransform, SeaTransformTemplate) {\n            var request = new SeaRequest('me/{action}');\n            var requestMicroService = new SeaRequest('me/{action}', 'v3');\n\n            function _formatNode(node) {\n                ['date', 'lastDate', 'silencedUntil'].forEach(function (key) {\n                    if (node[key] && typeof (node[key]) === 'string') {\n                        node[key] = new Date(node[key]);\n                    }\n                });\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            function updatePassword(params) {\n                var parser = new SeaTransform(SeaTransformTemplate.ME.PASSWORD.UPDATE);\n                var paramsParsed = parser.parse(params);\n\n                paramsParsed = angular.extend({}, { action: 'password' }, paramsParsed);\n                return requestMicroService.put(paramsParsed);\n            }\n\n            return {\n                me: me,\n                password: {\n                    update: function (params) {\n                        return updatePassword(params);\n                    },\n                },\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                location: seaMeLocation,\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification,\n                twofactor: seaMeTwoFactor,\n                setting: seaMeSetting\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n            var requestMicroService = new SeaRequest('me/mobilepush/{handle}', 'v3');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return requestMicroService.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return requestMicroService.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n            var requestMicroService = new SeaRequest('me/notification/{nId}', 'v3');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return requestMicroService.put(notification);\n            }\n\n            function destroy(nId) {\n                return requestMicroService.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  type\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeSetting', ['SeaRequest',\n    function seaMeSetting(SeaRequest) {\n            var request = new SeaRequest('me/setting');\n            var requestAction = new SeaRequest('me/setting/{action}');\n            var requestMicroService = new SeaRequest('me/setting', 'v3');\n            var requestActionMicroService = new SeaRequest('me/setting/{action}', 'v3');\n\n            function list() {\n                return request.get();\n            }\n\n            function update(settings) {\n                settings = settings || {};\n                return requestMicroService.put(settings);\n            }\n\n            function resetSecret(password) {\n                return requestActionMicroService.post({\n                    action: 'secret/reset',\n                    password: password,\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} settings\n                 */\n                update: function (settings) {\n                    return update(settings);\n                },\n\n                secret: {\n                    reset: function(password) {\n                        return resetSecret(password);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeTwoFactor', ['SeaRequest',\n        function seaMeLocation(SeaRequest) {\n            var request = new SeaRequest('me/twofactor/{sub}');\n            var requestMicroService = new SeaRequest('me/twofactor/{sub}', 'v3');\n\n            function get() {\n                return request.get();\n            }\n\n            function getSecret(params) {\n                params = params || {};\n                params.sub = 'secret';\n                return request.get(params);\n            }\n\n            function enable(params) {\n                return requestMicroService.post(params);\n            }\n\n            function disable(params) {\n                return requestMicroService.del(params);\n            }\n\n            return {\n                /**\n                 * is two-factor enabled\n                 */\n                isEnabled: function () {\n                    return get();\n                },\n\n                /**\n                 * enable two-factor authentication\n                 * @param   {Object} params\n                 * @config  {string}  format\n                 * @returns {Object} promise\n                 */\n                getSecret: function (params) {\n                    return getSecret(params);\n                },\n\n                /**\n                 * enable two-factor authentication\n                 * @param   {Object} params\n                 * @config  {string}  password\n                 * @config  {string}  code\n                 * @returns {Object} promise\n                 */\n                enable: function (params) {\n                    return enable(params);\n                },\n\n                /**\n                 * disable two-factor authentication\n                 * @param   {Object} params\n                 * @config  {string}  password\n                 * @config  {string}  code\n                 * @returns {Object} promise\n                 */\n                disable: function (params) {\n                    return disable(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatchContainer', ['SeaRequest', 'seaPatchHelper',\n        function seaUser(SeaRequest, seaPatchHelper) {\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}')),\n                requestAction = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/{action}')),\n                requestPatchJobs = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/patch/{patchId}/jobs')),\n                requestPatch = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/patch/{patchId}'));\n\n            function get(customerId, cId, action, queryParameters) {\n                if (action) {\n                    var params = {\n                        customerId: customerId,\n                        cId: cId,\n                        action: action,\n                    };\n\n                    if (queryParameters) {\n                        params = angular.extend({}, params, queryParameters);\n                    }\n\n                    return requestAction.get(params);\n                }\n\n                return request.get({\n                    customerId: customerId,\n                    cId: cId,\n                });\n            }\n\n            function enable(customerId, cId) {\n                return requestAction.post({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'enable',\n                });\n            }\n\n            function disable(customerId, cId) {\n                return requestAction.post({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'disable',\n                });\n            }\n\n            function getJobsByPatchId(customerId, cId, queryParameters, patchId) {\n                var params = {\n                    customerId: customerId,\n                    cId: cId,\n                    patchId: patchId,\n                };\n                if (queryParameters) {\n                    params = angular.extend({}, params, queryParameters);\n                }\n                return requestPatchJobs.get(params);\n            }\n\n            function getPatchById(customerId, cId, patchId) {\n                return requestPatch.get({\n                    customerId: customerId,\n                    cId: cId,\n                    patchId: patchId,\n                });\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n                enable: function (customerId, cId) {\n                    return enable(customerId, cId);\n                },\n                disable: function (customerId, cId) {\n                    return disable(customerId, cId);\n                },\n                category: {\n                    list: function (customerId, cId) {\n                        return get(customerId, cId, 'categories');\n                    }\n                },\n                job: {\n                    list: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'jobs', queryParameters);\n                    },\n                    get: function(customerId, cId, patchId) {\n                        return getPatchById(customerId, cId, patchId);\n                    },\n                    history: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'jobs/history', queryParameters);\n                    },\n                },\n                patch: {\n                    list: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'patches', queryParameters);\n                    },\n                    get: function (customerId, cId, patchId) {\n                        return getPatchById(customerId, cId, patchId);\n                    },\n                    history: function (customerId, cId, queryParameters) {\n                        return get(customerId, cId, 'patches/history', queryParameters);\n                    },\n                    job: {\n                        list: function (customerId, cId, queryParameters, patchId) {\n                            return getJobsByPatchId(customerId, cId, queryParameters, patchId);\n                        },\n                    },\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatchHelper', ['seaConfig',\n    function (seaConfig) {        \n            function getUrl(path) {\n                return [seaConfig.getPmUrl(), path].join('/');\n            }\n\n            return {\n                getUrl: getUrl\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatch', ['SeaRequest', 'seaPatchContainer', 'seaPatchViewFilter', 'seaPatchHelper',\n        function seaUser(SeaRequest, seaPatchContainer, seaPatchViewFilter, seaPatchHelper) {\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/customers')),\n            requestCategories = new SeaRequest(seaPatchHelper.getUrl('patch/categories'));\n\n            function listCustomers() {\n                return request.get();\n            }     \n\n            function listCategories() {\n                return requestCategories.get();\n            }            \n            \n            return {\n                customer: {\n                    list: listCustomers\n                },\n                category: {\n                    list: listCategories,\n                },\n                container: seaPatchContainer,\n                viewFilter: seaPatchViewFilter,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPatchViewFilter', ['SeaRequest', 'seaPatchHelper',\n        function seaUser(SeaRequest, seaPatchHelper) {\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilters')),\n                requestVf = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter/{vfId}/{action}')),\n                requestPost = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter')),\n                requestDel = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter/{vfId}'));\n\n            function get(customerId, vfId, action, queryParameters) {\n                if (vfId) {\n                    var params = {\n                        customerId: customerId,\n                        vfId: vfId,\n                        action: action,\n                    };\n\n                    if (queryParameters) {\n                        params = angular.extend({}, params, queryParameters);\n                    }\n\n                    return requestVf.get(params);\n                }\n\n                return request.get({\n                    customerId: customerId,\n                });\n            }\n\n            function post(customerId, vfId, body, action) {\n                if (vfId) {\n                    var params = angular.extend({}, { customerId: customerId, vfId: vfId, action: action }, body);\n                    return requestVf.post(params);\n                }\n\n                var params = angular.extend({}, { customerId: customerId }, body);\n                return requestPost.post(params);\n            }\n\n            function del(customerId, vfId) {\n                return requestDel.del({ customerId: customerId, vfId: vfId });\n            }\n\n            return {\n                list: function (customerId) {\n                    return get(customerId);\n                },\n                create: function (customerId, body) {\n                    return post(customerId, false, body);\n                },\n                destroy: function (customerId, vfId) {\n                    return del(customerId, vfId);\n                },\n                container: {\n                    list: function (customerId, vfId) {\n                        return get(customerId, vfId, 'containers');\n                    }\n                },\n                job: {\n                    list: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'jobs', queryParameters);\n                    },\n                    history: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'jobs/history', queryParameters);\n                    },\n                },\n                patch: {\n                    list: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'patches', queryParameters);\n                    },\n                    history: function (customerId, vfId, queryParameters) {\n                        return get(customerId, vfId, 'patches/history', queryParameters);\n                    },\n                },\n                setting: {\n                    list: function (customerId, vfId) {\n                        return get(customerId, vfId, 'settings');\n                    },\n\n                    update: function (customerId, vfId, body) {\n                        return post(customerId, vfId, body, 'settings');\n                    }\n                },\n\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellHelper', ['seaConfig',\n        function (seaConfig) {\n            function getUrl(path) {\n                return [seaConfig.getMicroServiceUrl(), seaConfig.getMicroServiceApiVersion(), 'powershell', path].join('/');\n            }\n\n            return {\n                getUrl: getUrl\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepository', ['SeaRequest', 'seaPowerShellHelper', 'seaPowerShellRepositoryScript', 'seaPowerShellRepositoryUser', 'seaPowerShellRepositoryUtil',\n        function (SeaRequest, seaPowerShellHelper, seaPowerShellRepositoryScript, seaPowerShellRepositoryUser, seaPowerShellRepositoryUtil) {\n            var request = new SeaRequest(seaPowerShellHelper.getUrl('repository'));\n            var requestRepository = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}'));\n\n            function listRepositories() {\n                return request.get();\n            }\n\n            function get(repositoryId) {\n                return requestRepository.get({\n                    repositoryId: repositoryId,\n                });\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return requestRepository.put(params);\n            }\n\n            function destroy(repositoryId) {\n                return requestRepository.del({\n                    repositoryId: repositoryId,\n                });\n            }\n\n            return {\n                list: function () {\n                    return listRepositories();\n                },\n                get: function (repositoryId) {\n                    return get(repositoryId);\n                },\n                /**\n                 * create repository\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} name\n                 * @config {String} [description]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                /**\n                 * update repository\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} name\n                 * @config {String} [description]\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                destroy: function (repositoryId) {\n                    return destroy(repositoryId);\n                },\n\n                script: seaPowerShellRepositoryScript,\n                user: seaPowerShellRepositoryUser,\n                util: seaPowerShellRepositoryUtil,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepositoryScript', ['SeaRequest', 'seaPowerShellHelper',\n        function (SeaRequest, seaPowerShellHelper) {\n            var request = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/script'));\n            var requestScripts = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/scripts'));\n            var requestScript = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/script/{scriptId}'));\n\n            function listScripts() {\n                return requestScripts.get();\n            }\n\n            function get(repositoryId, scriptId) {\n                return requestScript.get({\n                    repositoryId: repositoryId,\n                    scriptId: scriptId,\n                });\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return requestScript.put(params);\n            }\n\n            function destroy(repositoryId, scriptId) {\n                return requestScript.del({\n                    repositoryId: repositoryId,\n                    scriptId: scriptId,\n                });\n            }\n\n            return {\n                list: function () {\n                    return listScripts();\n                },\n                get: function (repositoryId, scriptId) {\n                    return get(repositoryId, scriptId);\n                },\n                /**\n                 * create script\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} name\n                 * @config {String} [description]\n                 * @config {String} script\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                /**\n                 * update script\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} scriptId\n                 * @config {String} name\n                 * @config {String} [description]\n                 * @config {String} script\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                destroy: function (repositoryId, scriptId) {\n                    return destroy(repositoryId, scriptId);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepositoryUser', ['SeaRequest', 'seaPowerShellHelper',\n        function (SeaRequest, seaPowerShellHelper) {\n            var request = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/user/{userId}'));\n\n            function add(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return request.put(params);\n            }\n\n            function remove(repositoryId, userId) {\n                return request.del({\n                    repositoryId: repositoryId,\n                    userId: userId,\n                });\n            }\n\n            return {\n                /**\n                 * add user\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} userId\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                add: function (params) {\n                    return add(params);\n                },\n                /**\n                 * update user\n                 * @param {Object} params\n                 * @config {String} repositoryId\n                 * @config {String} userId\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                remove: function (repositoryId, userId) {\n                    return remove(repositoryId, userId);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaPowerShellRepositoryUtil', ['SeaRequest', 'seaPowerShellHelper',\n        function (SeaRequest, seaPowerShellHelper) {\n            var parseRequest = new SeaRequest(seaPowerShellHelper.getUrl('script/parse'));\n            var agentsRequest = new SeaRequest(seaPowerShellHelper.getUrl('repository/{repositoryId}/script/{scriptId}/agent'));\n            var settingRequest = new SeaRequest(seaPowerShellHelper.getUrl('repository/agent/setting'));\n            var agentScriptRequest = new SeaRequest(seaPowerShellHelper.getUrl('repository/script/agent/{agentId}'));\n\n            function parseScript(script) {\n                return parseRequest.post(script);\n            }\n\n            function listAgents(repositoryId, scriptId) {\n                return agentsRequest.get({\n                    repositoryId: repositoryId,\n                    scriptId: scriptId,\n                });\n            }\n            \n            function getScriptByAgent(agentId) {\n                return agentScriptRequest.get({\n                    agentId: agentId,\n                });\n            }\n\n            function updateSettings(params) {\n                return settingRequest.put({\n                    powerShellRepositoryId: params.repositoryId,\n                    powerShellRepositoryScriptId: params.scriptId,\n                    agentId: params.agentId,\n                });\n            }\n\n            return {\n                parseScript: function (script) {\n                    return parseScript(script);\n                },\n                listAgents: function (repositoryId, scriptId) {\n                    return listAgents(repositoryId, scriptId);\n                },\n                getScriptByAgent: function (agentId) {\n                    return getScriptByAgent(agentId);\n                },\n                /**\n                * update agent settings\n                * @param {Object} params\n                * @config {String} repositoryId\n                * @config {String} scriptId\n                * @config {String} agentId\n                */\n                updateSettings: function (params) {\n                    return updateSettings(params);\n                }\n\n            }\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingAntivirus', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/virus/1.0/{section}/{action}'));\n\n            function format(container) {\n                if (!container.EventList) {\n                    return container;\n                }\n\n                container.EventList.forEach(function (job) {\n                    ['Timestamp'].forEach(function (key) {\n                        if (job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n\n                return container;\n            }\n\n            function activate(params) {\n                var customerId = params.customerId,\n                    containerConfig = params.containerConfig;\n\n                if (!angular.isArray(containerConfig)) {\n                    containerConfig = [containerConfig];\n                }\n\n                containerConfig = containerConfig.map(function (c) {\n                    return {\n                        ContainerId: c.containerId,\n                        Token: c.token\n                    };\n                });\n\n                return request.post({\n                    section: 'container',\n                    ContainerList: containerConfig\n                });\n            }\n\n            function get(customerId, cId) {\n                return list(customerId, [cId]);\n            }\n\n            function list(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                query.section = 'container';\n                query.action = 'get';\n                \n                return request.post(query);\n            }\n        \n            function getEvents(customerId, cId, paging) {\n                return listEvents(customerId, [cId], paging).then(function (history) {\n                    return (history[0] || {}).EventList;\n                });\n            }\n\n            function listEvents(customerId, containerIds, paging) {\n                var query = helper.getContainerIds(containerIds);\n                query.section = 'event';\n                query.action = 'get';\n\n                if (paging) {\n                    query.Index = paging.index;\n                    query.Count = paging.count;\n                }\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n        \n            function checkEvents(customerId, containerIds, eventIds) {\n                var query = helper.getEventIds(eventIds);\n                query.section = 'event';\n                query.action = 'check';\n                \n                return request.post(query);\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds) {\n                    return list(customerId, containerIds);\n                },\n\n                /**\n                 * activate antivirus on a client\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {Array|Object} [containerConfig]\n                 * @config {String} [config.id]\n                 * @config {String} [config.token]\n                 */\n                activate: function (params) {\n                    return activate(params);\n                },\n\n                event: {\n                    get: function (customerId, cId, paging) {\n                        return getEvents(customerId, cId, paging);\n                    },\n\n                    list: function (customerId, containerIds, paging) {\n                        return getEvents(customerId, containerIds, paging);\n                    },\n                    \n                    check: function (customerId, containerIds, eventIds) {\n                        return checkEvents(customerId, containerIds, eventIds);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingIasHelper', [ '$q', 'seaConfig',\n    function seaRemotingPcvisit($q, seaConfig) {\n            function getContainerIds(containerIds) {\n                return convertIds(containerIds, 'ContainerIdList', 'ContainerId');\n            }\n\n            function getSoftwareIds(softwareIds) {\n                return convertIds(softwareIds, 'SoftwareIdList', 'SoftwareId');\n            }\n\n            function getJobIds(jobIds) {                \n                return convertIds(jobIds, 'JobIdList', 'JobId');\n            }\n        \n            function getEventIds(eventIds) {\n                return convertIds(eventIds, 'EventIdList', 'EventId');\n            }\n        \n            function convertIds(ids, rootName, subName) {\n                if (!angular.isArray(ids)) {\n                    ids = [ids];\n                }\n\n                var query = ids.map(function (id) {\n                    var o = {};\n                    o[subName] = id;\n                    return o;\n                });\n\n                var o = {};\n                o[rootName] = query;\n                \n                return o;\n            }\n\n            function idListResult(result) {\n                if (result.Msg == 'success') {\n                    return $q.resolve(result.IdList.map(function (entry) {\n                        return entry.Id;\n                    }));\n                }\n\n                return $q.reject(new Error(result.Msg));\n            }\n        \n            function getUrl(path) {\n                return [seaConfig.getPatchUrl(), path].join('/');\n            }\n\n            return {\n                getContainerIds: getContainerIds,\n                getSoftwareIds: getSoftwareIds,\n                getJobIds: getJobIds,\n                getEventIds: getEventIds,\n                idListResult: idListResult,\n                getUrl: getUrl\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingNetwork', ['SeaRequest',\n    function seaRemotingNetwork(SeaRequest) {\n            var request = new SeaRequest('network/{customerId}/{cId}/system/{action}');\n            var requestMicroService = new SeaRequest('network/{customerId}/{cId}/system/{action}', 'v3');\n\n            function format(job) {\n                if (job && job.createdAt) {\n                    job.createdAt = new Date(job.createdAt);\n                }\n\n                return job;\n            }\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function install(params) {\n                return requestMicroService.post(params);\n            }\n        \n            function getInstallStatus(params) {\n                params = params || {};\n                \n                var customerId = params.customerId,\n                    cId = params.cId,\n                    version = params.version,\n                    jobIds = params.jobIds;\n                \n                return request.get({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'installstatus',\n                    v: version,\n                    jobIds: jobIds\n                }).then(function (jobs) {\n                   jobs.forEach(format);\n                    return jobs;\n                });\n            }\n\n            return {\n                system: {\n                    /**\n                     * list active directory of OCC Connector\n                     * @param {Object} params\n                     * @config {String} [customerId]\n                     * @config {String} [cId] ID of the OCC Connector\n                     * @config {String} [user]\n                     * @config {String} [domain]\n                     * @config {String} [password]\n                     */\n                    list: function (params) {\n                        return list(params);\n                    },\n\n                    /**\n                     * install Server-Eye on remote system\n                     * @param {Object} params\n                     * @config {String} [customerId]\n                     * @config {String} [cId] ID of the OCC Connector\n                     * @config {String} [user]\n                     * @config {String} [domain]\n                     * @config {String} [password]\n                     * @config {String} [host] Name of the host Server-Eye will be installed on\n                     */\n                    install: function (params) {\n                        return install(params);\n                    },\n\n                    /**\n                     * get the install status of install jobs\n                     * @param {Object} params\n                     * @config {String} [customerId]\n                     * @config {String} [cId] ID of the OCC Connector\n                     * @config {Array}  [jobIds]\n                     * @config {Integer} [version] remote install version\n                     */\n                    installStatus: function (params) {\n                        return getInstallStatus(params);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatch', ['$http', 'SeaRequest', 'seaRemotingIasHelper', 'seaRemotingPatchHistory', 'seaRemotingPatchInstall', 'seaRemotingPatchReboot', 'seaRemotingPatchScan', 'seaRemotingPatchSoftware',\n    function seaRemotingPcvisit($http, SeaRequest, helper, seaRemotingPatchHistory, seaRemotingPatchInstall, seaRemotingPatchReboot, seaRemotingPatchScan, seaRemotingPatchSoftware) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/{section}/{action}'));\n            var dateKeys = [\"LastScanTime\", \"LastInstallJobTime\", \"NextInstallJobTime\"];\n        \n            function format(container) {\n                dateKeys.forEach(function (key) {\n                    if(container[key]) {\n                        container[key] = new Date(container[key]);\n                    }\n                });\n                \n                return container;\n            }\n                \n            function get(customerId, cId) {\n                return list(customerId, [cId]);\n            }\n\n            function list(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n                \n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n                \n            function activate(params) {\n                var customerId = params.customerId,\n                    containerConfig = params.containerConfig,\n                    cron = params.cron;\n                \n                if(!angular.isArray(containerConfig)) {\n                    containerConfig = [ containerConfig ];\n                }\n                \n                containerConfig = containerConfig.map(function (c) {\n                    return {\n                        ContainerId: c.containerId,\n                        Token: c.token\n                    };\n                });\n                \n                return request.post({\n                    ContainerList: containerConfig,\n                    Cron: cron\n                });\n            }\n        \n            function destroy(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                \n                return request.del(query)\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds) {\n                    return list(customerId, containerIds);\n                },\n                \n                /**\n                 * activate patchmanagement on a client\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {Array|Object} [containerConfig]\n                 * @config {String} [config.id]\n                 * @config {String} [config.token]\n                 * @config {String} [cron]\n                 */\n                activate: function (params) {\n                    return activate(params);\n                },\n                deactivate: function (customerId, containerIds) {\n                    return destroy(customerId, containerIds);\n                },\n                \n                history: seaRemotingPatchHistory,\n                install: seaRemotingPatchInstall,\n                reboot: seaRemotingPatchReboot,\n                scan: seaRemotingPatchScan,\n                software: seaRemotingPatchSoftware\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPcvisit', ['SeaRequest',\n    function seaRemotingPcvisit(SeaRequest) {\n            var request = new SeaRequest('pcvisit/{customerId}/{cId}/{action}');\n\n            function format(access) {\n                if(access && access.date) {\n                    access.data = new Date(access.date);\n                }\n                \n                return access;\n            }\n        \n            function get(customerId, cId) {\n                return request.get({\n                    customerId: customerId,\n                    cId: cId\n                }).then(function (system) {\n                    format(system.lastAccess);\n                    return system;\n                });\n            }\n        \n            function start(params) {\n                params = params || {};\n                params.action = 'start';\n                \n                return request.post(params);\n            }\n\n            function isInstalled(customerId, cId) {\n                return request.get({\n                    customerId: customerId,\n                    cId: cId,\n                    action: 'check'\n                });\n            }\n\n            return {\n                get: function(customerId, cId) {\n                    return get(customerId, cId);\n                },\n                \n                /**\n                 * install pcvisit on remote system\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [cId]\n                 * @config {String} [supporterId]\n                 * @config {String} [supporterPassword]\n                 * @config {String} [user]\n                 * @config {String} [domain]\n                 * @config {String} [password]\n                 */\n                installAndStart: function (params) {\n                    return start(params);\n                },\n                \n                isInstalled: function (customerId, cId) {\n                    return isInstalled(customerId, cId);\n                },\n                \n                getConnectFileLink: function (customerId, cId) {\n                    return request.formatUrl({\n                        customerId: customerId,\n                        cId: cId,\n                        action: 'file'\n                    });\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPowershell', ['SeaRequest',\n    function seaRemotingPowershell(SeaRequest) {\n            var request = new SeaRequest('powershell/{customerId}/{cId}/{action}', 'v3');\n        \n            function start(params) {\n                params = params || {};\n                params.action = 'start';\n                \n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * start a powershell session on a remote machine\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [cId]\n                 */\n                start: function (params) {\n                    return start(params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemoting', ['SeaRequest', 'seaRemotingPcvisit', 'seaRemotingNetwork', 'seaRemotingAntivirus', 'seaRemotingPatch', 'seaRemotingPowershell',\n        function seaRemoting(SeaRequest, seaRemotingPcvisit, seaRemotingNetwork, seaRemotingAntivirus, seaRemotingPatch, seaRemotingPowershell) {\n            var shutdownRequest = new SeaRequest('shutdown/{customerId}/{containerId}');\n\n            function shutdown(customerId, containerId, credentials, force, reboot) {\n                return shutdownRequest.post({\n                    customerId: customerId,\n                    containerId: containerId,\n                    force: force,\n                    reboot: reboot,\n                    user: credentials.user,\n                    password: credentials.password,\n                    domain: credentials.domain,\n                });\n            }\n\n            return {\n                antivirus: seaRemotingAntivirus,\n                pcvisit: seaRemotingPcvisit,\n                powershell: seaRemotingPowershell,\n                network: seaRemotingNetwork,\n                patch: seaRemotingPatch,\n                shutdown: function (customerId, containerId, credentials, force, reboot) {\n                    return shutdown(customerId, containerId, credentials, force, reboot);\n                }\n            };\n        }]);\n})();","","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaReporting', ['SeaRequest', 'seaReportingTemplate',\n    function seaCustomer(SeaRequest, seaReportingTemplate) {\n            var request = new SeaRequest('reporting/{cId}/report'),\n                reportRequest = new SeaRequest('reporting/{cId}/report/{rId}');\n            var requestMicroService = new SeaRequest('reporting/{cId}/report', 'v3'),\n                reportRequestMicroService = new SeaRequest('reporting/{cId}/report/{rId}', 'v3');\n\n            function formatReport(report) {\n                ['startDate', 'lastDate', 'nextDate'].forEach(function (prop) {\n                    if(report[prop]) {\n                        report[prop] = new Date(report[prop]);\n                    }\n                });\n                \n                if(report.history) {\n                    report.history.forEach(function (generated) {\n                        generated.generatedDate = new Date(generated.generatedDate);\n                    });\n                }\n                \n                return report;\n            }\n        \n            function create(params) {\n                return requestMicroService.post(params);\n            }\n        \n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (reports) {\n                    reports.forEach(formatReport);\n                    return reports;\n                });\n            }\n        \n            function listTypes(cId) {\n                return reportRequest.get({\n                    cId: cId,\n                    rId: 'type'\n                });\n            }\n\n            function get(cId, rId) {\n                return reportRequest.get({\n                    cId: cId,\n                    rId: rId\n                }).then(function (report) {\n                    return formatReport(report);\n                });\n            }\n        \n            function destroy(cId, rId) {\n                return requestMicroService.del({\n                    cId: cId,\n                    rId: rId\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                type: {\n                    list: function (cId) {\n                        return listTypes(cId);\n                    }\n                },\n                \n                report: {\n                    get: function (cId, rId) {\n                        return get(cId, rId);\n                    },\n                    \n                    /**\n                     * create report\n                     * @param {Object} params\n                     * @config {String} [cId]\n                     * @config {String} [rtId]\n                     * @config {String} [repeatCron]\n                     * @config {String} [recipients]\n                     */\n                    create: function(params) {\n                        return create(params);\n                    },\n                    \n                    destroy: function (cId, rId) {\n                        return destroy(cId, rId);\n                    }\n                },\n\n                template: seaReportingTemplate\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaReportingTemplate', ['SeaRequest',\n        function seaReportingTemplate(SeaRequest) {\n            var request = new SeaRequest('reporting/template/{rtId}');\n            var requestMicroService = new SeaRequest('reporting/template/{rtId}', 'v3');\n\n            function create(params) {\n                return requestMicroService.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function get(rId) {\n                return request.get({\n                    rtId: rtId\n                });\n            }\n\n            function destroy(rId) {\n                return requestMicroService.del({\n                    rtId: rtId\n                });\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                get: function (rtId) {\n                    return get(rtId);\n                },\n\n                /**\n                 * create report template\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Array} [widgets]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                destroy: function (rtId) {\n                    return destroy(rtId);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaSearch', ['SeaRequest',\n        function seaSearch(SeaRequest) {\n            var request = new SeaRequest('search/{sub}');\n\n            function actionlog(params) {\n                params = params || {};\n                params.sub = 'actionlog';\n\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * search through actionlog\n                 * @param {Object} params\n                 * @config {Object} [query]\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 */\n                actionlog: function (params) {\n                    return actionlog(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserLocation', ['SeaRequest',\n        function seaUserLocation(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/location');\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n            function update(params) {\n                return request.post(params);\n            }\n\n            return {\n                /**\n                 * get location\n                 * @param {String} uId\n                 */\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update location\n                 * @param {Object} params\n                 * @config {String} [uId]\n                 * @config {Object} [geo]\n                 * @config {Number} [geo.lat]\n                 * @config {Number} [geo.lon]\n                 * @config {Object} [geo.address]\n                 * @config {String} [geo.address.country]\n                 * @config {String} [geo.address.state]\n                 * @config {String} [geo.address.postcode]\n                 * @config {String} [geo.address.city]\n                 * @config {String} [geo.address.road]\n                 * @config {String} [geo.address.house_number]\n                 */\n                update: function (params) {\n                    return update(params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n            var requestMicroService = new SeaRequest('user/{uId}/setting', 'v3');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return requestMicroService.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}', 'v3');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserLocation', 'seaUserSetting', 'seaUserSubstitude',\n        function seaUser(SeaRequest, seaUserGroup, seaUserLocation, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}'),\n                requestUser = new SeaRequest('user/{uId}/{sub}'),\n                requestCustomer = new SeaRequest('user/{uId}/customer'),\n                requestUsers = new SeaRequest('user');\n            var requestMicroService = new SeaRequest('user/{uId}', 'v3'),\n                requestUserMicroService = new SeaRequest('user/{uId}/{sub}', 'v3'),\n                requestCustomerMicroService = new SeaRequest('user/{uId}/customer', 'v3'),\n                requestUsersMicroService = new SeaRequest('user', 'v3');\n\n            function create(params) {\n                return requestMicroService.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return requestMicroService.put(user);\n            }\n\n            function destroy(uId) {\n                return requestMicroService.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n\n            function listCustomers(uId) {\n                return requestCustomer.get({\n                    uId: uId\n                });\n            }\n\n            function listUsers(cId, includeLocation) {\n                return requestUsers.get({\n                    customerId: cId,\n                    includeLocation: includeLocation\n                });\n            }\n\n            function deactivateTwoFactor(uId, password) {\n                return requestUser.del({\n                    uId: uId,\n                    password: password,\n                    sub: 'twofactor'\n                });\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n                \n                list: function(cId, includeLocation) {\n                    return listUsers(cId, includeLocation);\n                },\n                \n                group: seaUserGroup,\n                location: seaUserLocation,\n                setting: seaUserSetting,\n                substitude: seaUserSubstitude,\n                customer: {\n                    list: function (uId) {\n                        return listCustomers(uId);\n                    }\n                },\n                twofactor: {\n                    /**\n                     * deactivate two-factor\n                     * @param   {String}   uId\n                     * @param   {String}   password\n                     */\n                    deactivate: function (uId, password) {\n                        return deactivateTwoFactor(uId, password);\n                    }\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultEntry', ['SeaRequest', 'seaVaultHelper',\n        function (SeaRequest, seaVaultHelper) {\n            var request = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry'));\n            var requestEntry = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry/{eId}'));\n            var requestAction = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry/{eId}/{action}'));\n            var requestEntries = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entries'));\n            var requestAgentSetting = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/entry/{eId}/agent/{aId}/setting/{key}'));\n\n            function listEntries(vId) {\n                return requestEntries.get({\n                    vId: vId,\n                });\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(vId, eId) {\n                return requestEntry.get(vId, eId);\n            }\n\n            function update(params) {\n                return requestEntry.put(params);\n            }\n\n            function destroy(vId, eId) {\n                return requestEntry.del({ vId, eId });\n            }\n\n            function unlock(params) {\n                params = angular.extend({}, params, { action: 'unlock' });\n                return requestAction.put(params);\n            }\n\n            function updateAgentSetting(params) {\n                return requestAgentSetting.put(params);\n            }\n\n\n            return {\n                list: function (vId) {\n                    return listEntries(vId);\n                },\n\n                /**\n                 * create entry\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} name\n                 * @config {String} description\n                 * @config {String} [password]\n                 * @config {String} [privateKey]\n                 * @config {Object} credentials \n                 */\n                create: function (params) {\n                    return create(params);\n                },\n                get: function (vId, eId) {\n                    return get(vId, eId);\n                },\n\n                /**\n                 * update entry\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} eId\n                 * @config {String} name\n                 * @config {String} description\n                 * @config {String} [password]\n                 * @config {String} [privateKey]\n                 * @config {Object} credentials \n                 */\n                update: function (params) {\n                    return update(params);\n                },\n                destroy: function (vId, eId) {\n                    return destroy(vId, eId);\n                },\n                /**\n                * unlock vault\n                * @param {Object} params\n                * @config {String} vId\n                * @config {String} [password]\n                * @config {String} [privateKey]\n                */\n                unlock: function (params) {\n                    return unlock(params);\n                },\n                agent: {\n                    setting: {\n                        /**\n                        * update agent settings with vault entries\n                        * @param {Object} params\n                        * @config {String} vId   vaultId\n                        * @config {String} eId   entryId\n                        * @config {String} aId   agentId\n                        * @config {String} key   agent setting key\n                        * @config {String} [password]\n                        * @config {String} [privateKey]\n                        */\n\n                        update: function (params) {\n                            return updateAgentSetting(params);\n                        }\n                    }\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultHelper', ['seaConfig',\n    function (seaConfig) {        \n            function getUrl(path) {\n                return [seaConfig.getMicroServiceUrl(), seaConfig.getMicroServiceApiVersion(), path].join('/');\n            }\n\n            return {\n                getUrl: getUrl\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultUser', ['SeaRequest', 'seaVaultHelper',\n        function (SeaRequest, seaVaultHelper) {\n            var request = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/user/{uId}'));\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(params) {\n                return request.put(params);\n            }\n\n            function destroy(vId, uId) {\n                return request.del({\n                    vId: vId,\n                    uId: uId,\n                });\n            }\n\n            return {\n                /**\n                 * grant user access to a vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} uId\n                 * @config {String} password\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} uId\n                 * @config {String} password\n                 * @config {'ADMIN' | 'EDITOR' | 'READER'} role\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n\n                destroy: function (vId, uId) {\n                    return destroy(vId, uId);\n                },\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVaultUtil', ['SeaRequest', 'seaVaultHelper',\n        function (SeaRequest, seaVaultHelper) {\n\n            var agentsRequest = new SeaRequest(seaVaultHelper.getUrl('vault/{vaultId}/entry/{entryId}/key/{credentialKey}/agent/'));\n            var settingRequest = new SeaRequest(seaVaultHelper.getUrl('vault/{vaultId}/entry/{entryId}/agent/{agentId}/setting/{credentialKey}'));\n\n            function listAgents(vId, eId, key) {\n                return agentsRequest.get({\n                    vaultId: vId,\n                    entryId: eId,\n                    credentialKey: key,\n                });\n            }\n\n            function updateSettings(params) {\n                return settingRequest.put({\n                    vaultId: params.vId,\n                    entryId: params.eId,\n                    agentId: params.aId,\n                    credentialKey: params.key,\n                });\n            }\n\n            return {\n                listAgents: function (vId, eId, key) {\n                    return listAgents(vId, eId, key);\n                },\n                /**\n                * update agent settings with vault entries\n                * @param {Object} params\n                * @config {String} vId   vaultId\n                * @config {String} eId   entryId\n                * @config {String} aId   agentId\n                * @config {String} key   agent setting key\n                * @config {String} [password]\n                * @config {String} [privateKey]\n                * @config {String} [token]\n                */\n                updateSettings: function (params) {\n                    return updateSettings(params);\n                },\n\n            }\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaVault', ['SeaRequest', 'seaVaultHelper', 'seaVaultEntry', 'seaVaultUser', 'seaVaultUtil',\n        function (SeaRequest, seaVaultHelper, seaVaultEntry, seaVaultUser, seaVaultUtil) {\n            var requestVault = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}'));\n            var requestAction = new SeaRequest(seaVaultHelper.getUrl('vault/{vId}/{action}'));\n            var requestVaults = new SeaRequest(seaVaultHelper.getUrl('vault'));\n\n            function listVaults(queryParams) {\n                return requestVaults.get(queryParams);\n            }\n\n            function create(params) {\n                return requestVaults.post(params);\n            }\n            \n            function update(params) {\n                return requestVault.put(params);\n            }\n\n            function get(vId) {\n                return requestVault.get({\n                    vId: vId,\n                });\n            }\n\n            function destroy(vId) {\n                return requestVault.del({\n                    vId: vId\n                });\n            }\n            \n            function restore(params) {\n                params = angular.extend({}, params, {action: 'restore'});\n                return requestAction.post(params);\n            }\n           \n            function unlock(params) {\n                params = angular.extend({}, params, {action: 'unlock'});\n                return requestAction.put(params);\n            }\n\n            return {\n                list: function (queryParams) {\n                    return listVaults(queryParams);\n                },\n\n                /**\n                 * create vault\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} [userId]\n                 * @config {Boolean} showPassword\n                 * @config {String} authenticationMethod\n                 * @config {String} name\n                 * @config {String} description\n                 * @config {String} password\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (vId) {\n                    return get(vId);\n                },\n                \n                /**\n                 * update vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} [customerId]\n                 * @config {String} [distributorId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [showPassword]\n                 * @config {String} [authenticationMethod]\n                 * @config {String} [name]\n                 * @config {String} [description]\n                 * @config {String} password\n                 */\n                update: function (params) {\n                    return update(params);\n                },\n\n                destroy: function (vId) {\n                    return destroy(vId);\n                },\n                \n                /**\n                 * restore vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} restoreKey\n                 */\n                restore: function (params) {\n                    return restore(params);\n                },\n                \n                /**\n                 * unlock vault\n                 * @param {Object} params\n                 * @config {String} vId\n                 * @config {String} [password]\n                 * @config {String} [privateKey]\n                 */\n                unlock: function (params) {\n                    return unlock(params);\n                },\n                entry: seaVaultEntry,\n                user: seaVaultUser,\n                util: seaVaultUtil,\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchHistory', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n        function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/history/{action}'));\n\n            function format(container) {\n                if (!container.JobList) {\n                    return container;\n                }\n\n                container.JobList.forEach(function (job) {\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\n                        if (job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n\n                return container;\n            }\n\n            function get(customerId, cId, params) {\n                return list(customerId, [cId], params).then(function (history) {\n                    return (history[0] || {}).JobList;\n                });\n            }\n\n            function list(customerId, containerIds, params) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n\n                params = params || {};\n\n                if (params.index != null) {\n                    query.Index = params.index;\n                }\n\n                if (params.count != null) {\n                    query.Count = params.count;\n                }\n\n                if (params.from != null) {\n                    query.From = params.from;\n                }\n\n                if (params.states != null) {\n                    query.States = params.states;\n                }\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n\n            return {\n                get: function (customerId, cId, params) {\n                    return get(customerId, cId, params);\n                },\n\n                list: function (customerId, containerIds, params) {\n                    return list(customerId, containerIds, params);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchInstall', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n        function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/install/{action}'));\n\n            function format(container) {\n                if (!container.JobList) {\n                    return container;\n                }\n\n                container.JobList.forEach(function (job) {\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\n                        if (job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n\n                return container;\n            }\n\n            function get(customerId, cId) {\n                return list(customerId, [cId]).then(function (install) {\n                    return install[0];\n                });\n            }\n\n            function list(customerId, containerIds, params) {\n                var query;\n                params = params || {};\n\n                if (params.jobIds) {\n                    query = helper.getJobIds(params.jobIds);\n                    query.action = 'software';\n                } else {\n                    query = helper.getContainerIds(containerIds);\n                    query.action = 'get';\n                }\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n\n            function create(params) {\n                var customerId = params.customerId,\n                    userId = params.userId,\n                    containerId = params.containerId,\n                    categories = params.categories,\n                    software = params.softwareId,\n                    cron = params.cron,\n                    updateManualRelease = params.updateManualRelease,\n                    postInstall = params.postInstall;\n\n                var reqParams = {\n                    Cron: cron,\n                    UserId: userId\n                };\n\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\n\n                if (categories) {\n                    reqParams.CategoryList = categories;\n                }\n                if (software) {\n                    reqParams = angular.extend(reqParams, helper.getSoftwareIds(software));\n                }\n                if (updateManualRelease != null) {\n                    reqParams.InstallManualReleaseSW = updateManualRelease;\n                }\n                if (postInstall == null) {\n                    postInstall = 'NOTHING';\n                }\n\n                reqParams.PostAction = postInstall;\n\n                return request.post(reqParams).then(helper.idListResult);\n            }\n\n            function destroy(customerId, jobId) {\n                var query = helper.getJobIds(jobId);\n\n                return request.del(query).then(helper.idListResult);\n            }\n\n            function getSoftware(customerId, jobId) {\n                return listSoftware(customerId, [jobId]).then(function (install) {\n                    return (install[0] || {});\n                });\n            }\n\n            function listSoftware(customerId, jobIds) {\n                var query = helper.getJobIds(jobIds);\n                query.action = 'software';\n\n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds, params) {\n                    return list(customerId, containerIds, params);\n                },\n\n                /**\n                 * create scan job\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String|Array} [containerId]\n                 * @config {String|Array} [softwareId]\n                 * @config {Array} [categories]\n                 * @config {String} [cron]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                destroy: function (customerId, jobId) {\n                    return destroy(customerId, jobId);\n                },\n\n                getSoftware: function (customerId, jobId) {\n                    return getSoftware(customerId, jobId);\n                },\n\n                listSoftware: function (customerId, jobIds) {\n                    return listSoftware(customerId, jobIds);\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchReboot', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/reboot'));\n\n            function create(params) {\n                var customerId = params.customerId,\n                    userId = params.userId,\n                    containerId = params.containerId,\n                    cron = params.cron,\n                    action = params.action;\n\n                var reqParams = {\n                    Cron: cron,\n                    Action: action,\n                    UserId: userId\n                };\n\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\n\n                return request.post(reqParams).then(helper.idListResult);\n            }\n\n            function destroy(customerId, jobId) {\n                var query = helper.getJobIds(jobId);\n\n                return request.del(query).then(helper.idListResult);\n            }\n\n            return {\n                /**\n                 * create reboot job\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String|Array} [containerId]\n                 * @config {String} [action]\n                 * @config {String} [cron]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                destroy: function (customerId, jobId) {\n                    return destroy(customerId, jobId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchScan', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/scan/{action}'));\n        \n            function format(container) {\n                if(!container.JobList) {\n                    return container;\n                }\n                \n                container.JobList.forEach(function (job) {\n                    ['StartTime', 'EndTime'].forEach(function (key) {\n                        if(job[key]) {\n                            job[key] = new Date(job[key]);\n                        }\n                    });\n                });\n                \n                return container;\n            }\n                \n            function get(customerId, cId) {\n                return list(customerId, [cId]).then(function (scan) {\n                    return scan[0];\n                });\n            }\n\n            function list(customerId, containerIds) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n                \n                return request.post(query).then(function (containers) {\n                    containers.forEach(format);\n                    return containers;\n                });\n            }\n        \n            function create(params) {\n                var query = helper.getContainerIds(params.containerIds);\n                query.Cron = params.cron;\n                \n                return request.post(query).then(helper.idListResult);\n            }\n\n            return {\n                get: function (customerId, cId) {\n                    return get(customerId, cId);\n                },\n\n                list: function (customerId, containerIds) {\n                    return list(customerId, containerIds);\n                },\n                \n                /**\n                 * create scan job\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String|Array} [containerIds]\n                 * @config {String} [cron]\n                 */\n                create: function (params) {\n                    return create(params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaRemotingPatchSoftware', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/software/{action}')),\n                requestSoftware = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/software/{method}/{action}'));\n\n            function get(customerId, softwareId) {\n                var query = helper.getSoftwareIds(softwareId);\n                query.method = 'get';\n\n                return requestSoftware.post(query).then(function (result) { return result[0]; });\n            }\n        \n            function getByContainer(customerId, cId, params) {\n                return listByContainer(customerId, [cId], params).then(function (software) {\n                    return software[0];\n                });\n            }\n\n            function listByContainer(customerId, containerIds, params) {\n                var query = helper.getContainerIds(containerIds);\n                query.action = 'get';\n\n                params = params || {};\n\n                if (params.installed == null) {\n                    query.Installed = 'BOTH';\n                } else {\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\n                }\n\n                if (params.blocked == null) {\n                    query.Blocked = 'BOTH';\n                } else {\n                    query.Blocked = params.blocked ? 'TRUE' : 'FALSE';\n                }\n\n                return request.post(query);\n            }\n\n            function has(customerId, containerIds, softwareIds, params) {\n                var query = helper.getContainerIds(containerIds);\n                query.SoftwareIdList = helper.getSoftwareIds(softwareIds).SoftwareIdList;\n                query.method = 'container';\n\n                params = params || {};\n\n                if (params.installed == null) {\n                    query.Installed = 'BOTH';\n                } else {\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\n                }\n\n                return requestSoftware.post(query);\n            }\n\n            function block(customerId, containerIds, softwareIds, isBlocked) {\n                var query = angular.extend(\n                    helper.getContainerIds(containerIds),\n                    helper.getSoftwareIds(softwareIds)\n                );\n                query.action = 'block';\n                query.Blocked = isBlocked;\n\n                return request.post(query).then(helper.idListResult);\n            }\n\n            return {\n                container: {\n                    /**\n                     * list software of container\n                     * @param {String} customerId\n                     * @param {String} containerId\n                     * @param {Object} params\n                     * @config {Boolean} [installed]\n                     * @config {Boolean} [blocked]\n                     */\n                    get: function (customerId, containerId, params) {\n                        return getByContainer(customerId, containerId, params);\n                    },\n\n                    list: function (customerId, containerIds, params) {\n                        return listByContainer(customerId, containerIds, params);\n                    }\n                },\n\n                get: function(customerId, softwareId) {\n                    return get(customerId, softwareId);\n                },\n                \n                /**\n                 * find out if a container has a specific software installed\n                 * @param {String} customerId\n                 * @param {String} containerId\n                 * @param {String} softwareId\n                 * @param {Object} params\n                 * @config {Boolean} [installed]\n                 */\n                has: function (customerId, containerId, softwareId, params) {\n                    return has(customerId, containerId, softwareId, params);\n                },\n\n                /**\n                 * block software on containers\n                 * @param   {String}   customerId   \n                 * @param   {String|Array}   containerIds \n                 * @param   {String|Array}   softwareIds  \n                 * @param   {Boolean}  isBlocked\n                 */\n                block: function (customerId, containerIds, softwareIds, isBlocked) {\n                    return block(customerId, containerIds, softwareIds, isBlocked);\n                }\n            };\n    }]);\n})();"],"sourceRoot":"/source/"}