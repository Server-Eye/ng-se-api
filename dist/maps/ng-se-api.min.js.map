{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/template.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/setting.js","src/customer/tag.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey","factory","SeaRequest","seaConfig","$q","$http","urlPath","prototype","formatUrl","url","params","keys","Object","i","length","regex","RegExp","test","replace","send","method","fullUrl","deferred","defer","conf","copy","data","then","resp","resolve","err","reject","promise","get","post","put","del","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","type","formatActionlog","entry","changeDate","Date","changed","JSON","parse","userName","listActionlog","action","getChart","parentId","listCategories","list","entries","forEach","formatNote","postedOn","notes","nId","formatState","date","lastDate","hint","isArray","statesById","key","states","listSettings","akId","createApiKey","login","logout","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTemplate","formatContainer","container","lastBootUpTime","cId","inventory","pcvisit","proposal","template","getInventory","connectPcvisit","connect","accept","pId","deny","settings","assign","tId","seaGroupSetting","seaGroupUser","gId","group","user","addUser","uId","removeUser","add","remove","seaCustomerSetting","seaCustomerDispatchTime","seaCustomerTag","customer","dispatchTime","tag","dtId","disptagatchTime","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","indexOf","splice","len","me","feed","name","nodes","mobilepush","handle","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","substitude"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(url, params) {\r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var fullUrl = seaConfig.getUrl(urlPath || this.urlPath),\r\n                    deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = angular.copy(params);\r\n                conf.url = this.formatUrl(fullUrl, params);\r\n\r\n                if (method === 'POST' || method === 'PUT') {\r\n                    conf.data = params || {};\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                entry.userName = JSON.parse(entry.userName);\r\n                return entry;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n                            \r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params);\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n    function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}');\n\n            function update(setting) {\n                return request.put(params);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n    function seaAgentState(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/state');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                return state;\n            }\n\n            function hint(setting) {\n                return request.post(params);\n            }\n\n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n\n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\n    function seaAuth(SeaRequest) {\n            var request = new SeaRequest('auth/{action}');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            return {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n\n                actionlog: seaContainerMisc.actionlog,\n                inventory: seaContainerMisc.inventory,\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                pcvisit: seaContainerMisc.pcvisit,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                template: seaContainerTemplate\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n    function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                entry.userName = JSON.parse(entry.userName);\n                return entry;\n            }\n        \n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function connectPcvisit(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'pcvisit';\n                return request.get(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n                            \n                            return entries;\n                        });\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    }\n                },\n                pcvisit: {\n                    /**\n                     * install and connect to pcvisit\n                     * @param   {String} cId\n                     * @param   {Object}   params\n                     * @config  {String}   [supporterId]\n                     * @config  {String}   [supporterPassword]\n                     * @config  {String}   [user]\n                     * @config  {String}   [password]\n                     * @config  {String}   [domain]\n                     * @returns {Object} promise\n                     */\n                    connect: function (cId, params) {\n                        return connectPcvisit(cId, params);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    aId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return request.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n    function seaContainerState(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/state');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                return state;\n            }\n\n            function hint(setting) {\n                return request.post(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n\n            function create(cId) {\n                return request.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerSetting', 'seaCustomerDispatchTime', 'seaCustomerTag',\n    function seaCustomer(SeaRequest, seaCustomerSetting, seaCustomerDispatchTime, seaCustomerTag) {\n            var request = new SeaRequest('customer/{cId}');\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return request.put(customer);\n            }\n\n            return {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                setting: seaCustomerSetting,\n                dispatchTime: seaCustomerDispatchTime,\n                tag: seaCustomerTag\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return request.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return request.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(disptagatchTime);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\n            var request = new SeaRequest('me/{action}');\n\n            function _formatNode(node) {\n                if (node.date && typeof (node.date) === 'string') {\n                    node.date = new Date(node.date);\n                }\n\n                if (node.lastDate && typeof (node.lastDate) === 'string') {\n                    node.lastDate = new Date(node.lastDate);\n                }\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            return {\n                me: me,\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return request.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function destroy(nId) {\n                return request.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  includeGroups\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return get(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return request.put(user);\n            }\n\n            function destroy(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n\n                setting: seaUserSetting,\n                group: seaUserGroup,\n                substitude: seaUserSubstitude\n            };\n    }]);\n})();"],"sourceRoot":"/source/"}