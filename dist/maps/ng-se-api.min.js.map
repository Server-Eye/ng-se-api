{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/auth/auth.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/customer/apiKey.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/externalCall.js","src/customer/manager.js","src/customer/setting.js","src/customer/tag.js","src/customer/template.js","src/customer/usage.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/remoting/pcvisit.js","src/remoting/remoting.js","src/reporting/reporting.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey","factory","SeaRequest","seaConfig","$q","$http","urlPath","prototype","formatUrl","params","url","copy","keys","Object","i","length","regex","RegExp","test","replace","send","method","deferred","defer","conf","data","then","resp","total","totalCount","resolve","err","reject","promise","get","post","put","del","VALID_EVENTS","$rootScope","fireEvent","name","argsObj","console","log","$broadcast","connect","credentials","rooms","io","error","connectUrl","reduce","p","key","sio","settings","on","onerror","onconnect","userId","roomId","forEach","evtName","ondata","sendSettings","emit","connected","hasEverBeenConnected","reconnected","evt","type","targetNode","date","Date","lastDate","toLowerCase","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentTag","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","restart","tag","formatActionlog","entry","changeDate","changed","JSON","parse","userName","formatMeasurement","m","ts","listActionlog","action","getChart","parentId","listCategories","list","entries","chartConfig","measurements","formatNote","postedOn","notes","count","nId","remote","param","remoteRequest","formatState","silencedUntil","hints","formatHint","hint","hintRequest","stats","isArray","statesById","states","tId","format","agentKnown","updateDate","listSettings","akId","aks","map","createApiKey","login","logout","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTag","seaContainerTemplate","formatContainer","container","lastBootUpTime","cId","api","proposal","template","extend","getInventory","inventory","getFileLink","stop","start","accept","pId","deny","assign","validUntil","createdOn","requestDistri","apiKeys","bucket","bId","listUser","userRequest","addUser","removeUser","uId","user","seaCustomerApiKey","seaCustomerBucket","seaCustomerDispatchTime","seaCustomerExternalCall","seaCustomerManager","seaCustomerSetting","seaCustomerTag","seaCustomerTemplate","seaCustomerUsage","customer","dispatchTime","externalCall","manager","usage","dtId","ecall","ecalls","email","add","remove","listAgents","requestAgent","destroyAgent","u","year","month","seaGroupSetting","seaGroupUser","gId","group","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","indexOf","splice","len","me","feed","nodes","mobilepush","handle","access","customerId","system","lastAccess","isInstalled","installAndStart","getConnectFileLink","seaRemotingPcvisit","pcvisit","formatReport","report","prop","history","generated","generatedDate","reports","listTypes","reportRequest","rId","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","listCustomers","requestCustomer","substitude"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(params, url) {\r\n                url = seaConfig.getUrl(url || this.urlPath)\r\n                params = params ? angular.copy(params) : {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}$/i, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                conf.url = this.formatUrl(params, urlPath);\r\n\r\n                if (method === 'POST' || method === 'PUT') {\r\n                    conf.data = params || {};\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    var total = resp.headers('x-total-count');\r\n                    \r\n                    if(total != null) {\r\n                        resp.data.totalCount = total;\r\n                    }\r\n                    \r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n            \r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    var VALID_EVENTS = ['USER_UPDATE', 'NODE_ADD', 'NODE_UPDATE', 'NODE_REMOVE', 'REMOTE_RESULT'];\r\n\r\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\r\n    function ($rootScope, seaConfig) {\r\n            var connected = false,\r\n                reconnected = false,\r\n                hasEverBeenConnected = false,\r\n                sio;\r\n\r\n            var settings = {};\r\n\r\n            function fireEvent(name, argsObj) {\r\n                argsObj = argsObj || {};\r\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\r\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\r\n            }\r\n\r\n            function connect(credentials, rooms) {\r\n                if (typeof io == 'undefined') {\r\n                    console.error('required socket.io lib not found');\r\n                    return;\r\n                }\r\n\r\n                var connectUrl = seaConfig.getBaseUrl();\r\n                \r\n                if(credentials) {\r\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\r\n                        p += [ key, credentials[key] ].join('=');\r\n                        return p;\r\n                    }, '?');\r\n                }\r\n                \r\n                sio = io(connectUrl);\r\n\r\n                settings.rooms = rooms;\r\n\r\n                sio.on('error', onerror);\r\n                sio.on('connect', onconnect);\r\n                sio.on('connecting', function () {\r\n                    console.log('connecting socket');\r\n                });\r\n                sio.on('disconnect', function () {\r\n                    console.log('disconnected socket');\r\n                    onerror('socket.disconnected');\r\n                });\r\n                sio.on('connect_error', function () {\r\n                    console.log('connect socket failed');\r\n                    onerror('socket.connect_failed');\r\n                });\r\n                sio.on('reconnect_error', function () {\r\n                    console.log('reconnect socket failed');\r\n                    onerror('socket.reconnect_failed');\r\n                });\r\n                sio.on('reconnecting', function () {\r\n                    console.log('reconnecting socket');\r\n                });\r\n\r\n                sio.on('socket:joined', function (userId, roomId) {\r\n                    console.log(userId, 'joined', roomId);\r\n                });\r\n\r\n                // server-eye events\r\n                VALID_EVENTS.forEach(function (evtName) {\r\n                    sio.on(evtName, function (data) {\r\n                        ondata(evtName, data);\r\n                    });\r\n                });\r\n            }\r\n\r\n            function sendSettings() {\r\n                sio.emit('settings', settings);\r\n            }\r\n\r\n            function onerror(err) {\r\n                console.log('socket error:', err);\r\n                connected = false;\r\n                fireEvent('error', err);\r\n            }\r\n\r\n            function onconnect() {\r\n                console.log('connected socket');\r\n                connected = true;\r\n\r\n                if (hasEverBeenConnected) {\r\n                    reconnected = true;\r\n                }\r\n\r\n                hasEverBeenConnected = true;\r\n\r\n                var evt = reconnected ? 'reconnected' : 'connected';\r\n\r\n                console.log('firing socket', evt);\r\n\r\n                sendSettings();\r\n\r\n                fireEvent(evt);\r\n            }\r\n\r\n            function ondata(type, data) {\r\n                if(data && data.targetNode) {\r\n                    if(data.targetNode.date) {\r\n                        data.targetNode.date = new Date(data.targetNode.date);\r\n                    }\r\n                    \r\n                    if(data.targetNode.lastDate) {\r\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\r\n                    }\r\n                }\r\n                \r\n                fireEvent(type.toLowerCase(), data);\r\n            }\r\n\r\n            return {\r\n                connect: function (credentials, rooms) {\r\n                    return connect(credentials, rooms);\r\n                }\r\n            }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n                \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                restart: seaAgentMisc.restart,\r\n                tag: seaAgentTag,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                entry.userName = JSON.parse(entry.userName);\r\n                return entry;\r\n            }\r\n        \r\n            function formatMeasurement(m) {\r\n                m.ts = new Date(m.name);\r\n                return m;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n        \r\n            function restart(aId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.action = 'restart';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n                            \r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params).then(function (chartConfig) {\r\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\r\n                            \r\n                            return chartConfig;\r\n                        });\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                },\r\n                \r\n                /**\r\n                 * restart an agent\r\n                 * @param   {String} aId\r\n                 * @returns {Object} promise\r\n                 */\r\n                restart: function(aId) {\r\n                    return restart(aId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n        \r\n            function count(aId) {\r\n                return request.get({\r\n                    aId: aId,\r\n                    nId: 'count'\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n                \r\n                count: function (aId) {\r\n                    return count(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n    function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\n        \n            function update(setting) {\n                return request.put(setting);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n        \n            function remote(param) {\n                return remoteRequest.get(param);\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n                \n                /**\n                 * load settings from remote\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [information]\n                 */\n                remote: function (param) {\n                    return remote(param);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n    function seaAgentState(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/state/{method}'),\n                hintRequest = new SeaRequest('agent/{aId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                \n                if(state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n                \n                if(state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n                \n                return state;\n            }\n        \n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n\n            function stats(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.method = 'stats';\n                \n                return request.get(params);\n            }\n        \n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                },\n                \n                /**\n                 * list agent state stats\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (aId, params) {\n                    return stats(aId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, tId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to agent\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, tId) {\r\n                    return destroy(aId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n\n            function format(agentKnown) {\n                if(agentKnown.updateDate) {\n                    agentKnown.updateDate = new Date(agentKnown.updateDate);\n                }\n                \n                return agentKnown;\n            }\n        \n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list(params) {\n                return request.get(params).then(function (aks) { return aks.map(format); });\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\n    function seaAuth(SeaRequest) {\n            var request = new SeaRequest('auth/{action}');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            var api = {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                tag: seaContainerTag,\n                template: seaContainerTemplate\n            };\n                \n            angular.extend(api, seaContainerMisc);\n        \n            return api;\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n    function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                entry.userName = JSON.parse(entry.userName);\n                return entry;\n            }\n\n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function action(cId, action) {\n                var params = {};\n                params.cId = cId;\n                params.action = action;\n                return request.post(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n\n                            return entries;\n                        });\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    },\n\n                    getFileLink: function (cId, params) {\n                        params = params || {};\n                        params.cId = cId;\n                        params.action = 'inventory';\n\n                        return request.formatUrl(params);\n                    }\n                },\n\n                /**\n                 * restart a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                restart: function (cId) {\n                    return action(cId, 'restart');\n                },\n\n                /**\n                 * stop a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                stop: function (cId) {\n                    return action(cId, 'stop');\n                },\n\n                /**\n                 * start a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                start: function (cId) {\n                    return action(cId, 'start');\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function count(cId) {\n                return request.get({\n                    cId: cId,\n                    nId: 'count'\n                });\n            }\n        \n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n                \n                count: function (cId) {\n                    return count(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return request.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n    function seaContainerState(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/state/{method}'),\n                hintRequest = new SeaRequest('container/{cId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                \n                if(state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n                \n                if(state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n                \n                return state;\n            }\n        \n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n        \n            function stats(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.method = 'stats';\n                \n                return request.get(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                },\n                \n                /**\n                 * list container state stats\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (cId, params) {\n                    return stats(cId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, tId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to container\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, tId) {\r\n                    return destroy(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n\n            function create(cId) {\n                return request.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerApiKey', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/apiKey/{apiKey}'),\r\n                requestDistri = new SeaRequest('customer/apiKey/{apiKey}');\r\n\r\n            function format(apiKey) {\r\n                if(apiKey.validUntil) {\r\n                    apiKey.validUntil = new Date(apiKey.validUntil);\r\n                }\r\n                \r\n                if(apiKey.createdOn) {\r\n                    apiKey.createdOn = new Date(apiKey.createdOn);\r\n                }\r\n                \r\n                return apiKey;\r\n            }\r\n        \r\n            function list(cId) {\r\n                var p;\r\n                \r\n                if(!cId) {\r\n                    p = requestDistri.get();\r\n                } else {\r\n                    p = request.get({\r\n                        cId: cId\r\n                    });\r\n                }\r\n                \r\n                return p.then(function (apiKeys) {\r\n                    angular.forEach(apiKeys, format);\r\n                    \r\n                    return apiKeys;\r\n                });\r\n            }\r\n        \r\n            function get(cId, apiKey) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    apiKey: apiKey\r\n                }).then(format);\r\n            }\r\n\r\n            function destroy(cId, apiKey) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    apiKey: apiKey\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all api keys of a customer or all your customers\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n                \r\n                get: function (cId, apiKey) {\r\n                    return get(cId, apiKey);\r\n                },\r\n\r\n                destroy: function (cId, apiKey) {\r\n                    return destroy(cId, apiKey);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/bucket/{bId}'),\r\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(bucket) {\r\n                return request.put(bucket);\r\n            }\r\n\r\n            function destroy(bId) {\r\n                return request.del({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function listUser(bId) {\r\n                return userRequest.get({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function addUser(params) {\r\n                return userRequest.put(params);\r\n            }\r\n\r\n            function removeUser(bId, uId) {\r\n                return userRequest.del({\r\n                    bId: bId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [bId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (bucket) {\r\n                    return update(bucket);\r\n                },\r\n\r\n                destroy: function (bId) {\r\n                    return destroy(bId);\r\n                },\r\n\r\n                user: {\r\n                    list: function (bId) {\r\n                        return listUser(bId);\r\n                    },\r\n\r\n                    /**\r\n                     * add user to bucket\r\n                     * @param {Object} params\r\n                     * @config {String} [bId]\r\n                     * @config {String} [uId]\r\n                     */\r\n                    create: function (params) {\r\n                        return addUser(params);\r\n                    },\r\n\r\n                    /**\r\n                     * remove user from bucket\r\n                     * @param {String} [bId]\r\n                     * @param {String} [uId]\r\n                     */\r\n                    destroy: function (bId, uId) {\r\n                        return removeUser(bId, uId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerApiKey', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerExternalCall', 'seaCustomerManager', 'seaCustomerSetting', 'seaCustomerTag', 'seaCustomerTemplate', 'seaCustomerUsage',\n    function seaCustomer(SeaRequest, seaCustomerApiKey, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerExternalCall, seaCustomerManager, seaCustomerSetting, seaCustomerTag, seaCustomerTemplate, seaCustomerUsage) {\n            var request = new SeaRequest('customer/{cId}');\n\n            function list() {\n                return request.get();\n            }\n        \n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return request.put(customer);\n            }\n\n            return {\n                list: function () {\n                    return list();\n                },\n                \n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                apiKey: seaCustomerApiKey,\n                bucket: seaCustomerBucket,\n                dispatchTime: seaCustomerDispatchTime,\n                externalCall: seaCustomerExternalCall,\n                manager: seaCustomerManager,\n                setting: seaCustomerSetting,\n                tag: seaCustomerTag,\n                template: seaCustomerTemplate,\n                usage: seaCustomerUsage\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return request.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return request.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerExternalCall', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var requestDistri = new SeaRequest('customer/externalCall');\r\n\r\n            function format(ecall) {\r\n                if(ecall.lastDate) {\r\n                    ecall.lastDate = new Date(ecall.lastDate);\r\n                }\r\n                \r\n                return ecall;\r\n            }\r\n        \r\n            function list() {\r\n                return requestDistri.get().then(function (ecalls) {\r\n                    angular.forEach(ecalls, format);\r\n                    \r\n                    return ecalls;\r\n                });\r\n            }\r\n        \r\n            return {\r\n                /**\r\n                 * list all external url calls of your customers\r\n                 */\r\n                list: function () {\r\n                    return list();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerManager', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/manager/{uId}');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function addUser(cId, email) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    uId: email\r\n                });\r\n            }\r\n\r\n            function removeUser(cId, uId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * add user as manager\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [email] email address of the user\r\n                 */\r\n                add: function (cId, email) {\r\n                    return addUser(cId, email);\r\n                },\r\n\r\n                remove: function (cId, uId) {\r\n                    return removeUser(cId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(tag);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTemplate', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/template/{tId}'),\r\n                requestAgent = new SeaRequest('customer/template/{tId}/agent/{aId}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n        \r\n            function listAgents(tId) {\r\n                return requestAgent.get({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n        \r\n            function destroyAgent(tId, aId) {\r\n                return request.del({\r\n                    tId: tId,\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                },\r\n                \r\n                agent: {\r\n                    list: function(tId) {\r\n                        return listAgents(tId);\r\n                    },\r\n                    destroy: function(tId, aId) {\r\n                        return destroyAgent(tId, aId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerUsage', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/usage'),\r\n                requestDistri = new SeaRequest('customer/usage');\r\n\r\n            function format(u) {\r\n                if (u.date) {\r\n                    u.date = new Date(u.date);\r\n                }\r\n\r\n                return u;\r\n            }\r\n\r\n            function list(year, month, cId) {\r\n                var params = {\r\n                    year: year,\r\n                    month: month\r\n                };\r\n\r\n                if (cId) {\r\n                    params.cId = cId;\r\n\r\n                }\r\n\r\n                return requestDistri.get(params).then(function (usage) {\r\n                    angular.forEach(usage, format);\r\n\r\n                    return usage;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list the max usage of all customers or the usage graph of a specific customer\r\n                 * @param   {Date} year of the required usage\r\n                 * @param   {Date} month of the required usage\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (year, month, cId) {\r\n                    return list(year, month, cId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\n            var request = new SeaRequest('me/{action}');\n\n            function _formatNode(node) {\n                ['date', 'lastDate', 'silencedUntil'].forEach(function (key) {\n                    if (node[key] && typeof (node[key]) === 'string') {\n                        node[key] = new Date(node[key]);\n                    }\n                });\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            return {\n                me: me,\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return request.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function destroy(nId) {\n                return request.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  type\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return get(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPcvisit', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('pcvisit/{customerId}/{cId}/{action}');\r\n\r\n            function format(access) {\r\n                if(access && access.date) {\r\n                    access.data = new Date(access.date);\r\n                }\r\n                \r\n                return access;\r\n            }\r\n        \r\n            function get(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId\r\n                }).then(function (system) {\r\n                    format(system.lastAccess);\r\n                    return system;\r\n                });\r\n            }\r\n        \r\n            function start(params) {\r\n                params = params || {};\r\n                params.action = 'start';\r\n                \r\n                return request.post(params);\r\n            }\r\n\r\n            function isInstalled(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'check'\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function(customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n                \r\n                /**\r\n                 * install pcvisit on remote system\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [supporterId]\r\n                 * @config {String} [supporterPassword]\r\n                 * @config {String} [user]\r\n                 * @config {String} [domain]\r\n                 * @config {String} [password]\r\n                 */\r\n                installAndStart: function (params) {\r\n                    return start(params);\r\n                },\r\n                \r\n                isInstalled: function (customerId, cId) {\r\n                    return isInstalled(customerId, cId);\r\n                },\r\n                \r\n                getConnectFileLink: function (customerId, cId) {\r\n                    return request.formatUrl({\r\n                        customerId: customerId,\r\n                        cId: cId,\r\n                        action: 'file'\r\n                    });\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemoting', ['SeaRequest', 'seaRemotingPcvisit',\r\n    function seaRemoting(SeaRequest, seaRemotingPcvisit) {\r\n            return {\r\n                pcvisit: seaRemotingPcvisit\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaReporting', ['SeaRequest',\r\n    function seaCustomer(SeaRequest) {\r\n            var request = new SeaRequest('reporting/{cId}'),\r\n                reportRequest = new SeaRequest('reporting/{cId}/{rId}');\r\n\r\n            function formatReport(report) {\r\n                ['startDate', 'lastDate', 'nextDate'].forEach(function (prop) {\r\n                    if(report[prop]) {\r\n                        report[prop] = new Date(report[prop]);\r\n                    }\r\n                });\r\n                \r\n                if(report.history) {\r\n                    report.history.forEach(function (generated) {\r\n                        generated.generatedDate = new Date(generated.generatedDate);\r\n                    });\r\n                }\r\n                \r\n                return report;\r\n            }\r\n        \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (reports) {\r\n                    reports.forEach(formatReport);\r\n                    return reports;\r\n                });\r\n            }\r\n        \r\n            function listTypes(cId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: 'type'\r\n                });\r\n            }\r\n\r\n            function get(cId, rId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: rId\r\n                }).then(function (report) {\r\n                    return formatReport(report);\r\n                });\r\n            }\r\n        \r\n            function destroy(cId, rId) {\r\n                return reportRequest.del({\r\n                    cId: cId,\r\n                    rId: rId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                type: {\r\n                    list: function (cId) {\r\n                        return listTypes(cId);\r\n                    }\r\n                },\r\n                \r\n                report: {\r\n                    get: function (cId, rId) {\r\n                        return get(cId, rId);\r\n                    },\r\n                    \r\n                    /**\r\n                     * create report\r\n                     * @param {Object} params\r\n                     * @config {String} [cId]\r\n                     * @config {String} [rtId]\r\n                     * @config {String} [targetId]\r\n                     * @config {String} [repeatInterval]\r\n                     * @config {String} [recipients]\r\n                     */\r\n                    create: function(params) {\r\n                        return create(params);\r\n                    },\r\n                    \r\n                    destroy: function (cId, rId) {\r\n                        return destroy(cId, rId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}'),\n                requestCustomer = new SeaRequest('user/{uId}/customer');\n        \n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return request.put(user);\n            }\n\n            function destroy(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n        \n            function listCustomers(uId) {\n                return requestCustomer.get({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n\n                setting: seaUserSetting,\n                group: seaUserGroup,\n                substitude: seaUserSubstitude,\n                customer: {\n                    list: function (uId) {\n                        return listCustomers(uId);\n                    }\n                }\n            };\n    }]);\n})();"],"sourceRoot":"/source/"}