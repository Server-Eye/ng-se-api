{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/auth/auth.js","src/compliance/check.js","src/compliance/compliance.js","src/compliance/config.js","src/compliance/customer.js","src/compliance/fix.js","src/compliance/violation.js","src/customer/apiKey.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/externalCall.js","src/customer/location.js","src/customer/manager.js","src/customer/property.js","src/customer/setting.js","src/customer/tag.js","src/customer/template.js","src/customer/usage.js","src/customer/viewFilter.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/me/location.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/me/setting.js","src/me/twofactor.js","src/patch/container.js","src/patch/helper.js","src/patch/patch.js","src/patch/viewFilter.js","src/remoting/antivirus.js","src/remoting/iasHelper.js","src/remoting/network.js","src/remoting/patch.js","src/remoting/pcvisit.js","src/remoting/powershell.js","src/remoting/remoting.js","src/remoting/shutdown.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/reporting/reporting.js","src/reporting/template.js","src/search/search.js","src/user/group.js","src/user/location.js","src/user/setting.js","src/user/substitude.js","src/user/user.js","src/remoting/patch/history.js","src/remoting/patch/install.js","src/remoting/patch/reboot.js","src/remoting/patch/scan.js","src/remoting/patch/software.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbjtzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                patchUrl: 'https://patch.server-eye.de',\r\n                pmUrl: 'https://pm.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n            \r\n            this.setPatchUrl = function (patchUrl) {\r\n                config.patchUrl = patchUrl;\r\n            }\r\n\r\n            this.setPmUrl = function (pmUrl) {\r\n                config.pmUrl = pmUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getPatchUrl: function () {\r\n                        return config.patchUrl;\r\n                    },\r\n                    getPmUrl: function () {\r\n                        return config.pmUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(params, url) {\r\n                url = url || this.urlPath;\r\n                \r\n                if(url.indexOf('http') < 0) {\r\n                    url = seaConfig.getUrl(url || this.urlPath)\r\n                }\r\n                \r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}/ig, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = params || {};\r\n                params = angular.copy(params);\r\n                \r\n                conf.url = this.formatUrl(params, urlPath);\r\n\r\n                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\r\n                    conf.data = params || {};\r\n                    conf.headers = {\r\n                        'Content-Type': 'application/json'\r\n                    };\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    var total = resp.headers('x-total-count');\r\n                    \r\n                    if(total != null) {\r\n                        resp.data.totalCount = total;\r\n                    }\r\n                    \r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n            \r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    var VALID_EVENTS = [\r\n        'USER_UPDATE',\r\n        'NODE_ADD',\r\n        'NODE_UPDATE',\r\n        'NODE_REMOVE',\r\n        'REMOTE_RESULT',\r\n        'user_location_change',\r\n    ];\r\n\r\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\r\n    function ($rootScope, seaConfig) {\r\n            var connected = false,\r\n                reconnected = false,\r\n                hasEverBeenConnected = false,\r\n                sio;\r\n\r\n            var settings = {};\r\n\r\n            function fireEvent(name, argsObj) {\r\n                argsObj = argsObj || {};\r\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\r\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\r\n            }\r\n\r\n            function connect(credentials, rooms) {\r\n                if (typeof io == 'undefined') {\r\n                    console.error('required socket.io lib not found');\r\n                    return;\r\n                }\r\n\r\n                var connectUrl = seaConfig.getBaseUrl();\r\n                \r\n                if(credentials) {\r\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\r\n                        p += [ key, credentials[key] ].join('=');\r\n                        return p;\r\n                    }, '?');\r\n                }\r\n                \r\n                sio = io(connectUrl);\r\n\r\n                settings.rooms = rooms;\r\n\r\n                sio.on('error', onerror);\r\n                sio.on('connect', onconnect);\r\n                sio.on('connecting', function () {\r\n                    console.log('connecting socket');\r\n                });\r\n                sio.on('disconnect', function () {\r\n                    console.log('disconnected socket');\r\n                    onerror('socket.disconnected');\r\n                });\r\n                sio.on('connect_error', function () {\r\n                    console.log('connect socket failed');\r\n                    onerror('socket.connect_failed');\r\n                });\r\n                sio.on('reconnect_error', function () {\r\n                    console.log('reconnect socket failed');\r\n                    onerror('socket.reconnect_failed');\r\n                });\r\n                sio.on('reconnecting', function () {\r\n                    console.log('reconnecting socket');\r\n                });\r\n\r\n                sio.on('socket:joined', function (userId, roomId) {\r\n                    console.log(userId, 'joined', roomId);\r\n                });\r\n\r\n                // server-eye events\r\n                VALID_EVENTS.forEach(function (evtName) {\r\n                    sio.on(evtName, function (data) {\r\n                        ondata(evtName, data);\r\n                    });\r\n                });\r\n            }\r\n\r\n            function sendSettings() {\r\n                sio.emit('settings', settings);\r\n            }\r\n\r\n            function onerror(err) {\r\n                console.log('socket error:', err);\r\n                connected = false;\r\n                fireEvent('error', err);\r\n            }\r\n\r\n            function onconnect() {\r\n                console.log('connected socket');\r\n                connected = true;\r\n\r\n                if (hasEverBeenConnected) {\r\n                    reconnected = true;\r\n                }\r\n\r\n                hasEverBeenConnected = true;\r\n\r\n                var evt = reconnected ? 'reconnected' : 'connected';\r\n\r\n                console.log('firing socket', evt);\r\n\r\n                sendSettings();\r\n\r\n                fireEvent(evt);\r\n            }\r\n\r\n            function ondata(type, data) {\r\n                if(data && data.targetNode) {\r\n                    if(data.targetNode.date) {\r\n                        data.targetNode.date = new Date(data.targetNode.date);\r\n                    }\r\n                    \r\n                    if(data.targetNode.lastDate) {\r\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\r\n                    }\r\n                }\r\n                \r\n                fireEvent(type.toLowerCase(), data);\r\n            }\r\n\r\n            return {\r\n                connect: function (credentials, rooms) {\r\n                    return connect(credentials, rooms);\r\n                }\r\n            }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n                \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                restart: seaAgentMisc.restart,\r\n                tag: seaAgentTag,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n        function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                try {\r\n                    entry.userName = JSON.parse(entry.userName);\r\n                } catch (e) {\r\n                    entry.userName = {\r\n                        email: entry.userName,\r\n                        sur: entry.userName\r\n                    };\r\n                }\r\n\r\n                if (entry.information) {\r\n                    try {\r\n                        entry.information = JSON.parse(entry.information);\r\n                    } catch (e) {\r\n                        entry.information = null;\r\n                    }\r\n                }\r\n\r\n                return entry;\r\n            }\r\n\r\n            function formatMeasurement(m) {\r\n                m.ts = new Date(m.name);\r\n                return m;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function restart(aId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.action = 'restart';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n\r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params).then(function (chartConfig) {\r\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\r\n\r\n                            return chartConfig;\r\n                        });\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                },\r\n\r\n                /**\r\n                 * restart an agent\r\n                 * @param   {String} aId\r\n                 * @returns {Object} promise\r\n                 */\r\n                restart: function (aId) {\r\n                    return restart(aId);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n        \r\n            function count(aId) {\r\n                return request.get({\r\n                    aId: aId,\r\n                    nId: 'count'\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n                \r\n                count: function (aId) {\r\n                    return count(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\r\n    function seaAgentNitification(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [aId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\r\n    function seaAgentSetting(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\r\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\r\n        \r\n            function update(setting) {\r\n                return request.put(setting);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n        \r\n            function remote(param) {\r\n                return remoteRequest.get(param);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [key]\r\n                 * @config {String} [value]\r\n                 */\r\n                update: function (setting) {\r\n                    return update(setting);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n                \r\n                /**\r\n                 * load settings from remote\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [key]\r\n                 * @config {String} [information]\r\n                 */\r\n                remote: function (param) {\r\n                    return remote(param);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\r\n    function seaAgentState(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/state/{method}'),\r\n                hintRequest = new SeaRequest('agent/{aId}/state/{sId}/hint');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                \r\n                if(state.silencedUntil) {\r\n                    state.silencedUntil = new Date(state.silencedUntil);\r\n                }\r\n                \r\n                if(state.hints) {\r\n                    angular.forEach(state.hints, formatHint);\r\n                }\r\n                \r\n                return state;\r\n            }\r\n        \r\n            function formatHint(hint) {\r\n                hint.date = new Date(hint.date);\r\n                \r\n                if(hint.until) {\r\n                    hint.until = new Date(hint.until);\r\n                }\r\n                \r\n                return hint;\r\n            }\r\n\r\n            function hint(params) {\r\n                return hintRequest.post(params).then(formatHint);\r\n            }\r\n\r\n            function stats(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.method = 'stats';\r\n                \r\n                return request.get(params);\r\n            }\r\n        \r\n            function list(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n\r\n                if (angular.isArray(params.aId)) {\r\n                    return request.post(params, 'agent/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n\r\n                        return statesById;\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list agent states\r\n                 * @param   {String}   aId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (aId, params) {\r\n                    return list(aId, params);\r\n                },\r\n                \r\n                /**\r\n                 * list agent state stats\r\n                 * @param   {String}   aId\r\n                 * @param {Object}\r\n                 * @config {Number} [start] : now\r\n                 * @config {Number} [end]   : now - 12 months\r\n                 */\r\n                stats: function (aId, params) {\r\n                    return stats(aId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, tId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to agent\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, tId) {\r\n                    return destroy(aId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\r\n    function seaAgentType(SeaRequest) {\r\n            var request = new SeaRequest('agent/type');\r\n\r\n            function format(agentKnown) {\r\n                if(agentKnown.updateDate) {\r\n                    agentKnown.updateDate = new Date(agentKnown.updateDate);\r\n                }\r\n                \r\n                return agentKnown;\r\n            }\r\n        \r\n            function listSettings(akId) {\r\n                return request.get({\r\n                    akId: akId\r\n                }, 'agent/type/{akId}/setting');\r\n            }\r\n\r\n            function list(params) {\r\n                return request.get(params).then(function (aks) { return aks.map(format); });\r\n            }\r\n\r\n            return {\r\n                setting: {\r\n                    /**\r\n                     * list settings of an agent type\r\n                     * @param {Object} params\r\n                     * @config {String} [akId]\r\n                     */\r\n                    list: function (akId) {\r\n                        return listSettings(akId);\r\n                    }\r\n                },\r\n\r\n                list: list\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\r\n    function seaAuth(SeaRequest) {\r\n            var request = new SeaRequest('auth/{action}');\r\n\r\n            function createApiKey(params) {\r\n                params = params || {};\r\n                params.action = 'key';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function login(params) {\r\n                params = params || {};\r\n                params.action = 'login';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            function logout(params) {\r\n                params = params || {};\r\n                params.action = 'logout';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create apiKey\r\n                 * @param {Object} params\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Number} [type]\r\n                 * @config {Number} [validUntil]\r\n                 * @config {Number} [maxUses]\r\n                 */\r\n                createApiKey: function (params) {\r\n                    return createApiKey(params);\r\n                },\r\n\r\n                /**\r\n                 * login\r\n                 * @param {Object} params\r\n                 * @config {String} [apiKey]\r\n                 * @config {String} [email]\r\n                 * @config {String} [password]\r\n                 * @config {Boolean} [createApiKey]\r\n                 * @config {String} [apiKeyName]\r\n                 */\r\n                login: function (params) {\r\n                    return login(params);\r\n                },\r\n\r\n                logout: function () {\r\n                    return logout();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaComplianceCheck', ['SeaRequest',\r\n        function seaComplianceCheck(SeaRequest) {\r\n            var request = new SeaRequest('compliance/check');\r\n\r\n            function get(containerId, customerId, viewFilterId) {\r\n                return request.get({\r\n                    containerId: containerId,\r\n                    customerId: customerId,\r\n                    viewFilterId: viewFilterId\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (containerId, customerId, viewFilterId) {\r\n                    return get(containerId, customerId, viewFilterId);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCompliance', ['$q', 'SeaRequest', 'seaComplianceConfig', 'seaComplianceFix', 'seaComplianceViolation', 'seaComplianceCheck', 'seaRemotingIasHelper',\r\n        function seaCompliance($q, SeaRequest, seaComplianceConfig, seaComplianceFix, seaComplianceViolation, seaComplianceCheck, helper) {\r\n            return {\r\n                config: seaComplianceConfig,\r\n                fix: seaComplianceFix,\r\n                violation: seaComplianceViolation,\r\n                check: seaComplianceCheck\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaComplianceConfig', ['$q', 'SeaRequest', 'seaComplianceCustomer', \r\n        function seaComplianceConfig($q, SeaRequest, seaComplianceCustomer) {\r\n            var request = new SeaRequest('compliance/config');\r\n\r\n            function get(viewFilterId, customerId) {\r\n                return request.get({\r\n                    viewFilterId: viewFilterId,\r\n                    customerId: customerId\r\n                });\r\n            }\r\n\r\n            function update(viewFilterId, customerId, templateId, checks) {\r\n                return request.put({\r\n                    viewFilterId: viewFilterId,\r\n                    customerId: customerId,\r\n                    templateId: templateId,\r\n                    checks: checks\r\n                });\r\n            }\r\n\r\n            function destroy(viewFilterId, customerId) {\r\n                return request.del({\r\n                    viewFilterId: viewFilterId,\r\n                    customerId: customerId\r\n                });\r\n            }\r\n\r\n            function list(viewFilterIds, customerId) {\r\n                var loopPromises = [];\r\n                angular.forEach(viewFilterIds, function (viewFilterId) {\r\n                    var deferred = $q.defer();\r\n                    loopPromises.push(deferred.promise);\r\n                    \r\n                    get(viewFilterId, customerId).then(function (res) {\r\n                        deferred.resolve(res);\r\n                    }).catch(function (e) {\r\n                        deferred.resolve(null);\r\n                    });\r\n                });\r\n\r\n                return $q.all(loopPromises);\r\n            }\r\n\r\n            return {\r\n                get: function (viewFilterId, customerId) {\r\n                    return get(viewFilterId, customerId);\r\n                },\r\n\r\n                update: function (viewFilterId, customerId, templateId, checks) {\r\n                    return update(viewFilterId, customerId, templateId, checks);\r\n                },\r\n\r\n                destroy: function (viewFilterId, customerId) {\r\n                    return destroy(viewFilterId, customerId);\r\n                },\r\n\r\n                list: function (viewFilterIds, customerId) {\r\n                    return list(viewFilterIds, customerId);\r\n                },\r\n\r\n                customer: seaComplianceCustomer\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaComplianceCustomer', ['$q', 'SeaRequest',\r\n        function seaComplianceCustomer($q, SeaRequest) {\r\n            var request = new SeaRequest('compliance/config/customer');\r\n\r\n            function get(customerIds) {\r\n                return request.get({\r\n                    customerId: customerIds\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerIds) {\r\n                    return get(customerIds);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaComplianceFix', ['SeaRequest',\r\n        function seaComplianceConfig(SeaRequest) {\r\n            var request = new SeaRequest('compliance/fix');\r\n\r\n            function update(changes) {\r\n                return request.put({\r\n                    changes: changes\r\n                });\r\n            }\r\n\r\n            return {\r\n                update: function (changes) {\r\n                    return update(changes);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaComplianceViolation', ['SeaRequest',\r\n        function seaComplianceViolation(SeaRequest) {\r\n            var request = new SeaRequest('compliance/violation');\r\n\r\n            function get(containerId, customerId, viewFilterId, messageFormat) {\r\n                return request.get({\r\n                    containerId: containerId,\r\n                    customerId: customerId,\r\n                    viewFilterId: viewFilterId,\r\n                    messageFormat: messageFormat\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (containerId, customerId, viewFilterId, messageFormat) {\r\n                    return get(containerId, customerId, viewFilterId, messageFormat);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerApiKey', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/apiKey/{apiKey}'),\r\n                requestDistri = new SeaRequest('customer/apiKey/{apiKey}');\r\n\r\n            function format(apiKey) {\r\n                if(apiKey.validUntil) {\r\n                    apiKey.validUntil = new Date(apiKey.validUntil);\r\n                }\r\n                \r\n                if(apiKey.createdOn) {\r\n                    apiKey.createdOn = new Date(apiKey.createdOn);\r\n                }\r\n                \r\n                return apiKey;\r\n            }\r\n        \r\n            function list(cId) {\r\n                var p;\r\n                \r\n                if(!cId) {\r\n                    p = requestDistri.get();\r\n                } else {\r\n                    p = request.get({\r\n                        cId: cId\r\n                    });\r\n                }\r\n                \r\n                return p.then(function (apiKeys) {\r\n                    angular.forEach(apiKeys, format);\r\n                    \r\n                    return apiKeys;\r\n                });\r\n            }\r\n        \r\n            function get(cId, query) {\r\n                query = query || {};\r\n                query.cId = cId;\r\n                \r\n                return request.get(query).then(format);\r\n            }\r\n\r\n            function destroy(cId, apiKey) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    apiKey: apiKey\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all api keys of a customer or all your customers\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n                \r\n                get: function (cId, query) {\r\n                    return get(cId, query);\r\n                },\r\n\r\n                destroy: function (cId, apiKey) {\r\n                    return destroy(cId, apiKey);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/bucket/{bId}'),\r\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(bucket) {\r\n                return request.put(bucket);\r\n            }\r\n\r\n            function destroy(bId) {\r\n                return request.del({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function listUser(bId) {\r\n                return userRequest.get({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function addUser(params) {\r\n                return userRequest.put(params);\r\n            }\r\n\r\n            function removeUser(bId, uId) {\r\n                return userRequest.del({\r\n                    bId: bId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [bId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (bucket) {\r\n                    return update(bucket);\r\n                },\r\n\r\n                destroy: function (bId) {\r\n                    return destroy(bId);\r\n                },\r\n\r\n                user: {\r\n                    list: function (bId) {\r\n                        return listUser(bId);\r\n                    },\r\n\r\n                    /**\r\n                     * add user to bucket\r\n                     * @param {Object} params\r\n                     * @config {String} [bId]\r\n                     * @config {String} [uId]\r\n                     */\r\n                    create: function (params) {\r\n                        return addUser(params);\r\n                    },\r\n\r\n                    /**\r\n                     * remove user from bucket\r\n                     * @param {String} [bId]\r\n                     * @param {String} [uId]\r\n                     */\r\n                    destroy: function (bId, uId) {\r\n                        return removeUser(bId, uId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerApiKey', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerExternalCall', 'seaCustomerLocation', 'seaCustomerManager', 'seaCustomerProperty', 'seaCustomerSetting', 'seaCustomerTag', 'seaCustomerTemplate', 'seaCustomerUsage', 'seaCustomerViewFilter',\r\n        function seaCustomer(SeaRequest, seaCustomerApiKey, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerExternalCall, seaCustomerLocation, seaCustomerManager, seaCustomerProperty, seaCustomerSetting, seaCustomerTag, seaCustomerTemplate, seaCustomerUsage, seaCustomerViewFilter) {\r\n            var request = new SeaRequest('customer/{cId}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(customer) {\r\n                return request.put(customer);\r\n            }\r\n\r\n            return {\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {Object} customer\r\n                 * @config {String} [cId]\r\n                 * @config {String} [country]\r\n                 * @config {Number} [customerNumberIntern]\r\n                 * @config {Number} [customerNumberExtern]\r\n                 * @config {String} [companyName]\r\n                 * @config {String} [street]\r\n                 * @config {String} [zipCode]\r\n                 * @config {String} [city]\r\n                 * @config {String} [email]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (customer) {\r\n                    return update(customer);\r\n                },\r\n\r\n                apiKey: seaCustomerApiKey,\r\n                bucket: seaCustomerBucket,\r\n                dispatchTime: seaCustomerDispatchTime,\r\n                externalCall: seaCustomerExternalCall,\r\n                location: seaCustomerLocation,\r\n                manager: seaCustomerManager,\r\n                property: seaCustomerProperty,\r\n                setting: seaCustomerSetting,\r\n                tag: seaCustomerTag,\r\n                template: seaCustomerTemplate,\r\n                usage: seaCustomerUsage,\r\n                viewFilter: seaCustomerViewFilter\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(dispatchTime) {\r\n                return request.put(dispatchTime);\r\n            }\r\n\r\n            function destroy(dtId) {\r\n                return request.del({\r\n                    dtId: dtId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update dispatchTime\r\n                 * @param {Object} params\r\n                 * @config {String} [dtId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [defer]\r\n                 */\r\n                update: function (dispatchTime) {\r\n                    return update(dispatchTime);\r\n                },\r\n\r\n                destroy: function (dtId) {\r\n                    return destroy(dtId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerExternalCall', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var requestDistri = new SeaRequest('customer/externalCall');\r\n\r\n            function format(ecall) {\r\n                if(ecall.lastDate) {\r\n                    ecall.lastDate = new Date(ecall.lastDate);\r\n                }\r\n                \r\n                return ecall;\r\n            }\r\n        \r\n            function list() {\r\n                return requestDistri.get().then(function (ecalls) {\r\n                    angular.forEach(ecalls, format);\r\n                    \r\n                    return ecalls;\r\n                });\r\n            }\r\n        \r\n            return {\r\n                /**\r\n                 * list all external url calls of your customers\r\n                 */\r\n                list: function () {\r\n                    return list();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerLocation', ['SeaRequest',\r\n        function seaCustomerLocation(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/location');\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * get location\r\n                 * @param {String} cId\r\n                 */\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update location\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {Object} [geo]\r\n                 * @config {Number} [geo.lat]\r\n                 * @config {Number} [geo.lon]\r\n                 * @config {Object} [geo.address]\r\n                 * @config {String} [geo.address.country]\r\n                 * @config {String} [geo.address.state]\r\n                 * @config {String} [geo.address.postcode]\r\n                 * @config {String} [geo.address.city]\r\n                 * @config {String} [geo.address.road]\r\n                 * @config {String} [geo.address.house_number]\r\n                 */\r\n                update: function (params) {\r\n                    return update(params);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerManager', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/manager/{uId}');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function addUser(cId, email) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    uId: email\r\n                });\r\n            }\r\n\r\n            function removeUser(cId, uId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * add user as manager\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [email] email address of the user\r\n                 */\r\n                add: function (cId, email) {\r\n                    return addUser(cId, email);\r\n                },\r\n\r\n                remove: function (cId, uId) {\r\n                    return removeUser(cId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerProperty', ['SeaRequest',\r\n    function seaCustomerProperty(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/property/{key}');\r\n            var requestPost = new SeaRequest('customer/{cId}/property');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function create(cId, key, value) {\r\n                return requestPost.post({\r\n                    cId: cId,\r\n                    key: key,\r\n                    value: value\r\n                });\r\n            }\r\n\r\n            function destroy(cId, key) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    key: key\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * add customer property\r\n                 * @param {String} cId\r\n                 * @param {String} key\r\n                 * @param {String} value\r\n                 */\r\n                create: function (cId, key, value) {\r\n                    return create(cId, key, value);\r\n                },\r\n\r\n                destroy: function (cId, key) {\r\n                    return destroy(cId, key);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\r\n    function seaCustomerSetting(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/setting');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function update(cId, settings) {\r\n                settings = settings || {};\r\n                settings.cId = cId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * update customer\r\n                 * @param {String} cId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (cId, settings) {\r\n                    return update(cId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(tag);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTemplate', ['SeaRequest',\r\n    function seaCustomerTemplate(SeaRequest) {\r\n            var request = new SeaRequest('customer/template/{tId}'),\r\n                requestAgent = new SeaRequest('customer/template/{tId}/agent/{aId}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n        \r\n            function listAgents(tId) {\r\n                return requestAgent.get({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n        \r\n            function destroyAgent(tId, aId) {\r\n                return request.del({\r\n                    tId: tId,\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                },\r\n                \r\n                agent: {\r\n                    list: function(tId) {\r\n                        return listAgents(tId);\r\n                    },\r\n                    destroy: function(tId, aId) {\r\n                        return destroyAgent(tId, aId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerUsage', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/usage'),\r\n                requestDistri = new SeaRequest('customer/usage');\r\n\r\n            function format(u) {\r\n                if (u.date) {\r\n                    u.date = new Date(u.date);\r\n                }\r\n\r\n                return u;\r\n            }\r\n\r\n            function list(year, month, cId) {\r\n                var params = {\r\n                    year: year,\r\n                    month: month\r\n                };\r\n\r\n                if (cId) {\r\n                    params.cId = cId;\r\n\r\n                }\r\n\r\n                return requestDistri.get(params).then(function (usage) {\r\n                    angular.forEach(usage, format);\r\n\r\n                    return usage;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list the max usage of all customers or the usage graph of a specific customer\r\n                 * @param   {Date} year of the required usage\r\n                 * @param   {Date} month of the required usage\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (year, month, cId) {\r\n                    return list(year, month, cId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerViewFilter', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/viewFilter/{vfId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(viewFilter) {\r\n                return request.put(viewFilter);\r\n            }\r\n\r\n            function destroy(vfId) {\r\n                return request.del({\r\n                    vfId: vfId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [vfId]\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                update: function (viewFilter) {\r\n                    return update(viewFilter);\r\n                },\r\n\r\n                destroy: function (vfId) {\r\n                    return destroy(vfId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\r\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\r\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\r\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\r\n            var request = new SeaRequest('container/{cId}/{action}');\r\n            var multiRequest = new SeaRequest('container/{action}');\r\n\r\n            function formatContainer(container) {\r\n                if (container.lastBootUpTime) {\r\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\r\n                }\r\n                return container;\r\n            }\r\n\r\n            function get(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(formatContainer);\r\n            }\r\n        \r\n            function listAgents(cId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    action: 'agents'\r\n                });\r\n            }\r\n\r\n            function listProposals(cId) {\r\n                return multiRequest.post({\r\n                    cId: cId,\r\n                    action: 'proposal'\r\n                });\r\n            }\r\n\r\n            function update(container) {\r\n                return request.put(container);\r\n            }\r\n\r\n            function destroy(cId) {\r\n                return request.del({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            var api = {\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update container\r\n                 * @param {Object} container\r\n                 * @config {String} [cId]\r\n                 * @config {String} [name]\r\n                 * @config {Boolean} [alertOffline]\r\n                 * @config {Boolean} [alertShutdown]\r\n                 * @config {Number} [maxHeartbeatTimeout]\r\n                 */\r\n                update: function (container) {\r\n                    return update(container);\r\n                },\r\n\r\n                destroy: function (cId) {\r\n                    return destroy(cId);\r\n                },\r\n                \r\n                agent: {\r\n                    list: function (cId) {\r\n                        return listAgents(cId);\r\n                    }\r\n                },\r\n\r\n                note: seaContainerNote,\r\n                notification: seaContainerNotification,\r\n                proposal: seaContainerProposal,\r\n                state: seaContainerState,\r\n                tag: seaContainerTag,\r\n                template: seaContainerTemplate,\r\n                listProposals: listProposals,\r\n            };\r\n                \r\n            angular.extend(api, seaContainerMisc);\r\n        \r\n            return api;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\r\n        function seaContainerMisc(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                try {\r\n                    entry.userName = JSON.parse(entry.userName);\r\n                } catch (e) {\r\n                    entry.userName = {\r\n                        email: entry.userName,\r\n                        sur: entry.userName\r\n                    };\r\n                }\r\n\r\n                if (entry.information) {\r\n                    try {\r\n                        entry.information = JSON.parse(entry.information);\r\n                    } catch (e) {\r\n                        entry.information = null;\r\n                    }\r\n                }\r\n\r\n                return entry;\r\n            }\r\n\r\n            function listActionlog(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getInventory(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = 'inventory';\r\n                return request.get(params);\r\n            }\r\n\r\n            function action(cId, action, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.action = action;\r\n                return request.post(params);\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} cId\r\n                     * @param   {Object} params\r\n                     * @config  {Number} [start]\r\n                     * @config  {Number} [limit]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (cId, params) {\r\n                        return listActionlog(cId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n\r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n\r\n                inventory: {\r\n                    /**\r\n                     * get inventory of the container\r\n                     * @param   {String}   cId\r\n                     * @param   {String}   params\r\n                     * @config {String} [format]\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (cId, params) {\r\n                        return getInventory(cId, params);\r\n                    },\r\n\r\n                    getFileLink: function (cId, params) {\r\n                        params = params || {};\r\n                        params.cId = cId;\r\n                        params.action = 'inventory';\r\n\r\n                        return request.formatUrl(params);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * restart a container\r\n                 * @param   {String} cId\r\n                 * @returns {Object} promise\r\n                 */\r\n                restart: function (cId) {\r\n                    return action(cId, 'restart');\r\n                },\r\n\r\n                /**\r\n                 * stop a container\r\n                 * @param   {String} cId\r\n                 * @param   {Int}    until timestamp\r\n                 * @returns {Object} promise\r\n                 */\r\n                stop: function (cId, until) {\r\n                    return action(cId, 'stop', {\r\n                        until: until\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * start a container\r\n                 * @param   {String} cId\r\n                 * @returns {Object} promise\r\n                 */\r\n                start: function (cId) {\r\n                    return action(cId, 'start');\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\r\n    function seaContainerNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n\r\n            function count(cId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    nId: 'count'\r\n                });\r\n            }\r\n        \r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create note\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n                \r\n                count: function (cId) {\r\n                    return count(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\r\n    function seaContainerNotification(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, nId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create notification\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [userId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return update(notification);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, nId) {\r\n                    return destroy(cId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\r\n    function seaContainerProposal(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\r\n\r\n            function accept(cId, pId) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function deny(cId, pId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    pId: pId\r\n                });\r\n            }\r\n\r\n            function listSettings(cId, pId) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    pId: pId\r\n                }, 'container/{cId}/proposal/{pId}/setting');\r\n            }\r\n\r\n            return {\r\n                accept: function (cId, pId) {\r\n                    return accept(cId, pId);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                deny: function (cId, pId) {\r\n                    return deny(cId, pId);\r\n                },\r\n\r\n                settings: {\r\n                    list: function (cId, pId) {\r\n                        return listSettings(cId, pId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\r\n    function seaContainerState(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/state/{method}'),\r\n                hintRequest = new SeaRequest('container/{cId}/state/{sId}/hint');\r\n\r\n            function formatState(state) {\r\n                state.date = new Date(state.date);\r\n                state.lastDate = new Date(state.lastDate);\r\n                \r\n                if(state.silencedUntil) {\r\n                    state.silencedUntil = new Date(state.silencedUntil);\r\n                }\r\n                \r\n                if(state.hints) {\r\n                    angular.forEach(state.hints, formatHint);\r\n                }\r\n                \r\n                return state;\r\n            }\r\n        \r\n            function formatHint(hint) {\r\n                hint.date = new Date(hint.date);\r\n                \r\n                if(hint.until) {\r\n                    hint.until = new Date(hint.until);\r\n                }\r\n                \r\n                return hint;\r\n            }\r\n\r\n            function hint(params) {\r\n                return hintRequest.post(params).then(formatHint);\r\n            }\r\n        \r\n            function stats(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n                params.method = 'stats';\r\n                \r\n                return request.get(params);\r\n            }\r\n\r\n            function list(cId, params) {\r\n                params = params || {};\r\n                params.cId = cId;\r\n\r\n                if (angular.isArray(params.cId)) {\r\n                    return request.post(params, 'container/state').then(function (statesById) {\r\n                        angular.forEach(Object.keys(statesById), function (key) {\r\n                            angular.forEach(statesById[key], formatState);\r\n                        });\r\n                    });\r\n                }\r\n                return request.get(params).then(function (states) {\r\n                    angular.forEach(states, formatState);\r\n\r\n                    return states;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create container state hint\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [sId]\r\n                 * @config {String} [author]\r\n                 * @config {Number} [hintType]\r\n                 * @config {String} [message]\r\n                 * @config {String} [assignedUser]\r\n                 * @config {Array} [mentionedUsers]\r\n                 * @config {Boolean} [private]\r\n                 * @config {Number} [until]\r\n                 */\r\n                hint: function (params) {\r\n                    return hint(params);\r\n                },\r\n\r\n                /**\r\n                 * list container states\r\n                 * @param   {String}   cId\r\n                 * @param {Object}\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 * @config {Number} [end]\r\n                 * @config {Boolean} [includeHints]\r\n                 * @config {Boolean} [includeRawData]\r\n                 * @config {String} [format]\r\n                 */\r\n                list: function (cId, params) {\r\n                    return list(cId, params);\r\n                },\r\n                \r\n                /**\r\n                 * list container state stats\r\n                 * @param   {String}   cId\r\n                 * @param {Object}\r\n                 * @config {Number} [start] : now\r\n                 * @config {Number} [end]   : now - 12 months\r\n                 */\r\n                stats: function (cId, params) {\r\n                    return stats(cId, params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, tId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to container\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, tId) {\r\n                    return destroy(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\r\n    function seaContainerTemplate(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/template/{tId}');\r\n\r\n            function create(cId) {\r\n                return request.post({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function assign(cId, tId) {\r\n                return request.post({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create template form system\r\n                 * @param {String} cId\r\n                 */\r\n                create: function (cId) {\r\n                    return create(cId);\r\n                },\r\n\r\n                /**\r\n                 * assign a template to a system\r\n                 * @param {String} cId\r\n                 * @param {String} tId\r\n                 */\r\n                assign: function (cId, tId) {\r\n                    return assign(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeLocation', ['SeaRequest',\r\n        function seaMeLocation(SeaRequest) {\r\n            var request = new SeaRequest('me/location');\r\n\r\n            function get() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * get location\r\n                 */\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update location\r\n                 * @param {Object} params\r\n                 * @config {Object} [geo]\r\n                 * @config {Number} [geo.lat]\r\n                 * @config {Number} [geo.lon]\r\n                 * @config {Object} [geo.address]\r\n                 * @config {String} [geo.address.country]\r\n                 * @config {String} [geo.address.state]\r\n                 * @config {String} [geo.address.postcode]\r\n                 * @config {String} [geo.address.city]\r\n                 * @config {String} [geo.address.road]\r\n                 * @config {String} [geo.address.house_number]\r\n                 */\r\n                update: function (params) {\r\n                    return update(params);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeLocation', 'seaMeMobilepush', 'seaMeNotification', 'seaMeTwoFactor', 'seaMeSetting',\r\n        function seaMe(SeaRequest, seaMeLocation, seaMeMobilepush, seaMeNotification, seaMeTwoFactor, seaMeSetting) {\r\n            var request = new SeaRequest('me/{action}');\r\n\r\n            function _formatNode(node) {\r\n                ['date', 'lastDate', 'silencedUntil'].forEach(function (key) {\r\n                    if (node[key] && typeof (node[key]) === 'string') {\r\n                        node[key] = new Date(node[key]);\r\n                    }\r\n                });\r\n\r\n                return node;\r\n            }\r\n\r\n            function _formatData(data) {\r\n                var idx = data.indexOf('loadfinish');\r\n                if (idx >= 0) {\r\n                    data.splice(idx, 1);\r\n                }\r\n\r\n                for (var i = 0, len = data.length; i < len; i++) {\r\n                    _formatNode(data[i]);\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            function me() {\r\n                return request.get();\r\n            }\r\n\r\n            function customer() {\r\n                return request.get({\r\n                    action: 'customer'\r\n                });\r\n            }\r\n\r\n            function feed(params) {\r\n                params = params || {};\r\n                params.action = 'feed';\r\n\r\n                return request.get(params);\r\n            }\r\n\r\n            function key(name) {\r\n                return request.get({\r\n                    action: 'key',\r\n                    name: name\r\n                });\r\n            }\r\n\r\n            function nodes(params) {\r\n                params = params || {};\r\n                params.action = 'nodes';\r\n\r\n                return request.get(params).then(_formatData);\r\n            }\r\n\r\n            return {\r\n                me: me,\r\n                customer: customer,\r\n                feed: function (params) {\r\n                    return feed(params);\r\n                },\r\n                key: function (name) {\r\n                    return key(name);\r\n                },\r\n                nodes: function (params) {\r\n                    return nodes(params);\r\n                },\r\n\r\n                location: seaMeLocation,\r\n                mobilepush: seaMeMobilepush,\r\n                notification: seaMeNotification,\r\n                twofactor: seaMeTwoFactor,\r\n                setting: seaMeSetting\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\r\n    function seaMeMobilepush(SeaRequest) {\r\n            var request = new SeaRequest('me/mobilepush/{handle}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(handle) {\r\n                return request.get({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            function destroy(handle) {\r\n                return request.del({\r\n                    handle: handle\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: list,\r\n\r\n                /**\r\n                 * add mobilepush\r\n                 * @param   {Object} params\r\n                 * @config  {String} handle\r\n                 * @config  {String} type\r\n                 * @returns {Object} promise\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (handle) {\r\n                    return get(handle);\r\n                },\r\n\r\n                destroy: function (handle) {\r\n                    return destroy(handle);\r\n                }\r\n            };\r\n  }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\r\n    function seaMeNotification(SeaRequest) {\r\n            var request = new SeaRequest('me/notification/{nId}');\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function update(notification) {\r\n                return request.put(notification);\r\n            }\r\n\r\n            function destroy(nId) {\r\n                return request.del({\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all notifications\r\n                 * @param   {Object} params\r\n                 * @config  {Boolean}  type\r\n                 * @returns {Object} promise\r\n                 */\r\n                list: function (params) {\r\n                    return list(params);\r\n                },\r\n\r\n                /**\r\n                 * update notification\r\n                 * @param {Object} params\r\n                 * @config {String} [nId]\r\n                 * @config {String} [cId || aId]\r\n                 * @config {Boolean} [mail]\r\n                 * @config {Boolean} [phone]\r\n                 * @config {Boolean} [ticket]\r\n                 * @config {String} [deferId]\r\n                 */\r\n                update: function (notification) {\r\n                    return get(notification);\r\n                },\r\n\r\n                destroy: function (nId) {\r\n                    return destroy(nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeSetting', ['SeaRequest',\r\n    function seaMeSetting(SeaRequest) {\r\n            var request = new SeaRequest('me/setting');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(settings) {\r\n                settings = settings || {};\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (settings) {\r\n                    return update(settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaMeTwoFactor', ['SeaRequest',\r\n        function seaMeLocation(SeaRequest) {\r\n            var request = new SeaRequest('me/twofactor/{sub}');\r\n\r\n            function get() {\r\n                return request.get();\r\n            }\r\n\r\n            function getSecret(params) {\r\n                params = params || {};\r\n                params.sub = 'secret';\r\n                return request.get(params);\r\n            }\r\n\r\n            function enable(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function disable(params) {\r\n                return request.del(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * is two-factor enabled\r\n                 */\r\n                isEnabled: function () {\r\n                    return get();\r\n                },\r\n\r\n                /**\r\n                 * enable two-factor authentication\r\n                 * @param   {Object} params\r\n                 * @config  {string}  format\r\n                 * @returns {Object} promise\r\n                 */\r\n                getSecret: function (params) {\r\n                    return getSecret(params);\r\n                },\r\n\r\n                /**\r\n                 * enable two-factor authentication\r\n                 * @param   {Object} params\r\n                 * @config  {string}  password\r\n                 * @config  {string}  code\r\n                 * @returns {Object} promise\r\n                 */\r\n                enable: function (params) {\r\n                    return enable(params);\r\n                },\r\n\r\n                /**\r\n                 * disable two-factor authentication\r\n                 * @param   {Object} params\r\n                 * @config  {string}  password\r\n                 * @config  {string}  code\r\n                 * @returns {Object} promise\r\n                 */\r\n                disable: function (params) {\r\n                    return disable(params);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaPatchContainer', ['SeaRequest', 'seaPatchHelper',\r\n        function seaUser(SeaRequest, seaPatchHelper) {\r\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}')),\r\n                requestAction = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/{action}')),\r\n                requestPatchJobs = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/patch/{patchId}/jobs')),\r\n                requestPatch = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/container/{cId}/patch/{patchId}'));\r\n\r\n            function get(customerId, cId, action, queryParameters) {\r\n                if (action) {\r\n                    var params = {\r\n                        customerId: customerId,\r\n                        cId: cId,\r\n                        action: action,\r\n                    };\r\n\r\n                    if (queryParameters) {\r\n                        params = angular.extend({}, params, queryParameters);\r\n                    }\r\n\r\n                    return requestAction.get(params);\r\n                }\r\n\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                });\r\n            }\r\n\r\n            function enable(customerId, cId) {\r\n                return requestAction.post({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'enable',\r\n                });\r\n            }\r\n\r\n            function disable(customerId, cId) {\r\n                return requestAction.post({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'disable',\r\n                });\r\n            }\r\n\r\n            function getJobsByPatchId(customerId, cId, queryParameters, patchId) {\r\n                var params = {\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    patchId: patchId,\r\n                };\r\n                if (queryParameters) {\r\n                    params = angular.extend({}, params, queryParameters);\r\n                }\r\n                return requestPatchJobs.get(params);\r\n            }\r\n\r\n            function getPatchById(customerId, cId, patchId) {\r\n                return requestPatch.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    patchId: patchId,\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n                enable: function (customerId, cId) {\r\n                    return enable(customerId, cId);\r\n                },\r\n                disable: function (customerId, cId) {\r\n                    return disable(customerId, cId);\r\n                },\r\n                category: {\r\n                    list: function (customerId, cId) {\r\n                        return get(customerId, cId, 'categories');\r\n                    }\r\n                },\r\n                job: {\r\n                    list: function (customerId, cId, queryParameters) {\r\n                        return get(customerId, cId, 'jobs', queryParameters);\r\n                    },\r\n                    get: function(customerId, cId, patchId) {\r\n                        return getPatchById(customerId, cId, patchId);\r\n                    },\r\n                },\r\n                patch: {\r\n                    list: function (customerId, cId, queryParameters) {\r\n                        return get(customerId, cId, 'patches', queryParameters);\r\n                    },\r\n                    get: function (customerId, cId, patchId) {\r\n                        return getPatchById(customerId, cId, patchId);\r\n                    },\r\n                    job: {\r\n                        list: function (customerId, cId, queryParameters, patchId) {\r\n                            return getJobsByPatchId(customerId, cId, queryParameters, patchId);\r\n                        },\r\n                    },\r\n                },\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaPatchHelper', ['seaConfig',\r\n    function (seaConfig) {        \r\n            function getUrl(path) {\r\n                return [seaConfig.getPmUrl(), path].join('/');\r\n            }\r\n\r\n            return {\r\n                getUrl: getUrl\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaPatch', ['SeaRequest', 'seaPatchContainer', 'seaPatchViewFilter', 'seaPatchHelper',\r\n        function seaUser(SeaRequest, seaPatchContainer, seaPatchViewFilter, seaPatchHelper) {\r\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/customers')),\r\n            requestCategories = new SeaRequest(seaPatchHelper.getUrl('patch/categories'));\r\n\r\n            function listCustomers() {\r\n                return request.get();\r\n            }     \r\n\r\n            function listCategories() {\r\n                return requestCategories.get();\r\n            }            \r\n            \r\n            return {\r\n                customer: {\r\n                    list: listCustomers\r\n                },\r\n                category: {\r\n                    list: listCategories,\r\n                },\r\n                container: seaPatchContainer,\r\n                viewFilter: seaPatchViewFilter,\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaPatchViewFilter', ['SeaRequest', 'seaPatchHelper',\r\n        function seaUser(SeaRequest, seaPatchHelper) {\r\n            var request = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilters')),\r\n                requestVf = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter/{vfId}/{action}')),\r\n                requestPost = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter')),\r\n                requestDel = new SeaRequest(seaPatchHelper.getUrl('patch/{customerId}/viewFilter/{vfId}'));\r\n\r\n            function get(customerId, vfId, action, queryParameters) {\r\n                if (vfId) {\r\n                    var params = {\r\n                        customerId: customerId,\r\n                        vfId: vfId,\r\n                        action: action,\r\n                    };\r\n\r\n                    if (queryParameters) {\r\n                        params = angular.extend({}, params, queryParameters);\r\n                    }\r\n\r\n                    return requestVf.get(params);\r\n                }\r\n\r\n                return request.get({\r\n                    customerId: customerId,\r\n                });\r\n            }\r\n\r\n            function post(customerId, vfId, body, action) {\r\n                if (vfId) {\r\n                    var params = angular.extend({}, { customerId: customerId, vfId: vfId, action: action }, body);\r\n                    return requestVf.post(params);\r\n                }\r\n\r\n                var params = angular.extend({}, { customerId: customerId }, body);\r\n                return requestPost.post(params);\r\n            }\r\n\r\n            function del(customerId, vfId) {\r\n                return requestDel.del({ customerId: customerId, vfId: vfId });\r\n            }\r\n\r\n            return {\r\n                list: function (customerId) {\r\n                    return get(customerId);\r\n                },\r\n                create: function (customerId, body) {\r\n                    return post(customerId, false, body);\r\n                },\r\n                destroy: function (customerId, vfId) {\r\n                    return del(customerId, vfId);\r\n                },\r\n                container: {\r\n                    list: function (customerId, vfId) {\r\n                        return get(customerId, vfId, 'containers');\r\n                    }\r\n                },\r\n                job: {\r\n                    list: function (customerId, vfId, queryParameters) {\r\n                        return get(customerId, vfId, 'jobs', queryParameters);\r\n                    }\r\n                },\r\n                patch: {\r\n                    list: function (customerId, vfId, queryParameters) {\r\n                        return get(customerId, vfId, 'patches', queryParameters);\r\n                    }\r\n                },\r\n                setting: {\r\n                    list: function (customerId, vfId) {\r\n                        return get(customerId, vfId, 'settings');\r\n                    },\r\n\r\n                    update: function (customerId, vfId, body) {\r\n                        return post(customerId, vfId, body, 'settings');\r\n                    }\r\n                },\r\n\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingAntivirus', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/virus/1.0/{section}/{action}'));\r\n\r\n            function format(container) {\r\n                if (!container.EventList) {\r\n                    return container;\r\n                }\r\n\r\n                container.EventList.forEach(function (job) {\r\n                    ['Timestamp'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig;\r\n\r\n                if (!angular.isArray(containerConfig)) {\r\n                    containerConfig = [containerConfig];\r\n                }\r\n\r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n\r\n                return request.post({\r\n                    section: 'container',\r\n                    ContainerList: containerConfig\r\n                });\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'container';\r\n                query.action = 'get';\r\n                \r\n                return request.post(query);\r\n            }\r\n        \r\n            function getEvents(customerId, cId, paging) {\r\n                return listEvents(customerId, [cId], paging).then(function (history) {\r\n                    return (history[0] || {}).EventList;\r\n                });\r\n            }\r\n\r\n            function listEvents(customerId, containerIds, paging) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'event';\r\n                query.action = 'get';\r\n\r\n                if (paging) {\r\n                    query.Index = paging.index;\r\n                    query.Count = paging.count;\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function checkEvents(customerId, containerIds, eventIds) {\r\n                var query = helper.getEventIds(eventIds);\r\n                query.section = 'event';\r\n                query.action = 'check';\r\n                \r\n                return request.post(query);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n\r\n                /**\r\n                 * activate antivirus on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n\r\n                event: {\r\n                    get: function (customerId, cId, paging) {\r\n                        return getEvents(customerId, cId, paging);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, paging) {\r\n                        return getEvents(customerId, containerIds, paging);\r\n                    },\r\n                    \r\n                    check: function (customerId, containerIds, eventIds) {\r\n                        return checkEvents(customerId, containerIds, eventIds);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingIasHelper', [ '$q', 'seaConfig',\r\n    function seaRemotingPcvisit($q, seaConfig) {\r\n            function getContainerIds(containerIds) {\r\n                return convertIds(containerIds, 'ContainerIdList', 'ContainerId');\r\n            }\r\n\r\n            function getSoftwareIds(softwareIds) {\r\n                return convertIds(softwareIds, 'SoftwareIdList', 'SoftwareId');\r\n            }\r\n\r\n            function getJobIds(jobIds) {                \r\n                return convertIds(jobIds, 'JobIdList', 'JobId');\r\n            }\r\n        \r\n            function getEventIds(eventIds) {\r\n                return convertIds(eventIds, 'EventIdList', 'EventId');\r\n            }\r\n        \r\n            function convertIds(ids, rootName, subName) {\r\n                if (!angular.isArray(ids)) {\r\n                    ids = [ids];\r\n                }\r\n\r\n                var query = ids.map(function (id) {\r\n                    var o = {};\r\n                    o[subName] = id;\r\n                    return o;\r\n                });\r\n\r\n                var o = {};\r\n                o[rootName] = query;\r\n                \r\n                return o;\r\n            }\r\n\r\n            function idListResult(result) {\r\n                if (result.Msg == 'success') {\r\n                    return $q.resolve(result.IdList.map(function (entry) {\r\n                        return entry.Id;\r\n                    }));\r\n                }\r\n\r\n                return $q.reject(new Error(result.Msg));\r\n            }\r\n        \r\n            function getUrl(path) {\r\n                return [seaConfig.getPatchUrl(), path].join('/');\r\n            }\r\n\r\n            return {\r\n                getContainerIds: getContainerIds,\r\n                getSoftwareIds: getSoftwareIds,\r\n                getJobIds: getJobIds,\r\n                getEventIds: getEventIds,\r\n                idListResult: idListResult,\r\n                getUrl: getUrl\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingNetwork', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('network/{customerId}/{cId}/system/{action}');\r\n\r\n            function format(job) {\r\n                if (job && job.createdAt) {\r\n                    job.createdAta = new Date(job.createdAt);\r\n                }\r\n\r\n                return job;\r\n            }\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function install(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function getInstallStatus(params) {\r\n                params = params || {};\r\n                \r\n                var customerId = params.customerId,\r\n                    cId = params.cId,\r\n                    version = params.version,\r\n                    jobIds = params.jobIds;\r\n                \r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'installstatus',\r\n                    v: version,\r\n                    jobIds: jobIds\r\n                }).then(function (jobs) {\r\n                   jobs.forEach(format);\r\n                    return jobs;\r\n                });\r\n            }\r\n\r\n            return {\r\n                system: {\r\n                    /**\r\n                     * list active directory of OCC Connector\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     */\r\n                    list: function (params) {\r\n                        return list(params);\r\n                    },\r\n\r\n                    /**\r\n                     * install Server-Eye on remote system\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     * @config {String} [host] Name of the host Server-Eye will be installed on\r\n                     */\r\n                    install: function (params) {\r\n                        return install(params);\r\n                    },\r\n\r\n                    /**\r\n                     * get the install status of install jobs\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {Array}  [jobIds]\r\n                     * @config {Integer} [version] remote install version\r\n                     */\r\n                    installStatus: function (params) {\r\n                        return getInstallStatus(params);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatch', ['$http', 'SeaRequest', 'seaRemotingIasHelper', 'seaRemotingPatchHistory', 'seaRemotingPatchInstall', 'seaRemotingPatchReboot', 'seaRemotingPatchScan', 'seaRemotingPatchSoftware',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper, seaRemotingPatchHistory, seaRemotingPatchInstall, seaRemotingPatchReboot, seaRemotingPatchScan, seaRemotingPatchSoftware) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/{section}/{action}'));\r\n            var dateKeys = [\"LastScanTime\", \"LastInstallJobTime\", \"NextInstallJobTime\"];\r\n        \r\n            function format(container) {\r\n                dateKeys.forEach(function (key) {\r\n                    if(container[key]) {\r\n                        container[key] = new Date(container[key]);\r\n                    }\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n                \r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig,\r\n                    cron = params.cron;\r\n                \r\n                if(!angular.isArray(containerConfig)) {\r\n                    containerConfig = [ containerConfig ];\r\n                }\r\n                \r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n                \r\n                return request.post({\r\n                    ContainerList: containerConfig,\r\n                    Cron: cron\r\n                });\r\n            }\r\n        \r\n            function destroy(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                \r\n                return request.del(query)\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * activate patchmanagement on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 * @config {String} [cron]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n                deactivate: function (customerId, containerIds) {\r\n                    return destroy(customerId, containerIds);\r\n                },\r\n                \r\n                history: seaRemotingPatchHistory,\r\n                install: seaRemotingPatchInstall,\r\n                reboot: seaRemotingPatchReboot,\r\n                scan: seaRemotingPatchScan,\r\n                software: seaRemotingPatchSoftware\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPcvisit', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('pcvisit/{customerId}/{cId}/{action}');\r\n\r\n            function format(access) {\r\n                if(access && access.date) {\r\n                    access.data = new Date(access.date);\r\n                }\r\n                \r\n                return access;\r\n            }\r\n        \r\n            function get(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId\r\n                }).then(function (system) {\r\n                    format(system.lastAccess);\r\n                    return system;\r\n                });\r\n            }\r\n        \r\n            function start(params) {\r\n                params = params || {};\r\n                params.action = 'start';\r\n                \r\n                return request.post(params);\r\n            }\r\n\r\n            function isInstalled(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'check'\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function(customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n                \r\n                /**\r\n                 * install pcvisit on remote system\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [supporterId]\r\n                 * @config {String} [supporterPassword]\r\n                 * @config {String} [user]\r\n                 * @config {String} [domain]\r\n                 * @config {String} [password]\r\n                 */\r\n                installAndStart: function (params) {\r\n                    return start(params);\r\n                },\r\n                \r\n                isInstalled: function (customerId, cId) {\r\n                    return isInstalled(customerId, cId);\r\n                },\r\n                \r\n                getConnectFileLink: function (customerId, cId) {\r\n                    return request.formatUrl({\r\n                        customerId: customerId,\r\n                        cId: cId,\r\n                        action: 'file'\r\n                    });\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPowershell', ['SeaRequest',\r\n    function seaRemotingPowershell(SeaRequest) {\r\n            var request = new SeaRequest('powershell/{customerId}/{cId}/{action}');\r\n        \r\n            function start(params) {\r\n                params = params || {};\r\n                params.action = 'start';\r\n                \r\n                return request.post(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * start a powershell session on a remote machine\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [cId]\r\n                 */\r\n                start: function (params) {\r\n                    return start(params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemoting', ['SeaRequest', 'seaRemotingPcvisit', 'seaRemotingNetwork', 'seaRemotingAntivirus', 'seaRemotingPatch', 'seaRemotingPowershell',\r\n        function seaRemoting(SeaRequest, seaRemotingPcvisit, seaRemotingNetwork, seaRemotingAntivirus, seaRemotingPatch, seaRemotingPowershell) {\r\n            var shutdownRequest = new SeaRequest('shutdown/{customerId}/{containerId}');\r\n\r\n            function shutdown(customerId, containerId, credentials, force, reboot) {\r\n                return shutdownRequest.post({\r\n                    customerId: customerId,\r\n                    containerId: containerId,\r\n                    force: force,\r\n                    reboot: reboot,\r\n                    user: credentials.user,\r\n                    password: credentials.password,\r\n                    domain: credentials.domain,\r\n                });\r\n            }\r\n\r\n            return {\r\n                antivirus: seaRemotingAntivirus,\r\n                pcvisit: seaRemotingPcvisit,\r\n                powershell: seaRemotingPowershell,\r\n                network: seaRemotingNetwork,\r\n                patch: seaRemotingPatch,\r\n                shutdown: function (customerId, containerId, credentials, force, reboot) {\r\n                    return shutdown(customerId, containerId, credentials, force, reboot);\r\n                }\r\n            };\r\n        }]);\r\n})();","","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\r\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\r\n            var request = new SeaRequest('group/{gId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(group) {\r\n                return request.put(group);\r\n            }\r\n\r\n            function destroy(gId) {\r\n                return request.del({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create group\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {Object} group\r\n                 * @config {String} [gId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (group) {\r\n                    return update(group);\r\n                },\r\n\r\n                destroy: function (gId) {\r\n                    return destroy(gId);\r\n                },\r\n\r\n                setting: seaGroupSetting,\r\n                user: seaGroupUser\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\r\n    function seaGroupSetting(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/setting');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function update(gId, settings) {\r\n                settings = settings || {};\r\n                settings.gId = gId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * update group\r\n                 * @param {String} gId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (gId, settings) {\r\n                    return update(gId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\r\n    function seaGroupUser(SeaRequest) {\r\n            var request = new SeaRequest('group/{gId}/user/{uId}');\r\n\r\n            function list(gId) {\r\n                return request.get({\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function addUser(gId, uId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(gId, uId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (gId) {\r\n                    return list(gId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (gId, uId) {\r\n                    return addUser(gId, uId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (gId, uId) {\r\n                    return removeUser(gId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaReporting', ['SeaRequest', 'seaReportingTemplate',\r\n    function seaCustomer(SeaRequest, seaReportingTemplate) {\r\n            var request = new SeaRequest('reporting/{cId}/report'),\r\n                reportRequest = new SeaRequest('reporting/{cId}/report/{rId}');\r\n\r\n            function formatReport(report) {\r\n                ['startDate', 'lastDate', 'nextDate'].forEach(function (prop) {\r\n                    if(report[prop]) {\r\n                        report[prop] = new Date(report[prop]);\r\n                    }\r\n                });\r\n                \r\n                if(report.history) {\r\n                    report.history.forEach(function (generated) {\r\n                        generated.generatedDate = new Date(generated.generatedDate);\r\n                    });\r\n                }\r\n                \r\n                return report;\r\n            }\r\n        \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (reports) {\r\n                    reports.forEach(formatReport);\r\n                    return reports;\r\n                });\r\n            }\r\n        \r\n            function listTypes(cId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: 'type'\r\n                });\r\n            }\r\n\r\n            function get(cId, rId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: rId\r\n                }).then(function (report) {\r\n                    return formatReport(report);\r\n                });\r\n            }\r\n        \r\n            function destroy(cId, rId) {\r\n                return reportRequest.del({\r\n                    cId: cId,\r\n                    rId: rId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                type: {\r\n                    list: function (cId) {\r\n                        return listTypes(cId);\r\n                    }\r\n                },\r\n                \r\n                report: {\r\n                    get: function (cId, rId) {\r\n                        return get(cId, rId);\r\n                    },\r\n                    \r\n                    /**\r\n                     * create report\r\n                     * @param {Object} params\r\n                     * @config {String} [cId]\r\n                     * @config {String} [rtId]\r\n                     * @config {String} [repeatCron]\r\n                     * @config {String} [recipients]\r\n                     */\r\n                    create: function(params) {\r\n                        return create(params);\r\n                    },\r\n                    \r\n                    destroy: function (cId, rId) {\r\n                        return destroy(cId, rId);\r\n                    }\r\n                },\r\n\r\n                template: seaReportingTemplate\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaReportingTemplate', ['SeaRequest',\r\n        function seaReportingTemplate(SeaRequest) {\r\n            var request = new SeaRequest('reporting/template/{rtId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function get(rId) {\r\n                return reportRequest.get({\r\n                    rtId: rtId\r\n                });\r\n            }\r\n\r\n            function destroy(rId) {\r\n                return reportRequest.del({\r\n                    rtId: rtId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                get: function (rtId) {\r\n                    return get(rtId);\r\n                },\r\n\r\n                /**\r\n                 * create report template\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Array} [widgets]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (rtId) {\r\n                    return destroy(rtId);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaSearch', ['SeaRequest',\r\n        function seaSearch(SeaRequest) {\r\n            var request = new SeaRequest('search/{sub}');\r\n\r\n            function actionlog(params) {\r\n                params = params || {};\r\n                params.sub = 'actionlog';\r\n\r\n                return request.post(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * search through actionlog\r\n                 * @param {Object} params\r\n                 * @config {Object} [query]\r\n                 * @config {Number} [limit]\r\n                 * @config {Number} [start]\r\n                 */\r\n                actionlog: function (params) {\r\n                    return actionlog(params);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\r\n    function seaUserGroup(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/group/{gId}');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function addUser(uId, gId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            function removeUser(uId, gId) {\r\n                return request.del({\r\n                    uId: uId,\r\n                    gId: gId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * add user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                add: function (uId, gId) {\r\n                    return addUser(uId, gId);\r\n                },\r\n\r\n                /**\r\n                 * remove user to group\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId, gId) {\r\n                    return removeUser(uId, gId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserLocation', ['SeaRequest',\r\n        function seaUserLocation(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/location');\r\n\r\n            function get(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n            function update(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * get location\r\n                 * @param {String} uId\r\n                 */\r\n                get: function (cId) {\r\n                    return get(cId);\r\n                },\r\n\r\n                /**\r\n                 * update location\r\n                 * @param {Object} params\r\n                 * @config {String} [uId]\r\n                 * @config {Object} [geo]\r\n                 * @config {Number} [geo.lat]\r\n                 * @config {Number} [geo.lon]\r\n                 * @config {Object} [geo.address]\r\n                 * @config {String} [geo.address.country]\r\n                 * @config {String} [geo.address.state]\r\n                 * @config {String} [geo.address.postcode]\r\n                 * @config {String} [geo.address.city]\r\n                 * @config {String} [geo.address.road]\r\n                 * @config {String} [geo.address.house_number]\r\n                 */\r\n                update: function (params) {\r\n                    return update(params);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\r\n    function seaUserSetting(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/setting');\r\n\r\n            function list(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(uId, settings) {\r\n                settings = settings || {};\r\n                settings.uId = uId;\r\n                return request.put(settings);\r\n            }\r\n\r\n            return {\r\n                list: function (uId) {\r\n                    return list(uId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {String} uId\r\n                 * @param {Object} settings\r\n                 */\r\n                update: function (uId, settings) {\r\n                    return update(uId, settings);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\r\n    function seaUserSubstitude(SeaRequest) {\r\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\r\n\r\n            function set(uId, substId) {\r\n                return request.put({\r\n                    uId: uId,\r\n                    substitudeId: substId\r\n                });\r\n            }\r\n\r\n            function remove(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * set a substitude\r\n                 * @param {String} gId\r\n                 * @param {String} uId\r\n                 */\r\n                set: function (uId, substId) {\r\n                    return set(uId, substId);\r\n                },\r\n\r\n                /**\r\n                 * remove substitude\r\n                 * @param {String} uId\r\n                 */\r\n                remove: function (uId) {\r\n                    return remove(uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserLocation', 'seaUserSetting', 'seaUserSubstitude',\r\n        function seaUser(SeaRequest, seaUserGroup, seaUserLocation, seaUserSetting, seaUserSubstitude) {\r\n            var request = new SeaRequest('user/{uId}'),\r\n                requestUser = new SeaRequest('user/{uId}/{sub}'),\r\n                requestCustomer = new SeaRequest('user/{uId}/customer'),\r\n                requestUsers = new SeaRequest('user');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(uId) {\r\n                return request.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function update(user) {\r\n                return request.put(user);\r\n            }\r\n\r\n            function destroy(uId) {\r\n                return request.del({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function search(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function listCustomers(uId) {\r\n                return requestCustomer.get({\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            function listUsers(cId, includeLocation) {\r\n                return requestUsers.get({\r\n                    customerId: cId,\r\n                    includeLocation: includeLocation\r\n                });\r\n            }\r\n\r\n            function deactivateTwoFactor(uId, password) {\r\n                return requestUser.del({\r\n                    uId: uId,\r\n                    password: password,\r\n                    sub: 'twofactor'\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create user\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                get: function (gId) {\r\n                    return get(gId);\r\n                },\r\n\r\n                /**\r\n                 * update user\r\n                 * @param {Object} user\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [prename]\r\n                 * @config {String} [surname]\r\n                 * @config {String} [email]\r\n                 * @config {Number} [role]\r\n                 * @config {String} [phone]\r\n                 */\r\n                update: function (user) {\r\n                    return update(user);\r\n                },\r\n\r\n                destroy: function (uId) {\r\n                    return destroy(uId);\r\n                },\r\n\r\n                /**\r\n                 * search users\r\n                 * @param   {Object}   params\r\n                 * @config  {String}   [query]\r\n                 * @config  {String}   [customerId]\r\n                 * @config  {Boolean}  [includeLocation]\r\n                 */\r\n                search: function (params) {\r\n                    return search(params);\r\n                },\r\n                \r\n                list: function(cId, includeLocation) {\r\n                    return listUsers(cId, includeLocation);\r\n                },\r\n                \r\n                group: seaUserGroup,\r\n                location: seaUserLocation,\r\n                setting: seaUserSetting,\r\n                substitude: seaUserSubstitude,\r\n                customer: {\r\n                    list: function (uId) {\r\n                        return listCustomers(uId);\r\n                    }\r\n                },\r\n                twofactor: {\r\n                    /**\r\n                     * deactivate two-factor\r\n                     * @param   {String}   uId\r\n                     * @param   {String}   password\r\n                     */\r\n                    deactivate: function (uId, password) {\r\n                        return deactivateTwoFactor(uId, password);\r\n                    }\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchHistory', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n        function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/history/{action}'));\r\n\r\n            function format(container) {\r\n                if (!container.JobList) {\r\n                    return container;\r\n                }\r\n\r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function get(customerId, cId, params) {\r\n                return list(customerId, [cId], params).then(function (history) {\r\n                    return (history[0] || {}).JobList;\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n\r\n                params = params || {};\r\n\r\n                if (params.index != null) {\r\n                    query.Index = params.index;\r\n                }\r\n\r\n                if (params.count != null) {\r\n                    query.Count = params.count;\r\n                }\r\n\r\n                if (params.from != null) {\r\n                    query.From = params.from;\r\n                }\r\n\r\n                if (params.states != null) {\r\n                    query.States = params.states;\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId, params) {\r\n                    return get(customerId, cId, params);\r\n                },\r\n\r\n                list: function (customerId, containerIds, params) {\r\n                    return list(customerId, containerIds, params);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchInstall', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n        function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/install/{action}'));\r\n\r\n            function format(container) {\r\n                if (!container.JobList) {\r\n                    return container;\r\n                }\r\n\r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (install) {\r\n                    return install[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, params) {\r\n                var query;\r\n                params = params || {};\r\n\r\n                if (params.jobIds) {\r\n                    query = helper.getJobIds(params.jobIds);\r\n                    query.action = 'software';\r\n                } else {\r\n                    query = helper.getContainerIds(containerIds);\r\n                    query.action = 'get';\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            function create(params) {\r\n                var customerId = params.customerId,\r\n                    userId = params.userId,\r\n                    containerId = params.containerId,\r\n                    categories = params.categories,\r\n                    software = params.softwareId,\r\n                    cron = params.cron,\r\n                    updateManualRelease = params.updateManualRelease,\r\n                    postInstall = params.postInstall;\r\n\r\n                var reqParams = {\r\n                    Cron: cron,\r\n                    UserId: userId\r\n                };\r\n\r\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\r\n\r\n                if (categories) {\r\n                    reqParams.CategoryList = categories;\r\n                }\r\n                if (software) {\r\n                    reqParams = angular.extend(reqParams, helper.getSoftwareIds(software));\r\n                }\r\n                if (updateManualRelease != null) {\r\n                    reqParams.InstallManualReleaseSW = updateManualRelease;\r\n                }\r\n                if (postInstall == null) {\r\n                    postInstall = 'NOTHING';\r\n                }\r\n\r\n                reqParams.PostAction = postInstall;\r\n\r\n                return request.post(reqParams).then(helper.idListResult);\r\n            }\r\n\r\n            function destroy(customerId, jobId) {\r\n                var query = helper.getJobIds(jobId);\r\n\r\n                return request.del(query).then(helper.idListResult);\r\n            }\r\n\r\n            function getSoftware(customerId, jobId) {\r\n                return listSoftware(customerId, [jobId]).then(function (install) {\r\n                    return (install[0] || {});\r\n                });\r\n            }\r\n\r\n            function listSoftware(customerId, jobIds) {\r\n                var query = helper.getJobIds(jobIds);\r\n                query.action = 'software';\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds, params) {\r\n                    return list(customerId, containerIds, params);\r\n                },\r\n\r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerId]\r\n                 * @config {String|Array} [softwareId]\r\n                 * @config {Array} [categories]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (customerId, jobId) {\r\n                    return destroy(customerId, jobId);\r\n                },\r\n\r\n                getSoftware: function (customerId, jobId) {\r\n                    return getSoftware(customerId, jobId);\r\n                },\r\n\r\n                listSoftware: function (customerId, jobIds) {\r\n                    return listSoftware(customerId, jobIds);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchReboot', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/reboot'));\r\n\r\n            function create(params) {\r\n                var customerId = params.customerId,\r\n                    userId = params.userId,\r\n                    containerId = params.containerId,\r\n                    cron = params.cron,\r\n                    action = params.action;\r\n\r\n                var reqParams = {\r\n                    Cron: cron,\r\n                    Action: action,\r\n                    UserId: userId\r\n                };\r\n\r\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\r\n\r\n                return request.post(reqParams).then(helper.idListResult);\r\n            }\r\n\r\n            function destroy(customerId, jobId) {\r\n                var query = helper.getJobIds(jobId);\r\n\r\n                return request.del(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create reboot job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerId]\r\n                 * @config {String} [action]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (customerId, jobId) {\r\n                    return destroy(customerId, jobId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchScan', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/scan/{action}'));\r\n        \r\n            function format(container) {\r\n                if(!container.JobList) {\r\n                    return container;\r\n                }\r\n                \r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime'].forEach(function (key) {\r\n                        if(job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (scan) {\r\n                    return scan[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function create(params) {\r\n                var query = helper.getContainerIds(params.containerIds);\r\n                query.Cron = params.cron;\r\n                \r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerIds]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchSoftware', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/software/{action}')),\r\n                requestSoftware = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/software/{method}/{action}'));\r\n\r\n            function get(customerId, softwareId) {\r\n                var query = helper.getSoftwareIds(softwareId);\r\n                query.method = 'get';\r\n\r\n                return requestSoftware.post(query).then(function (result) { return result[0]; });\r\n            }\r\n        \r\n            function getByContainer(customerId, cId, params) {\r\n                return listByContainer(customerId, [cId], params).then(function (software) {\r\n                    return software[0];\r\n                });\r\n            }\r\n\r\n            function listByContainer(customerId, containerIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                if (params.blocked == null) {\r\n                    query.Blocked = 'BOTH';\r\n                } else {\r\n                    query.Blocked = params.blocked ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return request.post(query);\r\n            }\r\n\r\n            function has(customerId, containerIds, softwareIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.SoftwareIdList = helper.getSoftwareIds(softwareIds).SoftwareIdList;\r\n                query.method = 'container';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return requestSoftware.post(query);\r\n            }\r\n\r\n            function block(customerId, containerIds, softwareIds, isBlocked) {\r\n                var query = angular.extend(\r\n                    helper.getContainerIds(containerIds),\r\n                    helper.getSoftwareIds(softwareIds)\r\n                );\r\n                query.action = 'block';\r\n                query.Blocked = isBlocked;\r\n\r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                container: {\r\n                    /**\r\n                     * list software of container\r\n                     * @param {String} customerId\r\n                     * @param {String} containerId\r\n                     * @param {Object} params\r\n                     * @config {Boolean} [installed]\r\n                     * @config {Boolean} [blocked]\r\n                     */\r\n                    get: function (customerId, containerId, params) {\r\n                        return getByContainer(customerId, containerId, params);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, params) {\r\n                        return listByContainer(customerId, containerIds, params);\r\n                    }\r\n                },\r\n\r\n                get: function(customerId, softwareId) {\r\n                    return get(customerId, softwareId);\r\n                },\r\n                \r\n                /**\r\n                 * find out if a container has a specific software installed\r\n                 * @param {String} customerId\r\n                 * @param {String} containerId\r\n                 * @param {String} softwareId\r\n                 * @param {Object} params\r\n                 * @config {Boolean} [installed]\r\n                 */\r\n                has: function (customerId, containerId, softwareId, params) {\r\n                    return has(customerId, containerId, softwareId, params);\r\n                },\r\n\r\n                /**\r\n                 * block software on containers\r\n                 * @param   {String}   customerId   \r\n                 * @param   {String|Array}   containerIds \r\n                 * @param   {String|Array}   softwareIds  \r\n                 * @param   {Boolean}  isBlocked\r\n                 */\r\n                block: function (customerId, containerIds, softwareIds, isBlocked) {\r\n                    return block(customerId, containerIds, softwareIds, isBlocked);\r\n                }\r\n            };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}