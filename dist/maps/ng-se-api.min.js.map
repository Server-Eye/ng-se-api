{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/auth/auth.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/customer/apiKey.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/externalCall.js","src/customer/manager.js","src/customer/setting.js","src/customer/tag.js","src/customer/template.js","src/customer/usage.js","src/customer/viewFilter.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/reporting/reporting.js","src/remoting/antivirus.js","src/remoting/iasHelper.js","src/remoting/network.js","src/remoting/patch.js","src/remoting/pcvisit.js","src/remoting/remoting.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js","src/remoting/patch/history.js","src/remoting/patch/install.js","src/remoting/patch/reboot.js","src/remoting/patch/scan.js","src/remoting/patch/software.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","patchUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setPatchUrl","setApiVersion","setApiKey","$get","getBaseUrl","getPatchUrl","getApiVersion","getApiKey","factory","SeaRequest","seaConfig","$q","$http","urlPath","prototype","formatUrl","params","url","indexOf","keys","Object","i","length","regex","RegExp","test","replace","send","method","deferred","defer","conf","copy","data","Content-Type","then","resp","total","totalCount","resolve","err","reject","promise","get","post","put","del","VALID_EVENTS","$rootScope","fireEvent","name","argsObj","console","log","$broadcast","connect","credentials","rooms","io","error","connectUrl","reduce","p","key","sio","settings","on","onerror","onconnect","userId","roomId","forEach","evtName","ondata","sendSettings","emit","connected","hasEverBeenConnected","reconnected","evt","type","targetNode","date","Date","lastDate","toLowerCase","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentTag","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","restart","tag","formatActionlog","entry","changeDate","changed","JSON","parse","userName","e","email","sur","information","formatMeasurement","m","ts","listActionlog","action","getChart","parentId","listCategories","list","entries","chartConfig","measurements","formatNote","postedOn","notes","count","nId","remote","param","remoteRequest","formatState","silencedUntil","hints","formatHint","hint","until","hintRequest","stats","isArray","statesById","states","tId","format","agentKnown","updateDate","listSettings","akId","aks","map","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTag","seaContainerTemplate","formatContainer","container","lastBootUpTime","cId","listAgents","api","proposal","template","extend","getInventory","inventory","getFileLink","stop","start","accept","pId","deny","assign","createApiKey","login","logout","seaGroupSetting","seaGroupUser","gId","group","user","addUser","uId","removeUser","add","remove","validUntil","createdOn","requestDistri","apiKeys","query","bucket","bId","listUser","userRequest","seaCustomerApiKey","seaCustomerBucket","seaCustomerDispatchTime","seaCustomerExternalCall","seaCustomerManager","seaCustomerSetting","seaCustomerTag","seaCustomerTemplate","seaCustomerUsage","seaCustomerViewFilter","customer","dispatchTime","externalCall","manager","usage","viewFilter","dtId","ecall","ecalls","requestAgent","destroyAgent","u","year","month","vfId","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","splice","len","me","feed","nodes","mobilepush","handle","formatReport","report","prop","history","generated","generatedDate","reports","listTypes","reportRequest","rId","helper","EventList","job","activate","containerConfig","customerId","c","ContainerId","containerId","Token","token","section","ContainerList","containerIds","getContainerIds","getEvents","paging","listEvents","Index","index","Count","containers","checkEvents","eventIds","getEventIds","event","check","convertIds","getSoftwareIds","softwareIds","getJobIds","jobIds","ids","rootName","subName","id","o","idListResult","result","Msg","IdList","Id","Error","createdAt","createdAta","install","getInstallStatus","version","v","jobs","system","installStatus","seaRemotingPatchHistory","seaRemotingPatchInstall","seaRemotingPatchReboot","seaRemotingPatchScan","seaRemotingPatchSoftware","LastScanTime","cron","Cron","deactivate","reboot","scan","software","access","lastAccess","isInstalled","installAndStart","getConnectFileLink","seaRemotingPcvisit","seaRemotingNetwork","seaRemotingAntivirus","seaRemotingPatch","antivirus","pcvisit","network","patch","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","listCustomers","requestCustomer","substitude","JobList","categories","softwareId","postInstall","reqParams","CategoryList","PostAction","jobId","getSoftware","listSoftware","Action","requestSoftware","getByContainer","listByContainer","Installed","installed","Blocked","blocked","has","SoftwareIdList","block","isBlocked"],"mappings":"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","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                patchUrl: 'https://patch.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n            \r\n            this.setPatchUrl = function (patchUrl) {\r\n                config.patchUrl = patchUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getPatchUrl: function () {\r\n                        return config.patchUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(params, url) {\r\n                url = url || this.urlPath;\r\n                \r\n                if(url.indexOf('https://') < 0) {\r\n                    url = seaConfig.getUrl(url || this.urlPath)\r\n                }\r\n                \r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}/ig, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = params || {};\r\n                params = angular.copy(params);\r\n                \r\n                conf.url = this.formatUrl(params, urlPath);\r\n\r\n                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\r\n                    conf.data = params || {};\r\n                    conf.headers = {\r\n                        'Content-Type': 'application/json'\r\n                    };\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    var total = resp.headers('x-total-count');\r\n                    \r\n                    if(total != null) {\r\n                        resp.data.totalCount = total;\r\n                    }\r\n                    \r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n            \r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    var VALID_EVENTS = ['USER_UPDATE', 'NODE_ADD', 'NODE_UPDATE', 'NODE_REMOVE', 'REMOTE_RESULT'];\r\n\r\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\r\n    function ($rootScope, seaConfig) {\r\n            var connected = false,\r\n                reconnected = false,\r\n                hasEverBeenConnected = false,\r\n                sio;\r\n\r\n            var settings = {};\r\n\r\n            function fireEvent(name, argsObj) {\r\n                argsObj = argsObj || {};\r\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\r\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\r\n            }\r\n\r\n            function connect(credentials, rooms) {\r\n                if (typeof io == 'undefined') {\r\n                    console.error('required socket.io lib not found');\r\n                    return;\r\n                }\r\n\r\n                var connectUrl = seaConfig.getBaseUrl();\r\n                \r\n                if(credentials) {\r\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\r\n                        p += [ key, credentials[key] ].join('=');\r\n                        return p;\r\n                    }, '?');\r\n                }\r\n                \r\n                sio = io(connectUrl);\r\n\r\n                settings.rooms = rooms;\r\n\r\n                sio.on('error', onerror);\r\n                sio.on('connect', onconnect);\r\n                sio.on('connecting', function () {\r\n                    console.log('connecting socket');\r\n                });\r\n                sio.on('disconnect', function () {\r\n                    console.log('disconnected socket');\r\n                    onerror('socket.disconnected');\r\n                });\r\n                sio.on('connect_error', function () {\r\n                    console.log('connect socket failed');\r\n                    onerror('socket.connect_failed');\r\n                });\r\n                sio.on('reconnect_error', function () {\r\n                    console.log('reconnect socket failed');\r\n                    onerror('socket.reconnect_failed');\r\n                });\r\n                sio.on('reconnecting', function () {\r\n                    console.log('reconnecting socket');\r\n                });\r\n\r\n                sio.on('socket:joined', function (userId, roomId) {\r\n                    console.log(userId, 'joined', roomId);\r\n                });\r\n\r\n                // server-eye events\r\n                VALID_EVENTS.forEach(function (evtName) {\r\n                    sio.on(evtName, function (data) {\r\n                        ondata(evtName, data);\r\n                    });\r\n                });\r\n            }\r\n\r\n            function sendSettings() {\r\n                sio.emit('settings', settings);\r\n            }\r\n\r\n            function onerror(err) {\r\n                console.log('socket error:', err);\r\n                connected = false;\r\n                fireEvent('error', err);\r\n            }\r\n\r\n            function onconnect() {\r\n                console.log('connected socket');\r\n                connected = true;\r\n\r\n                if (hasEverBeenConnected) {\r\n                    reconnected = true;\r\n                }\r\n\r\n                hasEverBeenConnected = true;\r\n\r\n                var evt = reconnected ? 'reconnected' : 'connected';\r\n\r\n                console.log('firing socket', evt);\r\n\r\n                sendSettings();\r\n\r\n                fireEvent(evt);\r\n            }\r\n\r\n            function ondata(type, data) {\r\n                if(data && data.targetNode) {\r\n                    if(data.targetNode.date) {\r\n                        data.targetNode.date = new Date(data.targetNode.date);\r\n                    }\r\n                    \r\n                    if(data.targetNode.lastDate) {\r\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\r\n                    }\r\n                }\r\n                \r\n                fireEvent(type.toLowerCase(), data);\r\n            }\r\n\r\n            return {\r\n                connect: function (credentials, rooms) {\r\n                    return connect(credentials, rooms);\r\n                }\r\n            }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n                \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                restart: seaAgentMisc.restart,\r\n                tag: seaAgentTag,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n        function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                try {\r\n                    entry.userName = JSON.parse(entry.userName);\r\n                } catch (e) {\r\n                    entry.userName = {\r\n                        email: entry.userName,\r\n                        sur: entry.userName\r\n                    };\r\n                }\r\n\r\n                if (entry.information) {\r\n                    try {\r\n                        entry.information = JSON.parse(entry.information);\r\n                    } catch (e) {\r\n                        entry.information = null;\r\n                    }\r\n                }\r\n\r\n                return entry;\r\n            }\r\n\r\n            function formatMeasurement(m) {\r\n                m.ts = new Date(m.name);\r\n                return m;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n\r\n            function restart(aId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.action = 'restart';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n\r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params).then(function (chartConfig) {\r\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\r\n\r\n                            return chartConfig;\r\n                        });\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                },\r\n\r\n                /**\r\n                 * restart an agent\r\n                 * @param   {String} aId\r\n                 * @returns {Object} promise\r\n                 */\r\n                restart: function (aId) {\r\n                    return restart(aId);\r\n                }\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n        \r\n            function count(aId) {\r\n                return request.get({\r\n                    aId: aId,\r\n                    nId: 'count'\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n                \r\n                count: function (aId) {\r\n                    return count(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n    function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\n        \n            function update(setting) {\n                return request.put(setting);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n        \n            function remote(param) {\n                return remoteRequest.get(param);\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n                \n                /**\n                 * load settings from remote\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [information]\n                 */\n                remote: function (param) {\n                    return remote(param);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n    function seaAgentState(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/state/{method}'),\n                hintRequest = new SeaRequest('agent/{aId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                \n                if(state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n                \n                if(state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n                \n                return state;\n            }\n        \n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n                \n                if(hint.until) {\n                    hint.until = new Date(hint.until);\n                }\n                \n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n\n            function stats(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.method = 'stats';\n                \n                return request.get(params);\n            }\n        \n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                },\n                \n                /**\n                 * list agent state stats\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (aId, params) {\n                    return stats(aId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, tId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to agent\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, tId) {\r\n                    return destroy(aId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n\n            function format(agentKnown) {\n                if(agentKnown.updateDate) {\n                    agentKnown.updateDate = new Date(agentKnown.updateDate);\n                }\n                \n                return agentKnown;\n            }\n        \n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list(params) {\n                return request.get(params).then(function (aks) { return aks.map(format); });\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n        \n            function listAgents(cId) {\n                return request.get({\n                    cId: cId,\n                    action: 'agents'\n                });\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            var api = {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n                \n                agent: {\n                    list: function (cId) {\n                        return listAgents(cId);\n                    }\n                },\n\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                tag: seaContainerTag,\n                template: seaContainerTemplate\n            };\n                \n            angular.extend(api, seaContainerMisc);\n        \n            return api;\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n        function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                try {\n                    entry.userName = JSON.parse(entry.userName);\n                } catch (e) {\n                    entry.userName = {\n                        email: entry.userName,\n                        sur: entry.userName\n                    };\n                }\n\n                if (entry.information) {\n                    try {\n                        entry.information = JSON.parse(entry.information);\n                    } catch (e) {\n                        entry.information = null;\n                    }\n                }\n\n                return entry;\n            }\n\n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function action(cId, action, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = action;\n                return request.post(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n\n                            return entries;\n                        });\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    },\n\n                    getFileLink: function (cId, params) {\n                        params = params || {};\n                        params.cId = cId;\n                        params.action = 'inventory';\n\n                        return request.formatUrl(params);\n                    }\n                },\n\n                /**\n                 * restart a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                restart: function (cId) {\n                    return action(cId, 'restart');\n                },\n\n                /**\n                 * stop a container\n                 * @param   {String} cId\n                 * @param   {Int}    until timestamp\n                 * @returns {Object} promise\n                 */\n                stop: function (cId, until) {\n                    return action(cId, 'stop', {\n                        until: until\n                    });\n                },\n\n                /**\n                 * start a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                start: function (cId) {\n                    return action(cId, 'start');\n                }\n            };\n        }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function count(cId) {\n                return request.get({\n                    cId: cId,\n                    nId: 'count'\n                });\n            }\n        \n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n                \n                count: function (cId) {\n                    return count(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return request.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n    function seaContainerState(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/state/{method}'),\n                hintRequest = new SeaRequest('container/{cId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                \n                if(state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n                \n                if(state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n                \n                return state;\n            }\n        \n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n                \n                if(hint.until) {\n                    hint.until = new Date(hint.until);\n                }\n                \n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n        \n            function stats(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.method = 'stats';\n                \n                return request.get(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                },\n                \n                /**\n                 * list container state stats\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (cId, params) {\n                    return stats(cId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, tId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to container\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, tId) {\r\n                    return destroy(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n\n            function create(cId) {\n                return request.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\n    function seaAuth(SeaRequest) {\n            var request = new SeaRequest('auth/{action}');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerApiKey', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/apiKey/{apiKey}'),\r\n                requestDistri = new SeaRequest('customer/apiKey/{apiKey}');\r\n\r\n            function format(apiKey) {\r\n                if(apiKey.validUntil) {\r\n                    apiKey.validUntil = new Date(apiKey.validUntil);\r\n                }\r\n                \r\n                if(apiKey.createdOn) {\r\n                    apiKey.createdOn = new Date(apiKey.createdOn);\r\n                }\r\n                \r\n                return apiKey;\r\n            }\r\n        \r\n            function list(cId) {\r\n                var p;\r\n                \r\n                if(!cId) {\r\n                    p = requestDistri.get();\r\n                } else {\r\n                    p = request.get({\r\n                        cId: cId\r\n                    });\r\n                }\r\n                \r\n                return p.then(function (apiKeys) {\r\n                    angular.forEach(apiKeys, format);\r\n                    \r\n                    return apiKeys;\r\n                });\r\n            }\r\n        \r\n            function get(cId, query) {\r\n                query = query || {};\r\n                query.cId = cId;\r\n                \r\n                return request.get(query).then(format);\r\n            }\r\n\r\n            function destroy(cId, apiKey) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    apiKey: apiKey\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all api keys of a customer or all your customers\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n                \r\n                get: function (cId, query) {\r\n                    return get(cId, query);\r\n                },\r\n\r\n                destroy: function (cId, apiKey) {\r\n                    return destroy(cId, apiKey);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/bucket/{bId}'),\r\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(bucket) {\r\n                return request.put(bucket);\r\n            }\r\n\r\n            function destroy(bId) {\r\n                return request.del({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function listUser(bId) {\r\n                return userRequest.get({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function addUser(params) {\r\n                return userRequest.put(params);\r\n            }\r\n\r\n            function removeUser(bId, uId) {\r\n                return userRequest.del({\r\n                    bId: bId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [bId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (bucket) {\r\n                    return update(bucket);\r\n                },\r\n\r\n                destroy: function (bId) {\r\n                    return destroy(bId);\r\n                },\r\n\r\n                user: {\r\n                    list: function (bId) {\r\n                        return listUser(bId);\r\n                    },\r\n\r\n                    /**\r\n                     * add user to bucket\r\n                     * @param {Object} params\r\n                     * @config {String} [bId]\r\n                     * @config {String} [uId]\r\n                     */\r\n                    create: function (params) {\r\n                        return addUser(params);\r\n                    },\r\n\r\n                    /**\r\n                     * remove user from bucket\r\n                     * @param {String} [bId]\r\n                     * @param {String} [uId]\r\n                     */\r\n                    destroy: function (bId, uId) {\r\n                        return removeUser(bId, uId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerApiKey', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerExternalCall', 'seaCustomerManager', 'seaCustomerSetting', 'seaCustomerTag', 'seaCustomerTemplate', 'seaCustomerUsage', 'seaCustomerViewFilter',\n    function seaCustomer(SeaRequest, seaCustomerApiKey, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerExternalCall, seaCustomerManager, seaCustomerSetting, seaCustomerTag, seaCustomerTemplate, seaCustomerUsage, seaCustomerViewFilter) {\n            var request = new SeaRequest('customer/{cId}');\n\n            function list() {\n                return request.get();\n            }\n        \n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return request.put(customer);\n            }\n\n            return {\n                list: function () {\n                    return list();\n                },\n                \n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                apiKey: seaCustomerApiKey,\n                bucket: seaCustomerBucket,\n                dispatchTime: seaCustomerDispatchTime,\n                externalCall: seaCustomerExternalCall,\n                manager: seaCustomerManager,\n                setting: seaCustomerSetting,\n                tag: seaCustomerTag,\n                template: seaCustomerTemplate,\n                usage: seaCustomerUsage,\n                viewFilter: seaCustomerViewFilter\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return request.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return request.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerExternalCall', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var requestDistri = new SeaRequest('customer/externalCall');\r\n\r\n            function format(ecall) {\r\n                if(ecall.lastDate) {\r\n                    ecall.lastDate = new Date(ecall.lastDate);\r\n                }\r\n                \r\n                return ecall;\r\n            }\r\n        \r\n            function list() {\r\n                return requestDistri.get().then(function (ecalls) {\r\n                    angular.forEach(ecalls, format);\r\n                    \r\n                    return ecalls;\r\n                });\r\n            }\r\n        \r\n            return {\r\n                /**\r\n                 * list all external url calls of your customers\r\n                 */\r\n                list: function () {\r\n                    return list();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerManager', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/manager/{uId}');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function addUser(cId, email) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    uId: email\r\n                });\r\n            }\r\n\r\n            function removeUser(cId, uId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * add user as manager\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [email] email address of the user\r\n                 */\r\n                add: function (cId, email) {\r\n                    return addUser(cId, email);\r\n                },\r\n\r\n                remove: function (cId, uId) {\r\n                    return removeUser(cId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(tag);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTemplate', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/template/{tId}'),\r\n                requestAgent = new SeaRequest('customer/template/{tId}/agent/{aId}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n        \r\n            function listAgents(tId) {\r\n                return requestAgent.get({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n        \r\n            function destroyAgent(tId, aId) {\r\n                return request.del({\r\n                    tId: tId,\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                },\r\n                \r\n                agent: {\r\n                    list: function(tId) {\r\n                        return listAgents(tId);\r\n                    },\r\n                    destroy: function(tId, aId) {\r\n                        return destroyAgent(tId, aId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerUsage', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/usage'),\r\n                requestDistri = new SeaRequest('customer/usage');\r\n\r\n            function format(u) {\r\n                if (u.date) {\r\n                    u.date = new Date(u.date);\r\n                }\r\n\r\n                return u;\r\n            }\r\n\r\n            function list(year, month, cId) {\r\n                var params = {\r\n                    year: year,\r\n                    month: month\r\n                };\r\n\r\n                if (cId) {\r\n                    params.cId = cId;\r\n\r\n                }\r\n\r\n                return requestDistri.get(params).then(function (usage) {\r\n                    angular.forEach(usage, format);\r\n\r\n                    return usage;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list the max usage of all customers or the usage graph of a specific customer\r\n                 * @param   {Date} year of the required usage\r\n                 * @param   {Date} month of the required usage\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (year, month, cId) {\r\n                    return list(year, month, cId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerViewFilter', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/viewFilter/{vfId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(viewFilter) {\r\n                return request.put(viewFilter);\r\n            }\r\n\r\n            function destroy(vfId) {\r\n                return request.del({\r\n                    vfId: vfId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [vfId]\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                update: function (viewFilter) {\r\n                    return update(viewFilter);\r\n                },\r\n\r\n                destroy: function (vfId) {\r\n                    return destroy(vfId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\n            var request = new SeaRequest('me/{action}');\n\n            function _formatNode(node) {\n                ['date', 'lastDate', 'silencedUntil'].forEach(function (key) {\n                    if (node[key] && typeof (node[key]) === 'string') {\n                        node[key] = new Date(node[key]);\n                    }\n                });\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            return {\n                me: me,\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return request.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function destroy(nId) {\n                return request.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  type\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return get(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaReporting', ['SeaRequest',\r\n    function seaCustomer(SeaRequest) {\r\n            var request = new SeaRequest('reporting/{cId}'),\r\n                reportRequest = new SeaRequest('reporting/{cId}/{rId}');\r\n\r\n            function formatReport(report) {\r\n                ['startDate', 'lastDate', 'nextDate'].forEach(function (prop) {\r\n                    if(report[prop]) {\r\n                        report[prop] = new Date(report[prop]);\r\n                    }\r\n                });\r\n                \r\n                if(report.history) {\r\n                    report.history.forEach(function (generated) {\r\n                        generated.generatedDate = new Date(generated.generatedDate);\r\n                    });\r\n                }\r\n                \r\n                return report;\r\n            }\r\n        \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (reports) {\r\n                    reports.forEach(formatReport);\r\n                    return reports;\r\n                });\r\n            }\r\n        \r\n            function listTypes(cId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: 'type'\r\n                });\r\n            }\r\n\r\n            function get(cId, rId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: rId\r\n                }).then(function (report) {\r\n                    return formatReport(report);\r\n                });\r\n            }\r\n        \r\n            function destroy(cId, rId) {\r\n                return reportRequest.del({\r\n                    cId: cId,\r\n                    rId: rId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                type: {\r\n                    list: function (cId) {\r\n                        return listTypes(cId);\r\n                    }\r\n                },\r\n                \r\n                report: {\r\n                    get: function (cId, rId) {\r\n                        return get(cId, rId);\r\n                    },\r\n                    \r\n                    /**\r\n                     * create report\r\n                     * @param {Object} params\r\n                     * @config {String} [cId]\r\n                     * @config {String} [rtId]\r\n                     * @config {String} [targetId]\r\n                     * @config {String} [repeatInterval]\r\n                     * @config {String} [recipients]\r\n                     */\r\n                    create: function(params) {\r\n                        return create(params);\r\n                    },\r\n                    \r\n                    destroy: function (cId, rId) {\r\n                        return destroy(cId, rId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingAntivirus', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/virus/1.0/{section}/{action}'));\r\n\r\n            function format(container) {\r\n                if (!container.EventList) {\r\n                    return container;\r\n                }\r\n\r\n                container.EventList.forEach(function (job) {\r\n                    ['Timestamp'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig;\r\n\r\n                if (!angular.isArray(containerConfig)) {\r\n                    containerConfig = [containerConfig];\r\n                }\r\n\r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n\r\n                return request.post({\r\n                    section: 'container',\r\n                    ContainerList: containerConfig\r\n                });\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'container';\r\n                query.action = 'get';\r\n                \r\n                return request.post(query);\r\n            }\r\n        \r\n            function getEvents(customerId, cId, paging) {\r\n                return listEvents(customerId, [cId], paging).then(function (history) {\r\n                    return (history[0] || {}).EventList;\r\n                });\r\n            }\r\n\r\n            function listEvents(customerId, containerIds, paging) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'event';\r\n                query.action = 'get';\r\n\r\n                if (paging) {\r\n                    query.Index = paging.index;\r\n                    query.Count = paging.count;\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function checkEvents(customerId, containerIds, eventIds) {\r\n                var query = helper.getEventIds(eventIds);\r\n                query.section = 'event';\r\n                query.action = 'check';\r\n                \r\n                return request.post(query);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n\r\n                /**\r\n                 * activate antivirus on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n\r\n                event: {\r\n                    get: function (customerId, cId, paging) {\r\n                        return getEvents(customerId, cId, paging);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, paging) {\r\n                        return getEvents(customerId, containerIds, paging);\r\n                    },\r\n                    \r\n                    check: function (customerId, containerIds, eventIds) {\r\n                        return checkEvents(customerId, containerIds, eventIds);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingIasHelper', [ '$q', 'seaConfig',\r\n    function seaRemotingPcvisit($q, seaConfig) {\r\n            function getContainerIds(containerIds) {\r\n                return convertIds(containerIds, 'ContainerIdList', 'ContainerId');\r\n            }\r\n\r\n            function getSoftwareIds(softwareIds) {\r\n                return convertIds(softwareIds, 'SoftwareIdList', 'SoftwareId');\r\n            }\r\n\r\n            function getJobIds(jobIds) {                \r\n                return convertIds(jobIds, 'JobIdList', 'JobId');\r\n            }\r\n        \r\n            function getEventIds(eventIds) {\r\n                return convertIds(eventIds, 'EventIdList', 'EventId');\r\n            }\r\n        \r\n            function convertIds(ids, rootName, subName) {\r\n                if (!angular.isArray(ids)) {\r\n                    ids = [ids];\r\n                }\r\n\r\n                var query = ids.map(function (id) {\r\n                    var o = {};\r\n                    o[subName] = id;\r\n                    return o;\r\n                });\r\n\r\n                var o = {};\r\n                o[rootName] = query;\r\n                \r\n                return o;\r\n            }\r\n\r\n            function idListResult(result) {\r\n                if (result.Msg == 'success') {\r\n                    return $q.resolve(result.IdList.map(function (entry) {\r\n                        return entry.Id;\r\n                    }));\r\n                }\r\n\r\n                return $q.reject(new Error(result.Msg));\r\n            }\r\n        \r\n            function getUrl(path) {\r\n                return [seaConfig.getPatchUrl(), path].join('/');\r\n            }\r\n\r\n            return {\r\n                getContainerIds: getContainerIds,\r\n                getSoftwareIds: getSoftwareIds,\r\n                getJobIds: getJobIds,\r\n                getEventIds: getEventIds,\r\n                idListResult: idListResult,\r\n                getUrl: getUrl\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingNetwork', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('network/{customerId}/{cId}/system/{action}');\r\n\r\n            function format(job) {\r\n                if (job && job.createdAt) {\r\n                    job.createdAta = new Date(job.createdAt);\r\n                }\r\n\r\n                return job;\r\n            }\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function install(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function getInstallStatus(params) {\r\n                params = params || {};\r\n                \r\n                var customerId = params.customerId,\r\n                    cId = params.cId,\r\n                    version = params.version,\r\n                    jobIds = params.jobIds;\r\n                \r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'installstatus',\r\n                    v: version,\r\n                    jobIds: jobIds\r\n                }).then(function (jobs) {\r\n                   jobs.forEach(format);\r\n                    return jobs;\r\n                });\r\n            }\r\n\r\n            return {\r\n                system: {\r\n                    /**\r\n                     * list active directory of OCC Connector\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     */\r\n                    list: function (params) {\r\n                        return list(params);\r\n                    },\r\n\r\n                    /**\r\n                     * install Server-Eye on remote system\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     * @config {String} [host] Name of the host Server-Eye will be installed on\r\n                     */\r\n                    install: function (params) {\r\n                        return install(params);\r\n                    },\r\n\r\n                    /**\r\n                     * get the install status of install jobs\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {Array}  [jobIds]\r\n                     * @config {Integer} [version] remote install version\r\n                     */\r\n                    installStatus: function (params) {\r\n                        return getInstallStatus(params);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatch', ['$http', 'SeaRequest', 'seaRemotingIasHelper', 'seaRemotingPatchHistory', 'seaRemotingPatchInstall', 'seaRemotingPatchReboot', 'seaRemotingPatchScan', 'seaRemotingPatchSoftware',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper, seaRemotingPatchHistory, seaRemotingPatchInstall, seaRemotingPatchReboot, seaRemotingPatchScan, seaRemotingPatchSoftware) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/{section}/{action}'));\r\n        \r\n            function format(container) {\r\n                if(container.LastScanTime) {\r\n                    container.LastScanTime = new Date(container.LastScanTime);\r\n                }\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n                \r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig,\r\n                    cron = params.cron;\r\n                \r\n                if(!angular.isArray(containerConfig)) {\r\n                    containerConfig = [ containerConfig ];\r\n                }\r\n                \r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n                \r\n                return request.post({\r\n                    ContainerList: containerConfig,\r\n                    Cron: cron\r\n                });\r\n            }\r\n        \r\n            function destroy(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                \r\n                return request.del(query)\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * activate patchmanagement on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 * @config {String} [cron]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n                deactivate: function (customerId, containerIds) {\r\n                    return destroy(customerId, containerIds);\r\n                },\r\n                \r\n                history: seaRemotingPatchHistory,\r\n                install: seaRemotingPatchInstall,\r\n                reboot: seaRemotingPatchReboot,\r\n                scan: seaRemotingPatchScan,\r\n                software: seaRemotingPatchSoftware\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPcvisit', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('pcvisit/{customerId}/{cId}/{action}');\r\n\r\n            function format(access) {\r\n                if(access && access.date) {\r\n                    access.data = new Date(access.date);\r\n                }\r\n                \r\n                return access;\r\n            }\r\n        \r\n            function get(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId\r\n                }).then(function (system) {\r\n                    format(system.lastAccess);\r\n                    return system;\r\n                });\r\n            }\r\n        \r\n            function start(params) {\r\n                params = params || {};\r\n                params.action = 'start';\r\n                \r\n                return request.post(params);\r\n            }\r\n\r\n            function isInstalled(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'check'\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function(customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n                \r\n                /**\r\n                 * install pcvisit on remote system\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [supporterId]\r\n                 * @config {String} [supporterPassword]\r\n                 * @config {String} [user]\r\n                 * @config {String} [domain]\r\n                 * @config {String} [password]\r\n                 */\r\n                installAndStart: function (params) {\r\n                    return start(params);\r\n                },\r\n                \r\n                isInstalled: function (customerId, cId) {\r\n                    return isInstalled(customerId, cId);\r\n                },\r\n                \r\n                getConnectFileLink: function (customerId, cId) {\r\n                    return request.formatUrl({\r\n                        customerId: customerId,\r\n                        cId: cId,\r\n                        action: 'file'\r\n                    });\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemoting', ['SeaRequest', 'seaRemotingPcvisit', 'seaRemotingNetwork', 'seaRemotingAntivirus', 'seaRemotingPatch',\r\n    function seaRemoting(SeaRequest, seaRemotingPcvisit, seaRemotingNetwork, seaRemotingAntivirus, seaRemotingPatch) {\r\n            return {\r\n                antivirus: seaRemotingAntivirus,\r\n                pcvisit: seaRemotingPcvisit,\r\n                network: seaRemotingNetwork,\r\n                patch: seaRemotingPatch\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}'),\n                requestCustomer = new SeaRequest('user/{uId}/customer');\n        \n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return request.put(user);\n            }\n\n            function destroy(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n        \n            function listCustomers(uId) {\n                return requestCustomer.get({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n\n                setting: seaUserSetting,\n                group: seaUserGroup,\n                substitude: seaUserSubstitude,\n                customer: {\n                    list: function (uId) {\n                        return listCustomers(uId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchHistory', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/history/{action}'));\r\n        \r\n            function format(container) {\r\n                if(!container.JobList) {\r\n                    return container;\r\n                }\r\n                \r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if(job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId, paging) {\r\n                return list(customerId, [cId], paging).then(function (history) {\r\n                    return (history[0] || {}).JobList;\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, paging) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                if(paging) {\r\n                    query.Index = paging.index;\r\n                    query.Count = paging.count;\r\n                }\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId, paging) {\r\n                    return get(customerId, cId, paging);\r\n                },\r\n\r\n                list: function (customerId, containerIds, paging) {\r\n                    return list(customerId, containerIds, paging);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchInstall', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/install/{action}'));\r\n\r\n            function format(container) {\r\n                if (!container.JobList) {\r\n                    return container;\r\n                }\r\n\r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (install) {\r\n                    return install[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, params) {\r\n                var query;\r\n                params = params || {};\r\n\r\n                if (params.jobIds) {\r\n                    query = helper.getJobIds(params.jobIds);\r\n                    query.action = 'software';\r\n                } else {\r\n                    query = helper.getContainerIds(containerIds);\r\n                    query.action = 'get';\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            function create(params) {\r\n                var customerId = params.customerId,\r\n                    containerId = params.containerId,\r\n                    categories = params.categories,\r\n                    software = params.softwareId,\r\n                    cron = params.cron,\r\n                    postInstall = params.postInstall;\r\n\r\n                var reqParams = {\r\n                    Cron: cron\r\n                };\r\n\r\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\r\n\r\n                if (categories) {\r\n                    reqParams.CategoryList = categories;\r\n                }\r\n                if (software) {\r\n                    reqParams = angular.extend(reqParams, helper.getSoftwareIds(software));\r\n                }\r\n                if (postInstall == null) {\r\n                    postInstall = 'NOTHING';\r\n                }\r\n\r\n                reqParams.PostAction = postInstall;\r\n\r\n                return request.post(reqParams).then(helper.idListResult);\r\n            }\r\n\r\n            function destroy(customerId, jobId) {\r\n                var query = helper.getJobIds(jobId);\r\n\r\n                return request.del(query).then(helper.idListResult);\r\n            }\r\n\r\n            function getSoftware(customerId, jobId) {\r\n                return listSoftware(customerId, [jobId]).then(function (install) {\r\n                    return (install[0] || {});\r\n                });\r\n            }\r\n\r\n            function listSoftware(customerId, jobIds) {\r\n                var query = helper.getJobIds(jobIds);\r\n                query.action = 'software';\r\n\r\n                return request.post(query).then(function(containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds, params) {\r\n                    return list(customerId, containerIds, params);\r\n                },\r\n\r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerId]\r\n                 * @config {String|Array} [softwareId]\r\n                 * @config {Array} [categories]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (customerId, jobId) {\r\n                    return destroy(customerId, jobId);\r\n                },\r\n\r\n                getSoftware: function (customerId, jobId) {\r\n                    return getSoftware(customerId, jobId);\r\n                },\r\n\r\n                listSoftware: function (customerId, jobIds) {\r\n                    return listSoftware(customerId, jobIds);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchReboot', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/reboot'));\r\n\r\n            function create(params) {\r\n                var customerId = params.customerId,\r\n                    containerId = params.containerId,\r\n                    cron = params.cron,\r\n                    action = params.action;\r\n\r\n                var reqParams = {\r\n                    Cron: cron,\r\n                    Action: action\r\n                };\r\n\r\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\r\n\r\n                return request.post(reqParams).then(helper.idListResult);\r\n            }\r\n\r\n            function destroy(customerId, jobId) {\r\n                var query = helper.getJobIds(jobId);\r\n\r\n                return request.del(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create reboot job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerId]\r\n                 * @config {String} [action]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (customerId, jobId) {\r\n                    return destroy(customerId, jobId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchScan', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/scan/{action}'));\r\n        \r\n            function format(container) {\r\n                if(!container.JobList) {\r\n                    return container;\r\n                }\r\n                \r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime'].forEach(function (key) {\r\n                        if(job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (scan) {\r\n                    return scan[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function create(params) {\r\n                var query = helper.getContainerIds(params.containerIds);\r\n                query.Cron = params.cron;\r\n                \r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerIds]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchSoftware', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/container/software/{action}')),\r\n                requestSoftware = new SeaRequest(helper.getUrl('seias/rest/seocc/patch/1.0/software/{method}/{action}'));\r\n\r\n            function get(customerId, softwareId) {\r\n                var query = helper.getSoftwareIds(softwareId);\r\n                query.method = 'get';\r\n\r\n                return requestSoftware.post(query).then(function (result) { return result[0]; });\r\n            }\r\n        \r\n            function getByContainer(customerId, cId, params) {\r\n                return listByContainer(customerId, [cId], params).then(function (software) {\r\n                    return software[0];\r\n                });\r\n            }\r\n\r\n            function listByContainer(customerId, containerIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                if (params.blocked == null) {\r\n                    query.Blocked = 'BOTH';\r\n                } else {\r\n                    query.Blocked = params.blocked ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return request.post(query);\r\n            }\r\n\r\n            function has(customerId, containerIds, softwareIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.SoftwareIdList = helper.getSoftwareIds(softwareIds).SoftwareIdList;\r\n                query.method = 'container';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return requestSoftware.post(query);\r\n            }\r\n\r\n            function block(customerId, containerIds, softwareIds, isBlocked) {\r\n                var query = angular.extend(\r\n                    helper.getContainerIds(containerIds),\r\n                    helper.getSoftwareIds(softwareIds)\r\n                );\r\n                query.action = 'block';\r\n                query.Blocked = isBlocked;\r\n\r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                container: {\r\n                    /**\r\n                     * list software of container\r\n                     * @param {String} customerId\r\n                     * @param {String} containerId\r\n                     * @param {Object} params\r\n                     * @config {Boolean} [installed]\r\n                     * @config {Boolean} [blocked]\r\n                     */\r\n                    get: function (customerId, containerId, params) {\r\n                        return getByContainer(customerId, containerId, params);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, params) {\r\n                        return listByContainer(customerId, containerIds, params);\r\n                    }\r\n                },\r\n\r\n                get: function(customerId, softwareId) {\r\n                    return get(customerId, softwareId);\r\n                },\r\n                \r\n                /**\r\n                 * find out if a container has a specific software installed\r\n                 * @param {String} customerId\r\n                 * @param {String} containerId\r\n                 * @param {String} softwareId\r\n                 * @param {Object} params\r\n                 * @config {Boolean} [installed]\r\n                 */\r\n                has: function (customerId, containerId, softwareId, params) {\r\n                    return has(customerId, containerId, softwareId, params);\r\n                },\r\n\r\n                /**\r\n                 * block software on containers\r\n                 * @param   {String}   customerId   \r\n                 * @param   {String|Array}   containerIds \r\n                 * @param   {String|Array}   softwareIds  \r\n                 * @param   {Boolean}  isBlocked\r\n                 */\r\n                block: function (customerId, containerIds, softwareIds, isBlocked) {\r\n                    return block(customerId, containerIds, softwareIds, isBlocked);\r\n                }\r\n            };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}