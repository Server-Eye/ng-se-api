{"version":3,"sources":["src/module.js","src/config.js","src/request.js","src/socket.js","src/agent/agent.js","src/agent/misc.js","src/agent/note.js","src/agent/notification.js","src/agent/setting.js","src/agent/state.js","src/agent/tag.js","src/agent/type.js","src/container/container.js","src/container/misc.js","src/container/note.js","src/container/notification.js","src/container/proposal.js","src/container/state.js","src/container/tag.js","src/container/template.js","src/auth/auth.js","src/customer/apiKey.js","src/customer/bucket.js","src/customer/customer.js","src/customer/dispatchTime.js","src/customer/externalCall.js","src/customer/manager.js","src/customer/setting.js","src/customer/tag.js","src/customer/template.js","src/customer/usage.js","src/customer/viewFilter.js","src/me/me.js","src/me/mobilepush.js","src/me/notification.js","src/group/group.js","src/group/setting.js","src/group/user.js","src/reporting/reporting.js","src/remoting/antivirus.js","src/remoting/iasHelper.js","src/remoting/network.js","src/remoting/patch.js","src/remoting/pcvisit.js","src/remoting/remoting.js","src/user/group.js","src/user/setting.js","src/user/substitude.js","src/user/user.js","src/remoting/patch/history.js","src/remoting/patch/install.js","src/remoting/patch/scan.js","src/remoting/patch/software.js"],"names":["angular","module","provider","$httpProvider","config","baseUrl","apiVersion","apiKey","getUrl","path","this","join","interceptors","push","request","reqConfig","headers","response","setBaseUrl","setApiVersion","setApiKey","$get","getBaseUrl","getApiVersion","getApiKey","factory","SeaRequest","seaConfig","$q","$http","urlPath","prototype","formatUrl","params","url","indexOf","keys","Object","i","length","regex","RegExp","test","replace","send","method","deferred","defer","conf","copy","data","Content-Type","then","resp","total","totalCount","resolve","err","reject","promise","get","post","put","del","VALID_EVENTS","$rootScope","fireEvent","name","argsObj","console","log","$broadcast","connect","credentials","rooms","io","error","connectUrl","reduce","p","key","sio","settings","on","onerror","onconnect","userId","roomId","forEach","evtName","ondata","sendSettings","emit","connected","hasEverBeenConnected","reconnected","evt","type","targetNode","date","Date","lastDate","toLowerCase","seaAgentNote","seaAgentNotification","seaAgentMisc","seaAgentSetting","seaAgentState","seaAgentTag","seaAgentType","create","aId","update","agent","destroy","note","actionlog","chart","notification","setting","state","category","restart","tag","formatActionlog","entry","changeDate","changed","JSON","parse","userName","e","email","sur","formatMeasurement","m","ts","listActionlog","action","getChart","parentId","listCategories","list","entries","chartConfig","measurements","formatNote","postedOn","notes","count","nId","remote","param","remoteRequest","formatState","silencedUntil","hints","formatHint","hint","hintRequest","stats","isArray","statesById","states","tId","format","agentKnown","updateDate","listSettings","akId","aks","map","seaContainerMisc","seaContainerNote","seaContainerNotification","seaContainerProposal","seaContainerState","seaContainerTag","seaContainerTemplate","formatContainer","container","lastBootUpTime","cId","listAgents","api","proposal","template","extend","getInventory","inventory","getFileLink","stop","until","start","accept","pId","deny","assign","createApiKey","login","logout","validUntil","createdOn","requestDistri","apiKeys","bucket","bId","listUser","userRequest","addUser","removeUser","uId","user","seaCustomerApiKey","seaCustomerBucket","seaCustomerDispatchTime","seaCustomerExternalCall","seaCustomerManager","seaCustomerSetting","seaCustomerTag","seaCustomerTemplate","seaCustomerUsage","seaCustomerViewFilter","customer","dispatchTime","externalCall","manager","usage","viewFilter","dtId","ecall","ecalls","add","remove","requestAgent","destroyAgent","u","year","month","vfId","seaMeMobilepush","seaMeNotification","_formatNode","node","_formatData","idx","splice","len","me","feed","nodes","mobilepush","handle","seaGroupSetting","seaGroupUser","gId","group","formatReport","report","prop","history","generated","generatedDate","reports","listTypes","reportRequest","rId","helper","EventList","job","activate","containerConfig","customerId","c","ContainerId","containerId","Token","token","section","ContainerList","containerIds","query","getContainerIds","getEvents","paging","listEvents","Index","index","Count","containers","checkEvents","eventIds","getEventIds","event","check","convertIds","getSoftwareIds","softwareIds","getJobIds","jobIds","ids","rootName","subName","id","o","idListResult","result","Msg","IdList","Id","Error","createdAt","createdAta","install","getInstallStatus","version","v","jobs","system","installStatus","seaRemotingPatchHistory","seaRemotingPatchInstall","seaRemotingPatchScan","seaRemotingPatchSoftware","LastScanTime","cron","Cron","deactivate","scan","software","access","lastAccess","isInstalled","installAndStart","getConnectFileLink","seaRemotingPcvisit","seaRemotingNetwork","seaRemotingAntivirus","seaRemotingPatch","antivirus","pcvisit","network","patch","set","substId","substitudeId","seaUserGroup","seaUserSetting","seaUserSubstitude","search","listCustomers","requestCustomer","substitude","JobList","categories","softwareId","postInstall","reqParams","CategoryList","PostAction","jobId","getSoftware","listSoftware","SoftwareInfoList","requestSoftware","getByContainer","listByContainer","Installed","installed","Blocked","blocked","has","SoftwareIdList","block","isBlocked"],"mappings":"CAAA,WACI,YAEAA,SAAQC,OAAO;CCHnB,WACI,YAEAD,SAAQC,OAAO,WAAWC,SAAS,aAAc,gBAC7C,SAA2BC,GACvB,GAAIC,IACAC,QAAS,4BACTC,WAAY,EACZC,OAAQ,KACRC,OAAQ,SAAUC,GACd,OAAQC,KAAKL,QAASK,KAAKJ,WAAYG,GAAME,KAAK,MAI1DR,GAAcS,aAAaC,KAAK,WAC5B,OACIC,QAAW,SAAUC,GAKjB,MAJIX,GAAOG,SACPQ,EAAUC,QAAQ,aAAeZ,EAAOG,QAGrCQ,GAGXE,SAAY,SAAUA,GAClB,MAAOA,OAKnBP,KAAKQ,WAAa,SAAUb,GACxBD,EAAOC,QAAUA,GAGrBK,KAAKS,cAAgB,SAAUb,GAC3BF,EAAOE,WAAaA,GAGxBI,KAAKU,UAAY,SAAUb,GACvBH,EAAOG,OAASA,GAGpBG,KAAKW,KAAO,WACR,OACIC,WAAY,WACR,MAAOlB,GAAOC,SAElBkB,cAAe,WACX,MAAOnB,GAAOE,YAElBkB,UAAW,WACP,MAAOpB,GAAOG,QAElBa,UAAW,SAAUb,GACjBH,EAAOG,OAASA,GAEpBC,OAAQ,SAAUC,GACd,OAAQL,EAAOC,QAASD,EAAOE,WAAYG,GAAME,KAAK,WAM1EX,QAAQC,OAAO,WAAWG,QAAQ,oBAC9B;CChER,WACI,YAEAJ,SAAQC,OAAO,WAAWwB,QAAQ,cAAe,YAAa,KAAM,QACpE,QAASC,GAAWC,EAAWC,EAAIC,GAC3B,QAASH,GAAWI,GAChBpB,KAAKoB,QAAUA,EAsHnB,MApGAJ,GAAWK,UAAUC,UAAY,SAAmBC,EAAQC,GACxDA,EAAMA,GAAOxB,KAAKoB,QAEfI,EAAIC,QAAQ,YAAc,IACzBD,EAAMP,EAAUnB,OAAO0B,GAAOxB,KAAKoB,UAGvCG,EAASA,KAKT,KAHA,GAAIG,GAAOC,OAAOD,KAAKH,GACnBK,EAAIF,EAAKG,OAEND,KAAK,CACR,GAAIE,GAAQ,GAAIC,QAAO,MAAQL,EAAKE,GAAK,MAAO,KAC5CE,GAAME,KAAKR,KACXA,EAAMA,EAAIS,QAAQH,EAAOP,EAAOG,EAAKE,WAC9BL,GAAOG,EAAKE,KAM3B,MAFAJ,GAAMA,EAAIS,QAAQ,kBAAmB,KAKzCjB,EAAWK,UAAUa,KAAO,SAAcC,EAAQZ,EAAQH,GACtD,GAAIgB,GAAWlB,EAAGmB,QACdC,GACIH,OAAQA,EA6BhB,OA1BAZ,GAASA,MACTA,EAASjC,QAAQiD,KAAKhB,GAEtBe,EAAKd,IAAMxB,KAAKsB,UAAUC,EAAQH,GAEnB,SAAXe,GAAgC,QAAXA,GAA+B,WAAXA,GACzCG,EAAKE,KAAOjB,MACZe,EAAKhC,SACDmC,eAAgB,qBAGpBH,EAAKf,OAASA,MAGlBJ,EAAMmB,GAAMI,KAAK,SAAUC,GACvB,GAAIC,GAAQD,EAAKrC,QAAQ,gBAEb,OAATsC,IACCD,EAAKH,KAAKK,WAAaD,GAG3BR,EAASU,QAAQH,EAAKH,OACvB,SAAUO,GACTX,EAASY,OAAOD,KAGbX,EAASa,SASpBjC,EAAWK,UAAU6B,IAAM,SAAa3B,EAAQH,GAC5C,MAAOpB,MAAKkC,KAAK,MAAOX,EAAQH,IASpCJ,EAAWK,UAAU8B,KAAO,SAAa5B,EAAQH,GAC7C,MAAOpB,MAAKkC,KAAK,OAAQX,EAAQH,IASrCJ,EAAWK,UAAU+B,IAAM,SAAa7B,EAAQH,GAC5C,MAAOpB,MAAKkC,KAAK,MAAOX,EAAQH,IASpCJ,EAAWK,UAAUgC,IAAM,SAAa9B,EAAQH,GAC5C,MAAOpB,MAAKkC,KAAK,SAAUX,EAAQH,IAGhCJ;CC5HnB,WACI,YAEA,IAAIsC,IAAgB,cAAe,WAAY,cAAe,cAAe,gBAE7EhE,SAAQC,OAAO,WAAWwB,QAAQ,aAAc,aAAc,YAC9D,SAAUwC,EAAYtC,GAQd,QAASuC,GAAUC,EAAMC,GACrBA,EAAUA,MACVC,QAAQC,IAAI,YAAa,aAAeH,EAAMC,GAC9CH,EAAWM,WAAW,aAAeJ,EAAMC,GAG/C,QAASI,GAAQC,EAAaC,GAC1B,GAAiB,mBAANC,IAEP,WADAN,SAAQO,MAAM,mCAIlB,IAAIC,GAAalD,EAAUL,YAExBmD,KACCI,GAAcxC,OAAOD,KAAKqC,GAAaK,OAAO,SAAUC,EAAGC,GAEvD,MADAD,KAAOC,EAAKP,EAAYO,IAAOrE,KAAK,MAErC,MAGPsE,EAAMN,GAAGE,GAETK,EAASR,MAAQA,EAEjBO,EAAIE,GAAG,QAASC,GAChBH,EAAIE,GAAG,UAAWE,GAClBJ,EAAIE,GAAG,aAAc,WACjBd,QAAQC,IAAI,uBAEhBW,EAAIE,GAAG,aAAc,WACjBd,QAAQC,IAAI,uBACZc,EAAQ,yBAEZH,EAAIE,GAAG,gBAAiB,WACpBd,QAAQC,IAAI,yBACZc,EAAQ,2BAEZH,EAAIE,GAAG,kBAAmB,WACtBd,QAAQC,IAAI,2BACZc,EAAQ,6BAEZH,EAAIE,GAAG,eAAgB,WACnBd,QAAQC,IAAI,yBAGhBW,EAAIE,GAAG,gBAAiB,SAAUG,EAAQC,GACtClB,QAAQC,IAAIgB,EAAQ,SAAUC,KAIlCvB,EAAawB,QAAQ,SAAUC,GAC3BR,EAAIE,GAAGM,EAAS,SAAUvC,GACtBwC,EAAOD,EAASvC,OAK5B,QAASyC,KACLV,EAAIW,KAAK,WAAYV,GAGzB,QAASE,GAAQ3B,GACbY,QAAQC,IAAI,gBAAiBb,GAC7BoC,GAAY,EACZ3B,EAAU,QAAST,GAGvB,QAAS4B,KACLhB,QAAQC,IAAI,oBACZuB,GAAY,EAERC,IACAC,GAAc,GAGlBD,GAAuB,CAEvB,IAAIE,GAAMD,EAAc,cAAgB,WAExC1B,SAAQC,IAAI,gBAAiB0B,GAE7BL,IAEAzB,EAAU8B,GAGd,QAASN,GAAOO,EAAM/C,GACfA,GAAQA,EAAKgD,aACThD,EAAKgD,WAAWC,OACfjD,EAAKgD,WAAWC,KAAO,GAAIC,MAAKlD,EAAKgD,WAAWC,OAGjDjD,EAAKgD,WAAWG,WACfnD,EAAKgD,WAAWG,SAAW,GAAID,MAAKlD,EAAKgD,WAAWG,YAI5DnC,EAAU+B,EAAKK,cAAepD,GAzGlC,GAGI+B,GAHAY,GAAY,EACZE,GAAc,EACdD,GAAuB,EAGvBZ,IAuGJ,QACIV,QAAS,SAAUC,EAAaC,GAC5B,MAAOF,GAAQC,EAAaC;CCrHhD,WACI,YAEA1E,SAAQC,OAAO,WAAWwB,QAAQ,YAAa,aACN,eAAgB,uBAAwB,eACxC,kBAAmB,gBAAiB,cAAe,eAC5F,SAAkBC,EAAY6E,EAAcC,EAAsBC,EAAcC,EAAiBC,EAAeC,EAAaC,GAGrH,QAASC,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS2B,GAAImD,GACT,MAAOjG,GAAQ8C,KACXmD,IAAKA,IAIb,QAASC,GAAOC,GACZ,MAAOnG,GAAQgD,IAAImD,GAGvB,QAASC,GAAQH,GACb,MAAOjG,GAAQiD,KACXgD,IAAKA,IAlBb,GAAIjG,GAAU,GAAIY,GAAW,cAsB7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAElBgB,KAAMwD,EAAaxD,KAEnBW,IAAK,SAAUmD,GACX,MAAOnD,GAAImD,IAUfC,OAAQ,SAAUC,GACd,MAAOD,GAAOC,IAGlBC,QAAS,SAAUH,GACf,MAAOG,GAAQH,IAGnBI,KAAMZ,EACNa,UAAWX,EAAaW,UACxBC,MAAOZ,EAAaY,MACpBC,aAAcd,EACde,QAASb,EACTc,MAAOb,EACPc,SAAUhB,EAAagB,SACvBC,QAASjB,EAAaiB,QACtBC,IAAKf,EACLX,KAAMY;CCrEtB,WACI,YAEA7G,SAAQC,OAAO,WAAWwB,QAAQ,gBAAiB,aACnD,SAAsBC,GAGd,QAASkG,GAAgBC,GACrBA,EAAMC,WAAa,GAAI1B,MAAKyB,EAAMC,YAClCD,EAAME,QAAUC,KAAKC,MAAMJ,EAAME,QACjC,KACIF,EAAMK,SAAWF,KAAKC,MAAMJ,EAAMK,UACpC,MAAMC,GACJN,EAAMK,UACFE,MAAQP,EAAMK,SACdG,IAAKR,EAAMK,UAGnB,MAAOL,GAGX,QAASS,GAAkBC,GAEvB,MADAA,GAAEC,GAAK,GAAIpC,MAAKmC,EAAEpE,MACXoE,EAGX,QAASE,GAAc1B,EAAK9E,GAIxB,MAHAA,GAASA,MACTA,EAAO8E,IAAMA,EACb9E,EAAOyG,OAAS,YACT5H,EAAQ8C,IAAI3B,GAGvB,QAAS0G,GAAS5B,EAAK9E,GAInB,MAHAA,GAASA,MACTA,EAAO8E,IAAMA,EACb9E,EAAOyG,OAAS,QACT5H,EAAQ8C,IAAI3B,GAGvB,QAASgB,GAAK8D,EAAK6B,GACf,GAAI3G,KAIJ,OAHAA,GAAO8E,IAAMA,EACb9E,EAAO2G,SAAWA,EAClB3G,EAAOyG,OAAS,OACT5H,EAAQ+C,KAAK5B,GAGxB,QAASyF,GAAQX,GACb,GAAI9E,KAGJ,OAFAA,GAAO8E,IAAMA,EACb9E,EAAOyG,OAAS,UACT5H,EAAQ+C,KAAK5B,GAGxB,QAAS4G,KACL,MAAO/H,GAAQ8C,OAAQ,kBAnD3B,GAAI9C,GAAU,GAAIY,GAAW,uBAsD7B,QACI0F,WASI0B,KAAM,SAAU/B,EAAK9E,GACjB,MAAOwG,GAAc1B,EAAK9E,GAAQmB,KAAK,SAAU2F,GAG7C,MAFA/I,SAAQwF,QAAQuD,EAASnB,GAElBmB,MAInB1B,OAUIzD,IAAK,SAAUmD,EAAK9E,GAChB,MAAO0G,GAAS5B,EAAK9E,GAAQmB,KAAK,SAAU4F,GAGxC,MAFAhJ,SAAQwF,QAAQwD,EAAYC,aAAcX,GAEnCU,MAInBvB,UACIqB,KAAMD,GAQV5F,KAAM,SAAU8D,EAAK6B,GACjB,MAAO3F,GAAK8D,EAAK6B,IAQrBlB,QAAS,SAASX,GACd,MAAOW,GAAQX;CClHnC,WACI,YAEA/G,SAAQC,OAAO,WAAWwB,QAAQ,gBAAiB,aACnD,SAAsBC,GAGd,QAASwH,GAAW/B,GAEhB,MADAA,GAAKgC,SAAW,GAAI/C,MAAKe,EAAKgC,UACvBhC,EAGX,QAASL,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAAQmB,KAAK8F,GAGrC,QAASJ,GAAK/B,GACV,MAAOjG,GAAQ8C,KACXmD,IAAKA,IACN3D,KAAK,SAAUgG,GAGd,MAFApJ,SAAQwF,QAAQ4D,EAAOF,GAEhBE,IAIf,QAASC,GAAMtC,GACX,MAAOjG,GAAQ8C,KACXmD,IAAKA,EACLuC,IAAK,UAIb,QAASpC,GAAQH,EAAKuC,GAClB,MAAOxI,GAAQiD,KACXgD,IAAKA,EACLuC,IAAKA,IA/Bb,GAAIxI,GAAU,GAAIY,GAAW,yBAmC7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,SAAU/B,GACZ,MAAO+B,GAAK/B,IAGhBsC,MAAO,SAAUtC,GACb,MAAOsC,GAAMtC,IAGjBG,QAAS,SAAUH,EAAKuC,GACpB,MAAOpC,GAAQH,EAAKuC;CC5DxC,WACI,YAEAtJ,SAAQC,OAAO,WAAWwB,QAAQ,wBAAyB,aAC3D,SAA8BC,GAGtB,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS+E,GAAOM,GACZ,MAAOxG,GAAQgD,IAAIwD,GAGvB,QAASwB,GAAK/B,GACV,MAAOjG,GAAQ8C,KACXmD,IAAKA,IAIb,QAASG,GAAQH,EAAKuC,GAClB,MAAOxI,GAAQiD,KACXgD,IAAKA,EACLuC,IAAKA,IAnBb,GAAIxI,GAAU,GAAIY,GAAW,iCAuB7B,QAWIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAclB+E,OAAQ,SAAUM,GACd,MAAON,GAAOM,IAGlBwB,KAAM,SAAU/B,GACZ,MAAO+B,GAAK/B,IAGhBG,QAAS,SAAUH,EAAKuC,GACpB,MAAOpC,GAAQH,EAAKuC;CC/DxC,WACI,YAEAtJ,SAAQC,OAAO,WAAWwB,QAAQ,mBAAoB,aACtD,SAAyBC,GAIjB,QAASsF,GAAOO,GACZ,MAAOzG,GAAQgD,IAAIyD,GAGvB,QAASuB,GAAK/B,GACV,MAAOjG,GAAQ8C,KACXmD,IAAKA,IAIb,QAASwC,GAAOC,GACZ,MAAOC,GAAc7F,IAAI4F,GAd7B,GAAI1I,GAAU,GAAIY,GAAW,6BACzB+H,EAAgB,GAAI/H,GAAW,mCAgBnC,QAQIsF,OAAQ,SAAUO,GACd,MAAOP,GAAOO,IAGlBuB,KAAM,SAAU/B,GACZ,MAAO+B,GAAK/B,IAUhBwC,OAAQ,SAAUC,GACd,MAAOD,GAAOC;CC9ClC,WACI,YAEAxJ,SAAQC,OAAO,WAAWwB,QAAQ,iBAAkB,aACpD,SAAuBC,GAIf,QAASgI,GAAYlC,GAYjB,MAXAA,GAAMrB,KAAO,GAAIC,MAAKoB,EAAMrB,MAC5BqB,EAAMnB,SAAW,GAAID,MAAKoB,EAAMnB,UAE7BmB,EAAMmC,gBACLnC,EAAMmC,cAAgB,GAAIvD,MAAKoB,EAAMmC,gBAGtCnC,EAAMoC,OACL5J,QAAQwF,QAAQgC,EAAMoC,MAAOC,GAG1BrC,EAGX,QAASqC,GAAWC,GAEhB,MADAA,GAAK3D,KAAO,GAAIC,MAAK0D,EAAK3D,MACnB2D,EAGX,QAASA,GAAK7H,GACV,MAAO8H,GAAYlG,KAAK5B,GAAQmB,KAAKyG,GAGzC,QAASG,GAAMjD,EAAK9E,GAKhB,MAJAA,GAASA,MACTA,EAAO8E,IAAMA,EACb9E,EAAOY,OAAS,QAET/B,EAAQ8C,IAAI3B,GAGvB,QAAS6G,GAAK/B,EAAK9E,GAIf,MAHAA,GAASA,MACTA,EAAO8E,IAAMA,EAET/G,QAAQiK,QAAQhI,EAAO8E,KAChBjG,EAAQ+C,KAAK5B,EAAQ,eAAemB,KAAK,SAAU8G,GAKtD,MAJAlK,SAAQwF,QAAQnD,OAAOD,KAAK8H,GAAa,SAAUlF,GAC/ChF,QAAQwF,QAAQ0E,EAAWlF,GAAM0E,KAG9BQ,IAGRpJ,EAAQ8C,IAAI3B,GAAQmB,KAAK,SAAU+G,GAGtC,MAFAnK,SAAQwF,QAAQ2E,EAAQT,GAEjBS,IAnDf,GAAIrJ,GAAU,GAAIY,GAAW,8BACzBqI,EAAc,GAAIrI,GAAW,+BAsDjC,QAcIoI,KAAM,SAAU7H,GACZ,MAAO6H,GAAK7H,IAchB6G,KAAM,SAAU/B,EAAK9E,GACjB,MAAO6G,GAAK/B,EAAK9E,IAUrB+H,MAAO,SAAUjD,EAAK9E,GAClB,MAAO+H,GAAMjD,EAAK9E;CCrGtC,WACI,YAEAjC,SAAQC,OAAO,WAAWwB,QAAQ,eAAgB,aAClD,SAAsBC,GAGd,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQgD,IAAI7B,GAGvB,QAAS6G,GAAK/B,GACV,MAAOjG,GAAQ8C,KACXmD,IAAKA,IAIb,QAASG,GAAQH,EAAKqD,GAClB,MAAOtJ,GAAQiD,KACXgD,IAAKA,EACLqD,IAAKA,IAfb,GAAItJ,GAAU,GAAIY,GAAW,wBAmB7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,SAAU/B,GACZ,MAAO+B,GAAK/B,IAGhBG,QAAS,SAAUH,EAAKqD,GACpB,MAAOlD,GAAQH,EAAKqD;CCxCxC,WACI,YAEApK,SAAQC,OAAO,WAAWwB,QAAQ,gBAAiB,aACnD,SAAsBC,GAGd,QAAS2I,GAAOC,GAKZ,MAJGA,GAAWC,aACVD,EAAWC,WAAa,GAAInE,MAAKkE,EAAWC,aAGzCD,EAGX,QAASE,GAAaC,GAClB,MAAO3J,GAAQ8C,KACX6G,KAAMA,GACP,6BAGP,QAAS3B,GAAK7G,GACV,MAAOnB,GAAQ8C,IAAI3B,GAAQmB,KAAK,SAAUsH,GAAO,MAAOA,GAAIC,IAAIN,KAjBpE,GAAIvJ,GAAU,GAAIY,GAAW,aAoB7B,QACI6F,SAMIuB,KAAM,SAAU2B,GACZ,MAAOD,GAAaC,KAI5B3B,KAAMA;CCrCtB,WACI,YAEA9I,SAAQC,OAAO,WAAWwB,QAAQ,gBAAiB,aACJ,mBAAoB,mBAAoB,2BACxC,uBAAwB,oBAAqB,kBAAmB,uBAC/G,SAAsBC,EAAYkJ,EAAkBC,EAAkBC,EAA0BC,EAAsBC,EAAmBC,EAAiBC,GAGlJ,QAASC,GAAgBC,GAIrB,MAHIA,GAAUC,iBACVD,EAAUC,eAAiB,GAAIjF,MAAKgF,EAAUC,iBAE3CD,EAGX,QAASxH,GAAI0H,GACT,MAAOxK,GAAQ8C,KACX0H,IAAKA,IACNlI,KAAK+H,GAGZ,QAASI,GAAWD,GAChB,MAAOxK,GAAQ8C,KACX0H,IAAKA,EACL5C,OAAQ,WAIhB,QAAS1B,GAAOoE,GACZ,MAAOtK,GAAQgD,IAAIsH,GAGvB,QAASlE,GAAQoE,GACb,MAAOxK,GAAQiD,KACXuH,IAAKA,IA5Bb,GAAIxK,GAAU,GAAIY,GAAW,4BAgCzB8J,GACA5H,IAAK,SAAU0H,GACX,MAAO1H,GAAI0H,IAYftE,OAAQ,SAAUoE,GACd,MAAOpE,GAAOoE,IAGlBlE,QAAS,SAAUoE,GACf,MAAOpE,GAAQoE,IAGnBrE,OACI6B,KAAM,SAAUwC,GACZ,MAAOC,GAAWD,KAI1BnE,KAAM0D,EACNvD,aAAcwD,EACdW,SAAUV,EACVvD,MAAOwD,EACPrD,IAAKsD,EACLS,SAAUR,EAKd,OAFAlL,SAAQ2L,OAAOH,EAAKZ,GAEbY;CC7EnB,WACI,YAEAxL,SAAQC,OAAO,WAAWwB,QAAQ,oBAAqB,aACvD,SAA0BC,GAGlB,QAASkG,GAAgBC,GACrBA,EAAMC,WAAa,GAAI1B,MAAKyB,EAAMC,YAClCD,EAAME,QAAUC,KAAKC,MAAMJ,EAAME,QACjC,KACIF,EAAMK,SAAWF,KAAKC,MAAMJ,EAAMK,UACpC,MAAMC,GACJN,EAAMK,UACFE,MAAQP,EAAMK,SACdG,IAAKR,EAAMK,UAGnB,MAAOL,GAGX,QAASY,GAAc6C,EAAKrJ,GAIxB,MAHAA,GAASA,MACTA,EAAOqJ,IAAMA,EACbrJ,EAAOyG,OAAS,YACT5H,EAAQ8C,IAAI3B,GAGvB,QAAS2J,GAAaN,EAAKrJ,GAIvB,MAHAA,GAASA,MACTA,EAAOqJ,IAAMA,EACbrJ,EAAOyG,OAAS,YACT5H,EAAQ8C,IAAI3B,GAGvB,QAASyG,GAAO4C,EAAK5C,EAAQzG,GAIzB,MAHAA,GAASA,MACTA,EAAOqJ,IAAMA,EACbrJ,EAAOyG,OAASA,EACT5H,EAAQ+C,KAAK5B,GAlCxB,GAAInB,GAAU,GAAIY,GAAW,2BAqC7B,QACI0F,WASI0B,KAAM,SAAUwC,EAAKrJ,GACjB,MAAOwG,GAAc6C,EAAKrJ,GAAQmB,KAAK,SAAU2F,GAG7C,MAFA/I,SAAQwF,QAAQuD,EAASnB,GAElBmB,MAKnB8C,WAQIjI,IAAK,SAAU0H,EAAKrJ,GAChB,MAAO2J,GAAaN,EAAKrJ,IAG7B6J,YAAa,SAAUR,EAAKrJ,GAKxB,MAJAA,GAASA,MACTA,EAAOqJ,IAAMA,EACbrJ,EAAOyG,OAAS,YAET5H,EAAQkB,UAAUC,KASjCyF,QAAS,SAAU4D,GACf,MAAO5C,GAAO4C,EAAK,YASvBS,KAAM,SAAUT,EAAKU,GACjB,MAAOtD,GAAO4C,EAAK,QACfU,MAAOA,KASfC,MAAO,SAAUX,GACb,MAAO5C,GAAO4C,EAAK;CC7GvC,WACI,YAEAtL,SAAQC,OAAO,WAAWwB,QAAQ,oBAAqB,aACvD,SAA0BC,GAGlB,QAASwH,GAAW/B,GAEhB,MADAA,GAAKgC,SAAW,GAAI/C,MAAKe,EAAKgC,UACvBhC,EAGX,QAASL,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAAQmB,KAAK8F,GAGrC,QAASJ,GAAKwC,GACV,MAAOxK,GAAQ8C,KACX0H,IAAKA,IACNlI,KAAK,SAAUgG,GAGd,MAFApJ,SAAQwF,QAAQ4D,EAAOF,GAEhBE,IAIf,QAASC,GAAMiC,GACX,MAAOxK,GAAQ8C,KACX0H,IAAKA,EACLhC,IAAK,UAIb,QAASpC,GAAQoE,EAAKhC,GAClB,MAAOxI,GAAQiD,KACXuH,IAAKA,EACLhC,IAAKA,IA/Bb,GAAIxI,GAAU,GAAIY,GAAW,6BAmC7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAGhBjC,MAAO,SAAUiC,GACb,MAAOjC,GAAMiC,IAGjBpE,QAAS,SAAUoE,EAAKhC,GACpB,MAAOpC,GAAQoE,EAAKhC;CC5DxC,WACI,YAEAtJ,SAAQC,OAAO,WAAWwB,QAAQ,4BAA6B,aAC/D,SAAkCC,GAG1B,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS+E,GAAOM,GACZ,MAAOxG,GAAQgD,IAAIwD,GAGvB,QAASwB,GAAKwC,GACV,MAAOxK,GAAQ8C,KACX0H,IAAKA,IAIb,QAASpE,GAAQoE,EAAKhC,GAClB,MAAOxI,GAAQiD,KACXuH,IAAKA,EACLhC,IAAKA,IAnBb,GAAIxI,GAAU,GAAIY,GAAW,qCAuB7B,QAWIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAclB+E,OAAQ,SAAUM,GACd,MAAON,GAAOM,IAGlBwB,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAGhBpE,QAAS,SAAUoE,EAAKhC,GACpB,MAAOpC,GAAQoE,EAAKhC;CC/DxC,WACI,YAEAtJ,SAAQC,OAAO,WAAWwB,QAAQ,wBAAyB,aAC3D,SAA8BC,GAGtB,QAASwK,GAAOZ,EAAKa,GACjB,MAAOrL,GAAQgD,KACXwH,IAAKA,EACLa,IAAKA,IAIb,QAASrD,GAAKwC,GACV,MAAOxK,GAAQ8C,KACX0H,IAAKA,IAIb,QAASc,GAAKd,EAAKa,GACf,MAAOrL,GAAQiD,KACXuH,IAAKA,EACLa,IAAKA,IAIb,QAAS3B,GAAac,EAAKa,GACvB,MAAOrL,GAAQ8C,KACX0H,IAAKA,EACLa,IAAKA,GACN,0CA1BP,GAAIrL,GAAU,GAAIY,GAAW,iCA6B7B,QACIwK,OAAQ,SAAUZ,EAAKa,GACnB,MAAOD,GAAOZ,EAAKa,IAGvBrD,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAGhBc,KAAM,SAAUd,EAAKa,GACjB,MAAOC,GAAKd,EAAKa,IAGrBjH,UACI4D,KAAM,SAAUwC,EAAKa,GACjB,MAAO3B,GAAac,EAAKa;CCjDjD,WACI,YAEAnM,SAAQC,OAAO,WAAWwB,QAAQ,qBAAsB,aACxD,SAA2BC,GAInB,QAASgI,GAAYlC,GAYjB,MAXAA,GAAMrB,KAAO,GAAIC,MAAKoB,EAAMrB,MAC5BqB,EAAMnB,SAAW,GAAID,MAAKoB,EAAMnB,UAE7BmB,EAAMmC,gBACLnC,EAAMmC,cAAgB,GAAIvD,MAAKoB,EAAMmC,gBAGtCnC,EAAMoC,OACL5J,QAAQwF,QAAQgC,EAAMoC,MAAOC,GAG1BrC,EAGX,QAASqC,GAAWC,GAEhB,MADAA,GAAK3D,KAAO,GAAIC,MAAK0D,EAAK3D,MACnB2D,EAGX,QAASA,GAAK7H,GACV,MAAO8H,GAAYlG,KAAK5B,GAAQmB,KAAKyG,GAGzC,QAASG,GAAMsB,EAAKrJ,GAKhB,MAJAA,GAASA,MACTA,EAAOqJ,IAAMA,EACbrJ,EAAOY,OAAS,QAET/B,EAAQ8C,IAAI3B,GAGvB,QAAS6G,GAAKwC,EAAKrJ,GAIf,MAHAA,GAASA,MACTA,EAAOqJ,IAAMA,EAETtL,QAAQiK,QAAQhI,EAAOqJ,KAChBxK,EAAQ+C,KAAK5B,EAAQ,mBAAmBmB,KAAK,SAAU8G,GAC1DlK,QAAQwF,QAAQnD,OAAOD,KAAK8H,GAAa,SAAUlF,GAC/ChF,QAAQwF,QAAQ0E,EAAWlF,GAAM0E,OAItC5I,EAAQ8C,IAAI3B,GAAQmB,KAAK,SAAU+G,GAGtC,MAFAnK,SAAQwF,QAAQ2E,EAAQT,GAEjBS,IAjDf,GAAIrJ,GAAU,GAAIY,GAAW,kCACzBqI,EAAc,GAAIrI,GAAW,mCAoDjC,QAcIoI,KAAM,SAAU7H,GACZ,MAAO6H,GAAK7H,IAchB6G,KAAM,SAAUwC,EAAKrJ,GACjB,MAAO6G,GAAKwC,EAAKrJ,IAUrB+H,MAAO,SAAUsB,EAAKrJ,GAClB,MAAO+H,GAAMsB,EAAKrJ;CCnGtC,WACI,YAEAjC,SAAQC,OAAO,WAAWwB,QAAQ,mBAAoB,aACtD,SAAsBC,GAGd,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQgD,IAAI7B,GAGvB,QAAS6G,GAAKwC,GACV,MAAOxK,GAAQ8C,KACX0H,IAAKA,IAIb,QAASpE,GAAQoE,EAAKlB,GAClB,MAAOtJ,GAAQiD,KACXuH,IAAKA,EACLlB,IAAKA,IAfb,GAAItJ,GAAU,GAAIY,GAAW,4BAmB7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAGhBpE,QAAS,SAAUoE,EAAKlB,GACpB,MAAOlD,GAAQoE,EAAKlB;CCxCxC,WACI,YAEApK,SAAQC,OAAO,WAAWwB,QAAQ,wBAAyB,aAC3D,SAA8BC,GAGtB,QAASoF,GAAOwE,GACZ,MAAOxK,GAAQ+C,MACXyH,IAAKA,IAIb,QAASe,GAAOf,EAAKlB,GACjB,MAAOtJ,GAAQ+C,MACXyH,IAAKA,EACLlB,IAAKA,IAXb,GAAItJ,GAAU,GAAIY,GAAW,iCAe7B,QAKIoF,OAAQ,SAAUwE,GACd,MAAOxE,GAAOwE,IAQlBe,OAAQ,SAAUf,EAAKlB,GACnB,MAAOiC,GAAOf,EAAKlB;CCnCvC,WACI,YAEApK,SAAQC,OAAO,WAAWwB,QAAQ,WAAY,aAC9C,SAAiBC,GAGT,QAAS4K,GAAarK,GAIlB,MAHAA,GAASA,MACTA,EAAOyG,OAAS,MAET5H,EAAQ+C,KAAK5B,GAGxB,QAASsK,GAAMtK,GAIX,MAHAA,GAASA,MACTA,EAAOyG,OAAS,QAET5H,EAAQ+C,KAAK5B,GAGxB,QAASuK,GAAOvK,GAIZ,MAHAA,GAASA,MACTA,EAAOyG,OAAS,SAET5H,EAAQ8C,IAAI3B,GApBvB,GAAInB,GAAU,GAAIY,GAAW,gBAuB7B,QAUI4K,aAAc,SAAUrK,GACpB,MAAOqK,GAAarK,IAYxBsK,MAAO,SAAUtK,GACb,MAAOsK,GAAMtK,IAGjBuK,OAAQ,WACJ,MAAOA;CCxD3B,WACI,YAEAxM,SAAQC,OAAO,WAAWwB,QAAQ,qBAAsB,aACxD,SAAwBC,GAIhB,QAAS2I,GAAO9J,GASZ,MARGA,GAAOkM,aACNlM,EAAOkM,WAAa,GAAIrG,MAAK7F,EAAOkM,aAGrClM,EAAOmM,YACNnM,EAAOmM,UAAY,GAAItG,MAAK7F,EAAOmM,YAGhCnM,EAGX,QAASuI,GAAKwC,GACV,GAAIvG,EAUJ,OALIA,GAHAuG,EAGIxK,EAAQ8C,KACR0H,IAAKA,IAHLqB,EAAc/I,MAOfmB,EAAE3B,KAAK,SAAUwJ,GAGpB,MAFA5M,SAAQwF,QAAQoH,EAASvC,GAElBuC,IAIf,QAAShJ,GAAI0H,EAAK/K,GACd,MAAOO,GAAQ8C,KACX0H,IAAKA,EACL/K,OAAQA,IACT6C,KAAKiH,GAGZ,QAASnD,GAAQoE,EAAK/K,GAClB,MAAOO,GAAQiD,KACXuH,IAAKA,EACL/K,OAAQA,IA3ChB,GAAIO,GAAU,GAAIY,GAAW,kCACzBiL,EAAgB,GAAIjL,GAAW,2BA8CnC,QAKIoH,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAGhB1H,IAAK,SAAU0H,EAAK/K,GAChB,MAAOqD,GAAI0H,EAAK/K,IAGpB2G,QAAS,SAAUoE,EAAK/K,GACpB,MAAO2G,GAAQoE,EAAK/K;CClExC,WACI,YAEAP,SAAQC,OAAO,WAAWwB,QAAQ,qBAAsB,aACxD,SAAiCC,GAIzB,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS6G,KACL,MAAOhI,GAAQ8C,MAGnB,QAASoD,GAAO6F,GACZ,MAAO/L,GAAQgD,IAAI+I,GAGvB,QAAS3F,GAAQ4F,GACb,MAAOhM,GAAQiD,KACX+I,IAAKA,IAIb,QAASC,GAASD,GACd,MAAOE,GAAYpJ,KACfkJ,IAAKA,IAIb,QAASG,GAAQhL,GACb,MAAO+K,GAAYlJ,IAAI7B,GAG3B,QAASiL,GAAWJ,EAAKK,GACrB,MAAOH,GAAYjJ,KACf+I,IAAKA,EACLK,IAAKA,IAlCb,GAAIrM,GAAU,GAAIY,GAAW,yBACzBsL,EAAc,GAAItL,GAAW,mCAqCjC,QAMIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,WACF,MAAOA,MASX9B,OAAQ,SAAU6F,GACd,MAAO7F,GAAO6F,IAGlB3F,QAAS,SAAU4F,GACf,MAAO5F,GAAQ4F,IAGnBM,MACItE,KAAM,SAAUgE,GACZ,MAAOC,GAASD,IASpBhG,OAAQ,SAAU7E,GACd,MAAOgL,GAAQhL,IAQnBiF,QAAS,SAAU4F,EAAKK,GACpB,MAAOD,GAAWJ,EAAKK;CC5F/C,WACI,YAEAnN,SAAQC,OAAO,WAAWwB,QAAQ,eAAgB,aAAc,oBAAqB,oBAAqB,0BAA2B,0BAA2B,qBAAsB,qBAAsB,iBAAkB,sBAAuB,mBAAoB,wBACzQ,SAAqBC,EAAY2L,EAAmBC,EAAmBC,EAAyBC,EAAyBC,EAAoBC,EAAoBC,EAAgBC,EAAqBC,EAAkBC,GAGhN,QAAShF,KACL,MAAOhI,GAAQ8C,MAGnB,QAASA,GAAI0H,GACT,MAAOxK,GAAQ8C,KACX0H,IAAKA,IAIb,QAAStE,GAAO+G,GACZ,MAAOjN,GAAQgD,IAAIiK,GAbvB,GAAIjN,GAAU,GAAIY,GAAW,iBAgB7B,QACIoH,KAAM,WACF,MAAOA,MAGXlF,IAAK,SAAU0H,GACX,MAAO1H,GAAI0H,IAiBftE,OAAQ,SAAU+G,GACd,MAAO/G,GAAO+G,IAGlBxN,OAAQ8M,EACRR,OAAQS,EACRU,aAAcT,EACdU,aAAcT,EACdU,QAAST,EACTlG,QAASmG,EACT/F,IAAKgG,EACLjC,SAAUkC,EACVO,MAAON,EACPO,WAAYN;CCzD5B,WACI,YAEA9N,SAAQC,OAAO,WAAWwB,QAAQ,2BAA4B,aAC9D,SAAiCC,GAGzB,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS6G,KACL,MAAOhI,GAAQ8C,MAGnB,QAASoD,GAAOgH,GACZ,MAAOlN,GAAQgD,IAAIkK,GAGvB,QAAS9G,GAAQmH,GACb,MAAOvN,GAAQiD,KACXsK,KAAMA,IAhBd,GAAIvN,GAAU,GAAIY,GAAW,+BAoB7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,WACF,MAAOA,MAUX9B,OAAQ,SAAUgH,GACd,MAAOhH,GAAOgH,IAGlB9G,QAAS,SAAUmH,GACf,MAAOnH,GAAQmH;CCpDnC,WACI,YAEArO,SAAQC,OAAO,WAAWwB,QAAQ,2BAA4B,aAC9D,SAAwBC,GAGhB,QAAS2I,GAAOiE,GAKZ,MAJGA,GAAMjI,WACLiI,EAAMjI,SAAW,GAAID,MAAKkI,EAAMjI,WAG7BiI,EAGX,QAASxF,KACL,MAAO6D,GAAc/I,MAAMR,KAAK,SAAUmL,GAGtC,MAFAvO,SAAQwF,QAAQ+I,EAAQlE,GAEjBkE,IAdf,GAAI5B,GAAgB,GAAIjL,GAAW,wBAkBnC,QAIIoH,KAAM,WACF,MAAOA;CC5B3B,WACI,YAEA9I,SAAQC,OAAO,WAAWwB,QAAQ,sBAAuB,aACzD,SAAwBC,GAGhB,QAASoH,GAAKwC,GACV,MAAOxK,GAAQ8C,KACX0H,IAAKA,IAIb,QAAS2B,GAAQ3B,EAAKlD,GAClB,MAAOtH,GAAQgD,KACXwH,IAAKA,EACL6B,IAAK/E,IAIb,QAAS8E,GAAW5B,EAAK6B,GACrB,MAAOrM,GAAQiD,KACXuH,IAAKA,EACL6B,IAAKA,IAlBb,GAAIrM,GAAU,GAAIY,GAAW,+BAsB7B,QACIoH,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAShBkD,IAAK,SAAUlD,EAAKlD,GAChB,MAAO6E,GAAQ3B,EAAKlD,IAGxBqG,OAAQ,SAAUnD,EAAK6B,GACnB,MAAOD,GAAW5B,EAAK6B;CC3C3C,WACI,YAEAnN,SAAQC,OAAO,WAAWwB,QAAQ,sBAAuB,aACzD,SAA4BC,GAGpB,QAASoH,GAAKwC,GACV,MAAOxK,GAAQ8C,KACX0H,IAAKA,IAIb,QAAStE,GAAOsE,EAAKpG,GAGjB,MAFAA,GAAWA,MACXA,EAASoG,IAAMA,EACRxK,EAAQgD,IAAIoB,GAXvB,GAAIpE,GAAU,GAAIY,GAAW,yBAc7B,QACIoH,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAQhBtE,OAAQ,SAAUsE,EAAKpG,GACnB,MAAO8B,GAAOsE,EAAKpG;CC9BvC,WACI,YAEAlF,SAAQC,OAAO,WAAWwB,QAAQ,kBAAmB,aACrD,SAAwBC,GAGhB,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS6G,KACL,MAAOhI,GAAQ8C,MAGnB,QAASoD,GAAOW,GACZ,MAAO7G,GAAQgD,IAAI6D,GAGvB,QAAST,GAAQkD,GACb,MAAOtJ,GAAQiD,KACXqG,IAAKA,IAhBb,GAAItJ,GAAU,GAAIY,GAAW,qBAoB7B,QAMIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,WACF,MAAOA,MASX9B,OAAQ,SAAUW,GACd,MAAOX,GAAOW,IAGlBT,QAAS,SAAUkD,GACf,MAAOlD,GAAQkD;CClDnC,WACI,YAEApK,SAAQC,OAAO,WAAWwB,QAAQ,uBAAwB,aAC1D,SAAwBC,GAIhB,QAASoH,KACL,MAAOhI,GAAQ8C,MAGnB,QAAS2H,GAAWnB,GAChB,MAAOsE,GAAa9K,KAChBwG,IAAKA,IAIb,QAASlD,GAAQkD,GACb,MAAOtJ,GAAQiD,KACXqG,IAAKA,IAIb,QAASuE,GAAavE,EAAKrD,GACvB,MAAOjG,GAAQiD,KACXqG,IAAKA,EACLrD,IAAKA,IAtBb,GAAIjG,GAAU,GAAIY,GAAW,2BACzBgN,EAAe,GAAIhN,GAAW,sCAyBlC,QACIoH,KAAM,WACF,MAAOA,MAGX5B,QAAS,SAAUkD,GACf,MAAOlD,GAAQkD,IAGnBnD,OACI6B,KAAM,SAASsB,GACX,MAAOmB,GAAWnB,IAEtBlD,QAAS,SAASkD,EAAKrD,GACnB,MAAO4H,GAAavE,EAAKrD;CC7CjD,WACI,YAEA/G,SAAQC,OAAO,WAAWwB,QAAQ,oBAAqB,aACvD,SAAwBC,GAIhB,QAAS2I,GAAOuE,GAKZ,MAJIA,GAAEzI,OACFyI,EAAEzI,KAAO,GAAIC,MAAKwI,EAAEzI,OAGjByI,EAGX,QAAS9F,GAAK+F,EAAMC,EAAOxD,GACvB,GAAIrJ,IACA4M,KAAMA,EACNC,MAAOA,EAQX,OALIxD,KACArJ,EAAOqJ,IAAMA,GAIVqB,EAAc/I,IAAI3B,GAAQmB,KAAK,SAAU+K,GAG5C,MAFAnO,SAAQwF,QAAQ2I,EAAO9D,GAEhB8D,IAzBf,GACIxB,IADU,GAAIjL,GAAW,wBACT,GAAIA,GAAW,kBA4BnC,QAOIoH,KAAM,SAAU+F,EAAMC,EAAOxD,GACzB,MAAOxC,GAAK+F,EAAMC,EAAOxD;CC1C7C,WACI,YAEAtL,SAAQC,OAAO,WAAWwB,QAAQ,yBAA0B,aAC5D,SAAiCC,GAGzB,QAASoF,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS6G,KACL,MAAOhI,GAAQ8C,MAGnB,QAASoD,GAAOoH,GACZ,MAAOtN,GAAQgD,IAAIsK,GAGvB,QAASlH,GAAQ6H,GACb,MAAOjO,GAAQiD,KACXgL,KAAMA,IAhBd,GAAIjO,GAAU,GAAIY,GAAW,6BAoB7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB6G,KAAM,WACF,MAAOA,MAUX9B,OAAQ,SAAUoH,GACd,MAAOpH,GAAOoH,IAGlBlH,QAAS,SAAU6H,GACf,MAAO7H,GAAQ6H;CCpDnC,WACI,YAEA/O,SAAQC,OAAO,WAAWwB,QAAQ,SAAU,aAAc,kBAAmB,oBAC7E,SAAeC,EAAYsN,EAAiBC,GAGpC,QAASC,GAAYC,GAOjB,OANC,OAAQ,WAAY,iBAAiB3J,QAAQ,SAAUR,GAChDmK,EAAKnK,IAA+B,gBAAfmK,GAAKnK,KAC1BmK,EAAKnK,GAAO,GAAIoB,MAAK+I,EAAKnK,OAI3BmK,EAGX,QAASC,GAAYlM,GACjB,GAAImM,GAAMnM,EAAKf,QAAQ,aACnBkN,IAAO,GACPnM,EAAKoM,OAAOD,EAAK,EAGrB,KAAK,GAAI/M,GAAI,EAAGiN,EAAMrM,EAAKX,OAAYgN,EAAJjN,EAASA,IACxC4M,EAAYhM,EAAKZ,GAGrB,OAAOY,GAGX,QAASsM,KACL,MAAO1O,GAAQ8C,MAGnB,QAASmK,KACL,MAAOjN,GAAQ8C,KACX8E,OAAQ,aAIhB,QAAS+G,GAAKxN,GAIV,MAHAA,GAASA,MACTA,EAAOyG,OAAS,OAET5H,EAAQ8C,IAAI3B,GAGvB,QAAS+C,GAAIb,GACT,MAAOrD,GAAQ8C,KACX8E,OAAQ,MACRvE,KAAMA,IAId,QAASuL,GAAMzN,GAIX,MAHAA,GAASA,MACTA,EAAOyG,OAAS,QAET5H,EAAQ8C,IAAI3B,GAAQmB,KAAKgM,GArDpC,GAAItO,GAAU,GAAIY,GAAW,cAwD7B,QACI8N,GAAIA,EACJzB,SAAUA,EACV0B,KAAM,SAAUxN,GACZ,MAAOwN,GAAKxN,IAEhB+C,IAAK,SAAUb,GACX,MAAOa,GAAIb,IAEfuL,MAAO,SAAUzN,GACb,MAAOyN,GAAMzN,IAGjB0N,WAAYX,EACZ1H,aAAc2H;CC3E9B,WACI,YAEAjP,SAAQC,OAAO,WAAWwB,QAAQ,mBAAoB,aACtD,SAAyBC,GAGjB,QAASoH,KACL,MAAOhI,GAAQ8C,MAGnB,QAASkD,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS2B,GAAIgM,GACT,MAAO9O,GAAQ8C,KACXgM,OAAQA,IAIhB,QAAS1I,GAAQ0I,GACb,MAAO9O,GAAQiD,KACX6L,OAAQA,IAlBhB,GAAI9O,GAAU,GAAIY,GAAW,yBAsB7B,QACIoH,KAAMA,EASNhC,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB2B,IAAK,SAAUgM,GACX,MAAOhM,GAAIgM,IAGf1I,QAAS,SAAU0I,GACf,MAAO1I,GAAQ0I;CC9CnC,WACI,YAEA5P,SAAQC,OAAO,WAAWwB,QAAQ,qBAAsB,aACxD,SAA2BC,GAGnB,QAASoH,GAAK7G,GACV,MAAOnB,GAAQ8C,IAAI3B,GAOvB,QAASiF,GAAQoC,GACb,MAAOxI,GAAQiD,KACXuF,IAAKA,IAZb,GAAIxI,GAAU,GAAIY,GAAW,wBAgB7B,QAOIoH,KAAM,SAAU7G,GACZ,MAAO6G,GAAK7G,IAahB+E,OAAQ,SAAUM,GACd,MAAO1D,KAAI0D,IAGfJ,QAAS,SAAUoC,GACf,MAAOpC,GAAQoC;CC/CnC,WACI,YAEAtJ,SAAQC,OAAO,WAAWwB,QAAQ,YAAa,aAAc,kBAAmB,eAChF,SAAkBC,EAAYmO,EAAiBC,GAGvC,QAAShJ,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS2B,GAAImM,GACT,MAAOjP,GAAQ8C,KACXmM,IAAKA,IAIb,QAAS/I,GAAOgJ,GACZ,MAAOlP,GAAQgD,IAAIkM,GAGvB,QAAS9I,GAAQ6I,GACb,MAAOjP,GAAQiD,KACXgM,IAAKA,IAlBb,GAAIjP,GAAU,GAAIY,GAAW,cAsB7B,QAOIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB2B,IAAK,SAAUmM,GACX,MAAOnM,GAAImM,IASf/I,OAAQ,SAAUgJ,GACd,MAAOhJ,GAAOgJ,IAGlB9I,QAAS,SAAU6I,GACf,MAAO7I,GAAQ6I,IAGnBxI,QAASsI,EACTzC,KAAM0C;CCzDtB,WACI,YAEA9P,SAAQC,OAAO,WAAWwB,QAAQ,mBAAoB,aACtD,SAAyBC,GAGjB,QAASoH,GAAKiH,GACV,MAAOjP,GAAQ8C,KACXmM,IAAKA,IAIb,QAAS/I,GAAO+I,EAAK7K,GAGjB,MAFAA,GAAWA,MACXA,EAAS6K,IAAMA,EACRjP,EAAQgD,IAAIoB,GAXvB,GAAIpE,GAAU,GAAIY,GAAW,sBAc7B,QACIoH,KAAM,SAAUiH,GACZ,MAAOjH,GAAKiH,IAQhB/I,OAAQ,SAAU+I,EAAK7K,GACnB,MAAO8B,GAAO+I,EAAK7K;CC9BvC,WACI,YAEAlF,SAAQC,OAAO,WAAWwB,QAAQ,gBAAiB,aACnD,SAAsBC,GAGd,QAASoH,GAAKiH,GACV,MAAOjP,GAAQ8C,KACXmM,IAAKA,IAIb,QAAS9C,GAAQ8C,EAAK5C,GAClB,MAAOrM,GAAQgD,KACXqJ,IAAKA,EACL4C,IAAKA,IAIb,QAAS7C,GAAW6C,EAAK5C,GACrB,MAAOrM,GAAQiD,KACXoJ,IAAKA,EACL4C,IAAKA,IAlBb,GAAIjP,GAAU,GAAIY,GAAW,yBAsB7B,QACIoH,KAAM,SAAUiH,GACZ,MAAOjH,GAAKiH,IAQhBvB,IAAK,SAAUuB,EAAK5C,GAChB,MAAOF,GAAQ8C,EAAK5C,IAQxBsB,OAAQ,SAAUsB,EAAK5C,GACnB,MAAOD,GAAW6C,EAAK5C;CC/C3C,WACI,YAEAnN,SAAQC,OAAO,WAAWwB,QAAQ,gBAAiB,aACnD,SAAqBC,GAIb,QAASuO,GAAaC,GAalB,OAZC,YAAa,WAAY,YAAY1K,QAAQ,SAAU2K,GACjDD,EAAOC,KACND,EAAOC,GAAQ,GAAI/J,MAAK8J,EAAOC,OAIpCD,EAAOE,SACNF,EAAOE,QAAQ5K,QAAQ,SAAU6K,GAC7BA,EAAUC,cAAgB,GAAIlK,MAAKiK,EAAUC,iBAI9CJ,EAGX,QAASpJ,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS6G,GAAKwC,GACV,MAAOxK,GAAQ8C,KACX0H,IAAKA,IACNlI,KAAK,SAAUmN,GAEd,MADAA,GAAQ/K,QAAQyK,GACTM,IAIf,QAASC,GAAUlF,GACf,MAAOmF,GAAc7M,KACjB0H,IAAKA,EACLoF,IAAK,SAIb,QAAS9M,GAAI0H,EAAKoF,GACd,MAAOD,GAAc7M,KACjB0H,IAAKA,EACLoF,IAAKA,IACNtN,KAAK,SAAU8M,GACd,MAAOD,GAAaC,KAI5B,QAAShJ,GAAQoE,EAAKoF,GAClB,MAAOD,GAAc1M,KACjBuH,IAAKA,EACLoF,IAAKA,IAnDb,GAAI5P,GAAU,GAAIY,GAAW,mBACzB+O,EAAgB,GAAI/O,GAAW,wBAsDnC,QACIoH,KAAM,SAAUwC,GACZ,MAAOxC,GAAKwC,IAGhBrF,MACI6C,KAAM,SAAUwC,GACZ,MAAOkF,GAAUlF,KAIzB4E,QACItM,IAAK,SAAU0H,EAAKoF,GAChB,MAAO9M,GAAI0H,EAAKoF,IAYpB5J,OAAQ,SAAS7E,GACb,MAAO6E,GAAO7E,IAGlBiF,QAAS,SAAUoE,EAAKoF,GACpB,MAAOxJ,GAAQoE,EAAKoF;CC1F5C,WACI,YAEA1Q,SAAQC,OAAO,WAAWwB,QAAQ,wBAAyB,QAAS,aAAc,uBAClF,SAA4BI,EAAOH,EAAYiP,GAGvC,QAAStG,GAAOe,GACZ,MAAKA,GAAUwF,WAIfxF,EAAUwF,UAAUpL,QAAQ,SAAUqL,IACjC,aAAarL,QAAQ,SAAUR,GACxB6L,EAAI7L,KACJ6L,EAAI7L,GAAO,GAAIoB,MAAKyK,EAAI7L,SAK7BoG,GAXIA,EAcf,QAAS0F,GAAS7O,GACd,GACI8O,IADa9O,EAAO+O,WACF/O,EAAO8O,gBAa7B,OAXK/Q,SAAQiK,QAAQ8G,KACjBA,GAAmBA,IAGvBA,EAAkBA,EAAgBpG,IAAI,SAAUsG,GAC5C,OACIC,YAAaD,EAAEE,YACfC,MAAOH,EAAEI,SAIVvQ,EAAQ+C,MACXyN,QAAS,YACTC,cAAeR,IAIvB,QAASnN,GAAIoN,EAAY1F,GACrB,MAAOxC,GAAKkI,GAAa1F,IAG7B,QAASxC,GAAKkI,EAAYQ,GACtB,GAAIC,GAAQd,EAAOe,gBAAgBF,EAInC,OAHAC,GAAMH,QAAU,YAChBG,EAAM/I,OAAS,MAER5H,EAAQ+C,KAAK4N,GAGxB,QAASE,GAAUX,EAAY1F,EAAKsG,GAChC,MAAOC,GAAWb,GAAa1F,GAAMsG,GAAQxO,KAAK,SAAUgN,GACxD,OAAQA,EAAQ,QAAUQ,YAIlC,QAASiB,GAAWb,EAAYQ,EAAcI,GAC1C,GAAIH,GAAQd,EAAOe,gBAAgBF,EASnC,OARAC,GAAMH,QAAU,QAChBG,EAAM/I,OAAS,MAEXkJ,IACAH,EAAMK,MAAQF,EAAOG,MACrBN,EAAMO,MAAQJ,EAAOvI,OAGlBvI,EAAQ+C,KAAK4N,GAAOrO,KAAK,SAAU6O,GAEtC,MADAA,GAAWzM,QAAQ6E,GACZ4H,IAIf,QAASC,GAAYlB,EAAYQ,EAAcW,GAC3C,GAAIV,GAAQd,EAAOyB,YAAYD,EAI/B,OAHAV,GAAMH,QAAU,QAChBG,EAAM/I,OAAS,QAER5H,EAAQ+C,KAAK4N,GA9ExB,GAAI3Q,GAAU,GAAIY,GAAW,4EAiF7B,QACIkC,IAAK,SAAUoN,EAAY1F,GACvB,MAAO1H,GAAIoN,EAAY1F,IAG3BxC,KAAM,SAAUkI,EAAYQ,GACxB,MAAO1I,GAAKkI,EAAYQ,IAW5BV,SAAU,SAAU7O,GAChB,MAAO6O,GAAS7O,IAGpBoQ,OACIzO,IAAK,SAAUoN,EAAY1F,EAAKsG,GAC5B,MAAOD,GAAUX,EAAY1F,EAAKsG,IAGtC9I,KAAM,SAAUkI,EAAYQ,EAAcI,GACtC,MAAOD,GAAUX,EAAYQ,EAAcI,IAG/CU,MAAO,SAAUtB,EAAYQ,EAAcW,GACvC,MAAOD,GAAYlB,EAAYQ,EAAcW;CCrHrE,WACI,YAEAnS,SAAQC,OAAO,WAAWwB,QAAQ,wBAA0B,KAC5D,SAA4BG,GACpB,QAAS8P,GAAgBF,GACrB,MAAOe,GAAWf,EAAc,kBAAmB,eAGvD,QAASgB,GAAeC,GACpB,MAAOF,GAAWE,EAAa,iBAAkB,cAGrD,QAASC,GAAUC,GACf,MAAOJ,GAAWI,EAAQ,YAAa,SAG3C,QAASP,GAAYD,GACjB,MAAOI,GAAWJ,EAAU,cAAe,WAG/C,QAASI,GAAWK,EAAKC,EAAUC,GAC1B9S,QAAQiK,QAAQ2I,KACjBA,GAAOA,GAGX,IAAInB,GAAQmB,EAAIjI,IAAI,SAAUoI,GAC1B,GAAIC,KAEJ,OADAA,GAAEF,GAAWC,EACNC,IAGPA,IAGJ,OAFAA,GAAEH,GAAYpB,EAEPuB,EAGX,QAASC,GAAaC,GAClB,MAAkB,WAAdA,EAAOC,IACAvR,EAAG4B,QAAQ0P,EAAOE,OAAOzI,IAAI,SAAU9C,GAC1C,MAAOA,GAAMwL,MAIdzR,EAAG8B,OAAO,GAAI4P,OAAMJ,EAAOC,MAGtC,OACIzB,gBAAiBA,EACjBc,eAAgBA,EAChBE,UAAWA,EACXN,YAAaA,EACba,aAAcA;CCrD9B,WACI,YAEAjT,SAAQC,OAAO,WAAWwB,QAAQ,sBAAuB,aACzD,SAA4BC,GAGpB,QAAS2I,GAAOwG,GAKZ,MAJIA,IAAOA,EAAI0C,YACX1C,EAAI2C,WAAa,GAAIpN,MAAKyK,EAAI0C,YAG3B1C,EAGX,QAAS/H,GAAK7G,GACV,MAAOnB,GAAQ8C,IAAI3B,GAGvB,QAASwR,GAAQxR,GACb,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAASyR,GAAiBzR,GACtBA,EAASA,KAET,IAAI+O,GAAa/O,EAAO+O,WACpB1F,EAAMrJ,EAAOqJ,IACbqI,EAAU1R,EAAO0R,QACjBhB,EAAS1Q,EAAO0Q,MAEpB,OAAO7R,GAAQ8C,KACXoN,WAAYA,EACZ1F,IAAKA,EACL5C,OAAQ,gBACRkL,EAAGD,EACHhB,OAAQA,IACTvP,KAAK,SAAUyQ,GAEd,MADDA,GAAKrO,QAAQ6E,GACLwJ,IAlCf,GAAI/S,GAAU,GAAIY,GAAW,6CAsC7B,QACIoS,QAUIhL,KAAM,SAAU7G,GACZ,MAAO6G,GAAK7G,IAahBwR,QAAS,SAAUxR,GACf,MAAOwR,GAAQxR,IAWnB8R,cAAe,SAAU9R,GACrB,MAAOyR,GAAiBzR;CCjFhD,WACI,YAEAjC,SAAQC,OAAO,WAAWwB,QAAQ,oBAAqB,QAAS,aAAc,uBAAwB,0BAA2B,0BAA2B,uBAAwB,2BACpL,SAA4BI,EAAOH,EAAYiP,EAAQqD,EAAyBC,EAAyBC,EAAsBC,GAGvH,QAAS9J,GAAOe,GAKZ,MAJGA,GAAUgJ,eACThJ,EAAUgJ,aAAe,GAAIhO,MAAKgF,EAAUgJ,eAGzChJ,EAGX,QAASxH,GAAIoN,EAAY1F,GACrB,MAAOxC,GAAKiF,UAAWzC,IAG3B,QAASxC,GAAKkI,EAAYQ,GACtB,GAAIC,GAAQd,EAAOe,gBAAgBF,EAGnC,OAFAC,GAAM/I,OAAS,MAER5H,EAAQ+C,KAAK4N,GAAOrO,KAAK,SAAU6O,GAEtC,MADAA,GAAWzM,QAAQ6E,GACZ4H,IAIf,QAASnB,GAAS7O,GACd,GACI8O,IADa9O,EAAO+O,WACF/O,EAAO8O,iBACzBsD,EAAOpS,EAAOoS,IAalB,OAXIrU,SAAQiK,QAAQ8G,KAChBA,GAAoBA,IAGxBA,EAAkBA,EAAgBpG,IAAI,SAAUsG,GAC5C,OACIC,YAAaD,EAAEE,YACfC,MAAOH,EAAEI,SAIVvQ,EAAQ+C,MACX0N,cAAeR,EACfuD,KAAMD,IAId,QAASnN,GAAQ8J,EAAYQ,GACzB,GAAIC,GAAQd,EAAOe,gBAAgBF,EAEnC,OAAO1Q,GAAQiD,IAAI0N,GAjDvB,GAAI3Q,GAAU,GAAIY,GAAW,sFAoD7B,QACIkC,IAAK,SAAUoN,EAAY1F,GACvB,MAAO1H,GAAIoN,EAAY1F,IAG3BxC,KAAM,SAAUkI,EAAYQ,GACxB,MAAO1I,GAAKkI,EAAYQ,IAY5BV,SAAU,SAAU7O,GAChB,MAAO6O,GAAS7O,IAEpBsS,WAAY,SAAUvD,EAAYQ,GAC9B,MAAOtK,GAAQ8J,EAAYQ,IAG/BpB,QAAS4D,EACTP,QAASQ,EACTO,KAAMN,EACNO,SAAUN;CCrF1B,WACI,YAEAnU,SAAQC,OAAO,WAAWwB,QAAQ,sBAAuB,aACzD,SAA4BC,GAGpB,QAAS2I,GAAOqK,GAKZ,MAJGA,IAAUA,EAAOvO,OAChBuO,EAAOxR,KAAO,GAAIkD,MAAKsO,EAAOvO,OAG3BuO,EAGX,QAAS9Q,GAAIoN,EAAY1F,GACrB,MAAOxK,GAAQ8C,KACXoN,WAAYA,EACZ1F,IAAKA,IACNlI,KAAK,SAAU0Q,GAEd,MADAzJ,GAAOyJ,EAAOa,YACPb,IAIf,QAAS7H,GAAMhK,GAIX,MAHAA,GAASA,MACTA,EAAOyG,OAAS,QAET5H,EAAQ+C,KAAK5B,GAGxB,QAAS2S,GAAY5D,EAAY1F,GAC7B,MAAOxK,GAAQ8C,KACXoN,WAAYA,EACZ1F,IAAKA,EACL5C,OAAQ,UA/BhB,GAAI5H,GAAU,GAAIY,GAAW,sCAmC7B,QACIkC,IAAK,SAASoN,EAAY1F,GACtB,MAAO1H,GAAIoN,EAAY1F,IAc3BuJ,gBAAiB,SAAU5S,GACvB,MAAOgK,GAAMhK,IAGjB2S,YAAa,SAAU5D,EAAY1F,GAC/B,MAAOsJ,GAAY5D,EAAY1F,IAGnCwJ,mBAAoB,SAAU9D,EAAY1F,GACtC,MAAOxK,GAAQkB,WACXgP,WAAYA,EACZ1F,IAAKA,EACL5C,OAAQ;CCpEhC,WACI,YAEA1I,SAAQC,OAAO,WAAWwB,QAAQ,eAAgB,aAAc,qBAAsB,qBAAsB,uBAAwB,mBACpI,SAAqBC,EAAYqT,EAAoBC,EAAoBC,EAAsBC,GACvF,OACIC,UAAWF,EACXG,QAASL,EACTM,QAASL,EACTM,MAAOJ;CCTvB,WACI,YAEAlV,SAAQC,OAAO,WAAWwB,QAAQ,gBAAiB,aACnD,SAAsBC,GAGd,QAASoH,GAAKqE,GACV,MAAOrM,GAAQ8C,KACXuJ,IAAKA,IAIb,QAASF,GAAQE,EAAK4C,GAClB,MAAOjP,GAAQgD,KACXqJ,IAAKA,EACL4C,IAAKA,IAIb,QAAS7C,GAAWC,EAAK4C,GACrB,MAAOjP,GAAQiD,KACXoJ,IAAKA,EACL4C,IAAKA,IAlBb,GAAIjP,GAAU,GAAIY,GAAW,yBAsB7B,QACIoH,KAAM,SAAUqE,GACZ,MAAOrE,GAAKqE,IAQhBqB,IAAK,SAAUrB,EAAK4C,GAChB,MAAO9C,GAAQE,EAAK4C,IAQxBtB,OAAQ,SAAUtB,EAAK4C,GACnB,MAAO7C,GAAWC,EAAK4C;CC/C3C,WACI,YAEA/P,SAAQC,OAAO,WAAWwB,QAAQ,kBAAmB,aACrD,SAAwBC,GAGhB,QAASoH,GAAKqE,GACV,MAAOrM,GAAQ8C,KACXuJ,IAAKA,IAIb,QAASnG,GAAOmG,EAAKjI,GAGjB,MAFAA,GAAWA,MACXA,EAASiI,IAAMA,EACRrM,EAAQgD,IAAIoB,GAXvB,GAAIpE,GAAU,GAAIY,GAAW,qBAc7B,QACIoH,KAAM,SAAUqE,GACZ,MAAOrE,GAAKqE,IAQhBnG,OAAQ,SAAUmG,EAAKjI,GACnB,MAAO8B,GAAOmG,EAAKjI;CC9BvC,WACI,YAEAlF,SAAQC,OAAO,WAAWwB,QAAQ,qBAAsB,aACxD,SAA2BC,GAGnB,QAAS6T,GAAIpI,EAAKqI,GACd,MAAO1U,GAAQgD,KACXqJ,IAAKA,EACLsI,aAAcD,IAItB,QAAS/G,GAAOtB,GACZ,MAAOrM,GAAQiD,KACXoJ,IAAKA,IAXb,GAAIrM,GAAU,GAAIY,GAAW,uCAe7B,QAMI6T,IAAK,SAAUpI,EAAKqI,GAChB,MAAOD,GAAIpI,EAAKqI,IAOpB/G,OAAQ,SAAUtB,GACd,MAAOsB,GAAOtB;CCnClC,WACI,YAEAnN,SAAQC,OAAO,WAAWwB,QAAQ,WAAY,aAAc,eAAgB,iBAAkB,oBAC9F,SAAiBC,EAAYgU,EAAcC,EAAgBC,GAInD,QAAS9O,GAAO7E,GACZ,MAAOnB,GAAQ+C,KAAK5B,GAGxB,QAAS2B,GAAIuJ,GACT,MAAOrM,GAAQ8C,KACXuJ,IAAKA,IAIb,QAASnG,GAAOoG,GACZ,MAAOtM,GAAQgD,IAAIsJ,GAGvB,QAASlG,GAAQiG,GACb,MAAOrM,GAAQiD,KACXoJ,IAAKA,IAIb,QAAS0I,GAAO5T,GACZ,MAAOnB,GAAQ8C,IAAI3B,GAGvB,QAAS6T,GAAc3I,GACnB,MAAO4I,GAAgBnS,KACnBuJ,IAAKA,IA7Bb,GAAIrM,GAAU,GAAIY,GAAW,cACzBqU,EAAkB,GAAIrU,GAAW,sBAgCrC,QAWIoF,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlB2B,IAAK,SAAUmM,GACX,MAAOnM,GAAImM,IAaf/I,OAAQ,SAAUoG,GACd,MAAOpG,GAAOoG,IAGlBlG,QAAS,SAAUiG,GACf,MAAOjG,GAAQiG,IAUnB0I,OAAQ,SAAU5T,GACd,MAAO4T,GAAO5T,IAGlBsF,QAASoO,EACT3F,MAAO0F,EACPM,WAAYJ,EACZ7H,UACIjF,KAAM,SAAUqE,GACZ,MAAO2I,GAAc3I;CC3F7C,WACI,YAEAnN,SAAQC,OAAO,WAAWwB,QAAQ,2BAA4B,QAAS,aAAc,uBACrF,SAA4BI,EAAOH,EAAYiP,GAGvC,QAAStG,GAAOe,GACZ,MAAIA,GAAU6K,SAId7K,EAAU6K,QAAQzQ,QAAQ,SAAUqL,IAC/B,YAAa,UAAW,oBAAoBrL,QAAQ,SAAUR,GACxD6L,EAAI7L,KACH6L,EAAI7L,GAAO,GAAIoB,MAAKyK,EAAI7L,SAK7BoG,GAXIA,EAcf,QAASxH,GAAIoN,EAAY1F,EAAKsG,GAC1B,MAAO9I,GAAKkI,GAAa1F,GAAMsG,GAAQxO,KAAK,SAAUgN,GAClD,OAAQA,EAAQ,QAAU6F,UAIlC,QAASnN,GAAKkI,EAAYQ,EAAcI,GACpC,GAAIH,GAAQd,EAAOe,gBAAgBF,EAQnC,OAPAC,GAAM/I,OAAS,MAEZkJ,IACCH,EAAMK,MAAQF,EAAOG,MACrBN,EAAMO,MAAQJ,EAAOvI,OAGlBvI,EAAQ+C,KAAK4N,GAAOrO,KAAK,SAAU6O,GAEtC,MADAA,GAAWzM,QAAQ6E,GACZ4H,IAnCf,GAAInR,GAAU,GAAIY,GAAW,oFAuC7B,QACIkC,IAAK,SAAUoN,EAAY1F,EAAKsG,GAC5B,MAAOhO,GAAIoN,EAAY1F,EAAKsG,IAGhC9I,KAAM,SAAUkI,EAAYQ,EAAcI,GACtC,MAAO9I,GAAKkI,EAAYQ,EAAcI;CClD1D,WACI,YAEA5R,SAAQC,OAAO,WAAWwB,QAAQ,2BAA4B,QAAS,aAAc,uBACrF,SAA4BI,EAAOH,EAAYiP,GAGvC,QAAStG,GAAOe,GACZ,MAAKA,GAAU6K,SAIf7K,EAAU6K,QAAQzQ,QAAQ,SAAUqL,IAC/B,YAAa,UAAW,oBAAoBrL,QAAQ,SAAUR,GACvD6L,EAAI7L,KACJ6L,EAAI7L,GAAO,GAAIoB,MAAKyK,EAAI7L,SAK7BoG,GAXIA,EAcf,QAASxH,GAAIoN,EAAY1F,GACrB,MAAOxC,GAAKkI,GAAa1F,IAAMlI,KAAK,SAAUqQ,GAC1C,MAAOA,GAAQ,KAIvB,QAAS3K,GAAKkI,EAAYQ,EAAcvP,GACpC,GAAIwP,EAWJ,OAVAxP,GAASA,MAELA,EAAO0Q,QACPlB,EAAQd,EAAO+B,UAAUzQ,EAAO0Q,QAChClB,EAAM/I,OAAS,aAEf+I,EAAQd,EAAOe,gBAAgBF,GAC/BC,EAAM/I,OAAS,OAGZ5H,EAAQ+C,KAAK4N,GAAOrO,KAAK,SAAU6O,GAEtC,MADAA,GAAWzM,QAAQ6E,GACZ4H,IAIf,QAASnL,GAAO7E,GACZ,GACIkP,IADalP,EAAO+O,WACN/O,EAAOkP,aACrB+E,EAAajU,EAAOiU,WACpBzB,EAAWxS,EAAOkU,WAClB9B,EAAOpS,EAAOoS,KACd+B,EAAcnU,EAAOmU,YAErBC,GACA/B,KAAMD,EAiBV,OAdAgC,GAAYrW,QAAQ2L,OAAO0K,EAAW1F,EAAOe,gBAAgBP,IAEzD+E,IACAG,EAAUC,aAAeJ,GAEzBzB,IACA4B,EAAYrW,QAAQ2L,OAAO0K,EAAW1F,EAAO6B,eAAeiC,KAE7C,MAAf2B,IACAA,EAAc,WAGlBC,EAAUE,WAAaH,EAEhBtV,EAAQ+C,KAAKwS,GAAWjT,KAAKuN,EAAOsC,cAG/C,QAAS/L,GAAQ8J,EAAYwF,GACzB,GAAI/E,GAAQd,EAAO+B,UAAU8D,EAE7B,OAAO1V,GAAQiD,IAAI0N,GAAOrO,KAAKuN,EAAOsC,cAG1C,QAASwD,GAAYzF,EAAYwF,GAC7B,MAAOE,GAAa1F,GAAawF,IAAQpT,KAAK,SAAUqQ,GACpD,OAAQA,EAAQ,QAAUkD,uBAIlC,QAASD,GAAa1F,EAAY2B,GAC9B,GAAIlB,GAAQd,EAAO+B,UAAUC,EAG7B,OAFAlB,GAAM/I,OAAS,WAER5H,EAAQ+C,KAAK4N,GAvFxB,GAAI3Q,GAAU,GAAIY,GAAW,oFA0F7B,QACIkC,IAAK,SAAUoN,EAAY1F,GACvB,MAAO1H,GAAIoN,EAAY1F,IAG3BxC,KAAM,SAAUkI,EAAYQ,EAAcvP,GACtC,MAAO6G,GAAKkI,EAAYQ,EAAcvP,IAY1C6E,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E,IAGlBiF,QAAS,SAAU8J,EAAYwF,GAC3B,MAAOtP,GAAQ8J,EAAYwF,IAG/BC,YAAa,SAAUzF,EAAYwF,GAC/B,MAAOC,GAAYzF,EAAYwF,IAGnCE,aAAc,SAAU1F,EAAY2B,GAChC,MAAO+D,GAAa1F,EAAY2B;CC9HpD,WACI,YAEA3S,SAAQC,OAAO,WAAWwB,QAAQ,wBAAyB,QAAS,aAAc,uBAClF,SAA4BI,EAAOH,EAAYiP,GAGvC,QAAStG,GAAOe,GACZ,MAAIA,GAAU6K,SAId7K,EAAU6K,QAAQzQ,QAAQ,SAAUqL,IAC/B,YAAa,WAAWrL,QAAQ,SAAUR,GACpC6L,EAAI7L,KACH6L,EAAI7L,GAAO,GAAIoB,MAAKyK,EAAI7L,SAK7BoG,GAXIA,EAcf,QAASxH,GAAIoN,EAAY1F,GACrB,MAAOxC,GAAKkI,GAAa1F,IAAMlI,KAAK,SAAUoR,GAC1C,MAAOA,GAAK,KAIpB,QAAS1L,GAAKkI,EAAYQ,GACtB,GAAIC,GAAQd,EAAOe,gBAAgBF,EAGnC,OAFAC,GAAM/I,OAAS,MAER5H,EAAQ+C,KAAK4N,GAAOrO,KAAK,SAAU6O,GAEtC,MADAA,GAAWzM,QAAQ6E,GACZ4H,IAIf,QAASnL,GAAO7E,GACZ,GAAIwP,GAAQd,EAAOe,gBAAgBzP,EAAOuP,aAG1C,OAFAC,GAAM6C,KAAOrS,EAAOoS,KAEbvT,EAAQ+C,KAAK4N,GAAOrO,KAAKuN,EAAOsC,cAtC3C,GAAInS,GAAU,GAAIY,GAAW,iFAyC7B,QACIkC,IAAK,SAAUoN,EAAY1F,GACvB,MAAO1H,GAAIoN,EAAY1F,IAG3BxC,KAAM,SAAUkI,EAAYQ,GACxB,MAAO1I,GAAKkI,EAAYQ,IAU5B1K,OAAQ,SAAU7E,GACd,MAAO6E,GAAO7E;CC/DlC,WACI,YAEAjC,SAAQC,OAAO,WAAWwB,QAAQ,4BAA6B,QAAS,aAAc,uBACtF,SAA4BI,EAAOH,EAAYiP,GAIvC,QAAS/M,GAAIoN,EAAYmF,GACrB,GAAI1E,GAAQd,EAAO6B,eAAe2D,EAGlC,OAFA1E,GAAM5O,OAAS,MAER+T,EAAgB/S,KAAK4N,GAAOrO,KAAK,SAAU8P,GAAU,MAAOA,GAAO,KAG9E,QAAS2D,GAAe7F,EAAY1F,EAAKrJ,GACrC,MAAO6U,GAAgB9F,GAAa1F,GAAMrJ,GAAQmB,KAAK,SAAUqR,GAC7D,MAAOA,GAAS,KAIxB,QAASqC,GAAgB9F,EAAYQ,EAAcvP,GAC/C,GAAIwP,GAAQd,EAAOe,gBAAgBF,EAiBnC,OAhBAC,GAAM/I,OAAS,MAEfzG,EAASA,MAGLwP,EAAMsF,UADc,MAApB9U,EAAO+U,UACW,OAEA/U,EAAO+U,UAAY,OAAS,QAI9CvF,EAAMwF,QADY,MAAlBhV,EAAOiV,QACS,OAEAjV,EAAOiV,QAAU,OAAS,QAGvCpW,EAAQ+C,KAAK4N,GAGxB,QAAS0F,GAAInG,EAAYQ,EAAciB,EAAaxQ,GAChD,GAAIwP,GAAQd,EAAOe,gBAAgBF,EAYnC,OAXAC,GAAM2F,eAAiBzG,EAAO6B,eAAeC,GAAa2E,eAC1D3F,EAAM5O,OAAS,YAEfZ,EAASA,MAGLwP,EAAMsF,UADc,MAApB9U,EAAO+U,UACW,OAEA/U,EAAO+U,UAAY,OAAS,QAG3CJ,EAAgB/S,KAAK4N,GAGhC,QAAS4F,GAAMrG,EAAYQ,EAAciB,EAAa6E,GAClD,GAAI7F,GAAQzR,QAAQ2L,OAChBgF,EAAOe,gBAAgBF,GACvBb,EAAO6B,eAAeC,GAK1B,OAHAhB,GAAM/I,OAAS,QACf+I,EAAMwF,QAAUK,EAETxW,EAAQ+C,KAAK4N,GAAOrO,KAAKuN,EAAOsC,cA7D3C,GAAInS,GAAU,GAAIY,GAAW,sFACzBkV,EAAkB,GAAIlV,GAAW,oFA+DrC,QACI0J,WASIxH,IAAK,SAAUoN,EAAYG,EAAalP,GACpC,MAAO4U,GAAe7F,EAAYG,EAAalP,IAGnD6G,KAAM,SAAUkI,EAAYQ,EAAcvP,GACtC,MAAO6U,GAAgB9F,EAAYQ,EAAcvP,KAIzD2B,IAAK,SAASoN,EAAYmF,GACtB,MAAOvS,GAAIoN,EAAYmF,IAW3BgB,IAAK,SAAUnG,EAAYG,EAAagF,EAAYlU,GAChD,MAAOkV,GAAInG,EAAYG,EAAagF,EAAYlU,IAUpDoV,MAAO,SAAUrG,EAAYQ,EAAciB,EAAa6E,GACpD,MAAOD,GAAMrG,EAAYQ,EAAciB,EAAa6E","file":"ng-se-api.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    \r\n    angular.module('ngSeApi', []);\r\n})();\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').provider('seaConfig', ['$httpProvider',\r\n        function SeaConfigProvider($httpProvider) {\r\n            var config = {\r\n                baseUrl: 'https://api.server-eye.de',\r\n                apiVersion: 2,\r\n                apiKey: null,\r\n                getUrl: function (path) {\r\n                    return [this.baseUrl, this.apiVersion, path].join('/');\r\n                }\r\n            };\r\n\r\n            $httpProvider.interceptors.push(function () {\r\n                return {\r\n                    'request': function (reqConfig) {\r\n                        if (config.apiKey) {\r\n                            reqConfig.headers['x-api-key'] = config.apiKey;\r\n                        }\r\n\r\n                        return reqConfig;\r\n                    },\r\n\r\n                    'response': function (response) {\r\n                        return response;\r\n                    }\r\n                };\r\n            });\r\n\r\n            this.setBaseUrl = function (baseUrl) {\r\n                config.baseUrl = baseUrl;\r\n            }\r\n\r\n            this.setApiVersion = function (apiVersion) {\r\n                config.apiVersion = apiVersion;\r\n            }\r\n\r\n            this.setApiKey = function (apiKey) {\r\n                config.apiKey = apiKey;\r\n            }\r\n\r\n            this.$get = function ($http) {\r\n                return {\r\n                    getBaseUrl: function () {\r\n                        return config.baseUrl;\r\n                    },\r\n                    getApiVersion: function () {\r\n                        return config.apiVersion;\r\n                    },\r\n                    getApiKey: function () {\r\n                        return config.apiKey;\r\n                    },\r\n                    setApiKey: function (apiKey) {\r\n                        config.apiKey = apiKey;\r\n                    },\r\n                    getUrl: function (path) {\r\n                        return [config.baseUrl, config.apiVersion, path].join('/');\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n\r\n    angular.module('ngSeApi').config(['seaConfigProvider',\r\n        function (seaApiConfigProvider) {\r\n\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('SeaRequest', ['seaConfig', '$q', '$http',\r\n    function SeaRequest(seaConfig, $q, $http) {\r\n            function SeaRequest(urlPath) {\r\n                this.urlPath = urlPath;\r\n            }\r\n\r\n            /**\r\n             * Merges url and params to a valid api url path.\r\n             *\r\n             * <pre><code>\r\n             * url = '/agent/:aId'\r\n             * params = { aId: 'test-agent-id', name: 'test agent' }\r\n             *\r\n             * url = formatUrl(urlPath, params)\r\n             * url == '/agent/test-agent-id'\r\n             * </pre></code>\r\n             *\r\n             * @param   {String} url    url template\r\n             * @param   {Object} params request parameters\r\n             * @returns {String}\r\n             */\r\n            SeaRequest.prototype.formatUrl = function formatUrl(params, url) {\r\n                url = url || this.urlPath;\r\n                \r\n                if(url.indexOf('https://') < 0) {\r\n                    url = seaConfig.getUrl(url || this.urlPath)\r\n                }\r\n                \r\n                params = params || {};\r\n\r\n                var keys = Object.keys(params),\r\n                    i = keys.length;\r\n\r\n                while (i--) {\r\n                    var regex = new RegExp('\\\\{' + keys[i] + '\\\\}', 'gm');\r\n                    if (regex.test(url)) {\r\n                        url = url.replace(regex, params[keys[i]]);\r\n                        delete params[keys[i]];\r\n                    }\r\n                }\r\n\r\n                url = url.replace(/\\/{[a-z0-9]*}/ig, '');\r\n\r\n                return url;\r\n            }\r\n\r\n            SeaRequest.prototype.send = function send(method, params, urlPath) {\r\n                var deferred = $q.defer(),\r\n                    conf = {\r\n                        method: method\r\n                    };\r\n\r\n                params = params || {};\r\n                params = angular.copy(params);\r\n                \r\n                conf.url = this.formatUrl(params, urlPath);\r\n\r\n                if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\r\n                    conf.data = params || {};\r\n                    conf.headers = {\r\n                        'Content-Type': 'application/json'\r\n                    };\r\n                } else {\r\n                    conf.params = params || {};\r\n                }\r\n\r\n                $http(conf).then(function (resp) {\r\n                    var total = resp.headers('x-total-count');\r\n                    \r\n                    if(total != null) {\r\n                        resp.data.totalCount = total;\r\n                    }\r\n                    \r\n                    deferred.resolve(resp.data);\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n            \r\n            /**\r\n             * perform GET request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.get = function get(params, urlPath) {\r\n                return this.send('GET', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform POST request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.post = function get(params, urlPath) {\r\n                return this.send('POST', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform PUT request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.put = function get(params, urlPath) {\r\n                return this.send('PUT', params, urlPath);\r\n            }\r\n\r\n            /**\r\n             * perform DELETE request\r\n             * @param {Object}  params  The request parameters\r\n             * @param {String}  urlPath only append if url is different to classes urlPath\r\n             * @returns {Boolean} promise\r\n             */\r\n            SeaRequest.prototype.del = function get(params, urlPath) {\r\n                return this.send('DELETE', params, urlPath);\r\n            }\r\n\r\n            return SeaRequest;\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    var VALID_EVENTS = ['USER_UPDATE', 'NODE_ADD', 'NODE_UPDATE', 'NODE_REMOVE', 'REMOTE_RESULT'];\r\n\r\n    angular.module('ngSeApi').factory('seaSocket', ['$rootScope', 'seaConfig',\r\n    function ($rootScope, seaConfig) {\r\n            var connected = false,\r\n                reconnected = false,\r\n                hasEverBeenConnected = false,\r\n                sio;\r\n\r\n            var settings = {};\r\n\r\n            function fireEvent(name, argsObj) {\r\n                argsObj = argsObj || {};\r\n                console.log('fireEvent', 'se_socket_' + name, argsObj);\r\n                $rootScope.$broadcast('se_socket_' + name, argsObj);\r\n            }\r\n\r\n            function connect(credentials, rooms) {\r\n                if (typeof io == 'undefined') {\r\n                    console.error('required socket.io lib not found');\r\n                    return;\r\n                }\r\n\r\n                var connectUrl = seaConfig.getBaseUrl();\r\n                \r\n                if(credentials) {\r\n                    connectUrl += Object.keys(credentials).reduce(function (p, key) {\r\n                        p += [ key, credentials[key] ].join('=');\r\n                        return p;\r\n                    }, '?');\r\n                }\r\n                \r\n                sio = io(connectUrl);\r\n\r\n                settings.rooms = rooms;\r\n\r\n                sio.on('error', onerror);\r\n                sio.on('connect', onconnect);\r\n                sio.on('connecting', function () {\r\n                    console.log('connecting socket');\r\n                });\r\n                sio.on('disconnect', function () {\r\n                    console.log('disconnected socket');\r\n                    onerror('socket.disconnected');\r\n                });\r\n                sio.on('connect_error', function () {\r\n                    console.log('connect socket failed');\r\n                    onerror('socket.connect_failed');\r\n                });\r\n                sio.on('reconnect_error', function () {\r\n                    console.log('reconnect socket failed');\r\n                    onerror('socket.reconnect_failed');\r\n                });\r\n                sio.on('reconnecting', function () {\r\n                    console.log('reconnecting socket');\r\n                });\r\n\r\n                sio.on('socket:joined', function (userId, roomId) {\r\n                    console.log(userId, 'joined', roomId);\r\n                });\r\n\r\n                // server-eye events\r\n                VALID_EVENTS.forEach(function (evtName) {\r\n                    sio.on(evtName, function (data) {\r\n                        ondata(evtName, data);\r\n                    });\r\n                });\r\n            }\r\n\r\n            function sendSettings() {\r\n                sio.emit('settings', settings);\r\n            }\r\n\r\n            function onerror(err) {\r\n                console.log('socket error:', err);\r\n                connected = false;\r\n                fireEvent('error', err);\r\n            }\r\n\r\n            function onconnect() {\r\n                console.log('connected socket');\r\n                connected = true;\r\n\r\n                if (hasEverBeenConnected) {\r\n                    reconnected = true;\r\n                }\r\n\r\n                hasEverBeenConnected = true;\r\n\r\n                var evt = reconnected ? 'reconnected' : 'connected';\r\n\r\n                console.log('firing socket', evt);\r\n\r\n                sendSettings();\r\n\r\n                fireEvent(evt);\r\n            }\r\n\r\n            function ondata(type, data) {\r\n                if(data && data.targetNode) {\r\n                    if(data.targetNode.date) {\r\n                        data.targetNode.date = new Date(data.targetNode.date);\r\n                    }\r\n                    \r\n                    if(data.targetNode.lastDate) {\r\n                        data.targetNode.lastDate = new Date(data.targetNode.lastDate);\r\n                    }\r\n                }\r\n                \r\n                fireEvent(type.toLowerCase(), data);\r\n            }\r\n\r\n            return {\r\n                connect: function (credentials, rooms) {\r\n                    return connect(credentials, rooms);\r\n                }\r\n            }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgent', ['SeaRequest',\r\n                                             'seaAgentNote', 'seaAgentNotification', 'seaAgentMisc',\r\n                                             'seaAgentSetting', 'seaAgentState', 'seaAgentTag', 'seaAgentType',\r\n    function seaAgent(SeaRequest, seaAgentNote, seaAgentNotification, seaAgentMisc, seaAgentSetting, seaAgentState, seaAgentTag, seaAgentType) {\r\n            var request = new SeaRequest('agent/{aId}');\r\n                \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function get(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function update(agent) {\r\n                return request.put(agent);\r\n            }\r\n\r\n            function destroy(aId) {\r\n                return request.del({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent\r\n                 * @param {Object} params\r\n                 * @config {String} [parentId]\r\n                 * @config {String} [type]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n                copy: seaAgentMisc.copy,\r\n\r\n                get: function (aId) {\r\n                    return get(aId);\r\n                },\r\n\r\n                /**\r\n                 * update agent\r\n                 * @param {Object} agent\r\n                 * @config {String} [aId]\r\n                 * @config {String} [name]\r\n                 * @config {Number} [interval]\r\n                 */\r\n                update: function (agent) {\r\n                    return update(agent);\r\n                },\r\n\r\n                destroy: function (aId) {\r\n                    return destroy(aId);\r\n                },\r\n\r\n                note: seaAgentNote,\r\n                actionlog: seaAgentMisc.actionlog,\r\n                chart: seaAgentMisc.chart,\r\n                notification: seaAgentNotification,\r\n                setting: seaAgentSetting,\r\n                state: seaAgentState,\r\n                category: seaAgentMisc.category,\r\n                restart: seaAgentMisc.restart,\r\n                tag: seaAgentTag,\r\n                type: seaAgentType\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentMisc', ['SeaRequest',\r\n    function seaAgentMisc(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/{action}');\r\n\r\n            function formatActionlog(entry) {\r\n                entry.changeDate = new Date(entry.changeDate);\r\n                entry.changed = JSON.parse(entry.changed);\r\n                try {\r\n                    entry.userName = JSON.parse(entry.userName);\r\n                } catch(e) {\r\n                    entry.userName = {\r\n                        email : entry.userName,\r\n                        sur: entry.userName\r\n                    };\r\n                }\r\n                return entry;\r\n            }\r\n        \r\n            function formatMeasurement(m) {\r\n                m.ts = new Date(m.name);\r\n                return m;\r\n            }\r\n\r\n            function listActionlog(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'actionlog';\r\n                return request.get(params);\r\n            }\r\n\r\n            function getChart(aId, params) {\r\n                params = params || {};\r\n                params.aId = aId;\r\n                params.action = 'chart';\r\n                return request.get(params);\r\n            }\r\n\r\n            function copy(aId, parentId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.parentId = parentId;\r\n                params.action = 'copy';\r\n                return request.post(params);\r\n            }\r\n        \r\n            function restart(aId) {\r\n                var params = {};\r\n                params.aId = aId;\r\n                params.action = 'restart';\r\n                return request.post(params);\r\n            }\r\n\r\n            function listCategories() {\r\n                return request.get({}, 'agent/category');\r\n            }\r\n\r\n            return {\r\n                actionlog: {\r\n                    /**\r\n                     * list action log entries\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @returns {Object} promise\r\n                     */\r\n                    list: function (aId, params) {\r\n                        return listActionlog(aId, params).then(function (entries) {\r\n                            angular.forEach(entries, formatActionlog);\r\n                            \r\n                            return entries;\r\n                        });\r\n                    }\r\n                },\r\n                chart: {\r\n                    /**\r\n                     * get chart config and values\r\n                     * @param   {String} aId    agent id\r\n                     * @param   {Object} params\r\n                     * @config  {Number} start\r\n                     * @config  {Number} limit\r\n                     * @config  {Number} valueType\r\n                     * @returns {Object} promise\r\n                     */\r\n                    get: function (aId, params) {\r\n                        return getChart(aId, params).then(function (chartConfig) {\r\n                            angular.forEach(chartConfig.measurements, formatMeasurement);\r\n                            \r\n                            return chartConfig;\r\n                        });\r\n                    }\r\n                },\r\n                category: {\r\n                    list: listCategories\r\n                },\r\n                /**\r\n                 * copy agent to a parent\r\n                 * @param   {String} aId\r\n                 * @param   {String}   parentId\r\n                 * @returns {Object} promise\r\n                 */\r\n                copy: function (aId, parentId) {\r\n                    return copy(aId, parentId);\r\n                },\r\n                \r\n                /**\r\n                 * restart an agent\r\n                 * @param   {String} aId\r\n                 * @returns {Object} promise\r\n                 */\r\n                restart: function(aId) {\r\n                    return restart(aId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentNote', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/note/{nId}');\r\n\r\n            function formatNote(note) {\r\n                note.postedOn = new Date(note.postedOn);\r\n                return note;\r\n            }\r\n\r\n            function create(params) {\r\n                return request.post(params).then(formatNote);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                }).then(function (notes) {\r\n                    angular.forEach(notes, formatNote);\r\n\r\n                    return notes;\r\n                });\r\n            }\r\n        \r\n            function count(aId) {\r\n                return request.get({\r\n                    aId: aId,\r\n                    nId: 'count'\r\n                });\r\n            }\r\n\r\n            function destroy(aId, nId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    nId: nId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create agent note\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [message]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n                \r\n                count: function (aId) {\r\n                    return count(aId);\r\n                },\r\n\r\n                destroy: function (aId, nId) {\r\n                    return destroy(aId, nId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentNotification', ['SeaRequest',\n    function seaAgentNitification(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n\n            function destroy(aId, nId) {\n                return request.del({\n                    aId: aId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [aId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n\n                destroy: function (aId, nId) {\n                    return destroy(aId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentSetting', ['SeaRequest',\n    function seaAgentSetting(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/setting/{key}'),\n                remoteRequest = new SeaRequest('agent/{aId}/setting/{key}/remote');\n        \n            function update(setting) {\n                return request.put(setting);\n            }\n\n            function list(aId) {\n                return request.get({\n                    aId: aId\n                });\n            }\n        \n            function remote(param) {\n                return remoteRequest.get(param);\n            }\n\n            return {\n                /**\n                 * create agent note\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [value]\n                 */\n                update: function (setting) {\n                    return update(setting);\n                },\n\n                list: function (aId) {\n                    return list(aId);\n                },\n                \n                /**\n                 * load settings from remote\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [key]\n                 * @config {String} [information]\n                 */\n                remote: function (param) {\n                    return remote(param);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentState', ['SeaRequest',\n    function seaAgentState(SeaRequest) {\n            var request = new SeaRequest('agent/{aId}/state/{method}'),\n                hintRequest = new SeaRequest('agent/{aId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                \n                if(state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n                \n                if(state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n                \n                return state;\n            }\n        \n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n\n            function stats(aId, params) {\n                params = params || {};\n                params.aId = aId;\n                params.method = 'stats';\n                \n                return request.get(params);\n            }\n        \n            function list(aId, params) {\n                params = params || {};\n                params.aId = aId;\n\n                if (angular.isArray(params.aId)) {\n                    return request.post(params, 'agent/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n\n                        return statesById;\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create agent state hint\n                 * @param {Object} params\n                 * @config {String} [aId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list agent states\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (aId, params) {\n                    return list(aId, params);\n                },\n                \n                /**\n                 * list agent state stats\n                 * @param   {String}   aId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (aId, params) {\n                    return stats(aId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaAgentTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('agent/{aId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(aId) {\r\n                return request.get({\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            function destroy(aId, tId) {\r\n                return request.del({\r\n                    aId: aId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to agent\r\n                 * @param {Object} params\r\n                 * @config {String} [aId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (aId) {\r\n                    return list(aId);\r\n                },\r\n\r\n                destroy: function (aId, tId) {\r\n                    return destroy(aId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAgentType', ['SeaRequest',\n    function seaAgentType(SeaRequest) {\n            var request = new SeaRequest('agent/type');\n\n            function format(agentKnown) {\n                if(agentKnown.updateDate) {\n                    agentKnown.updateDate = new Date(agentKnown.updateDate);\n                }\n                \n                return agentKnown;\n            }\n        \n            function listSettings(akId) {\n                return request.get({\n                    akId: akId\n                }, 'agent/type/{akId}/setting');\n            }\n\n            function list(params) {\n                return request.get(params).then(function (aks) { return aks.map(format); });\n            }\n\n            return {\n                setting: {\n                    /**\n                     * list settings of an agent type\n                     * @param {Object} params\n                     * @config {String} [akId]\n                     */\n                    list: function (akId) {\n                        return listSettings(akId);\n                    }\n                },\n\n                list: list\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainer', ['SeaRequest',\n                                                   'seaContainerMisc', 'seaContainerNote', 'seaContainerNotification',\n                                                   'seaContainerProposal', 'seaContainerState', 'seaContainerTag', 'seaContainerTemplate',\n    function seaContainer(SeaRequest, seaContainerMisc, seaContainerNote, seaContainerNotification, seaContainerProposal, seaContainerState, seaContainerTag, seaContainerTemplate) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatContainer(container) {\n                if (container.lastBootUpTime) {\n                    container.lastBootUpTime = new Date(container.lastBootUpTime);\n                }\n                return container;\n            }\n\n            function get(cId) {\n                return request.get({\n                    cId: cId\n                }).then(formatContainer);\n            }\n        \n            function listAgents(cId) {\n                return request.get({\n                    cId: cId,\n                    action: 'agents'\n                });\n            }\n\n            function update(container) {\n                return request.put(container);\n            }\n\n            function destroy(cId) {\n                return request.del({\n                    cId: cId\n                });\n            }\n\n            var api = {\n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update container\n                 * @param {Object} container\n                 * @config {String} [cId]\n                 * @config {String} [name]\n                 * @config {Boolean} [alertOffline]\n                 * @config {Boolean} [alertShutdown]\n                 * @config {Number} [maxHeartbeatTimeout]\n                 */\n                update: function (container) {\n                    return update(container);\n                },\n\n                destroy: function (cId) {\n                    return destroy(cId);\n                },\n                \n                agent: {\n                    list: function (cId) {\n                        return listAgents(cId);\n                    }\n                },\n\n                note: seaContainerNote,\n                notification: seaContainerNotification,\n                proposal: seaContainerProposal,\n                state: seaContainerState,\n                tag: seaContainerTag,\n                template: seaContainerTemplate\n            };\n                \n            angular.extend(api, seaContainerMisc);\n        \n            return api;\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerMisc', ['SeaRequest',\n    function seaContainerMisc(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/{action}');\n\n            function formatActionlog(entry) {\n                entry.changeDate = new Date(entry.changeDate);\n                entry.changed = JSON.parse(entry.changed);\n                try {\n                    entry.userName = JSON.parse(entry.userName);\n                } catch(e) {\n                    entry.userName = {\n                        email : entry.userName,\n                        sur: entry.userName\n                    };\n                }\n                return entry;\n            }\n\n            function listActionlog(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'actionlog';\n                return request.get(params);\n            }\n\n            function getInventory(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = 'inventory';\n                return request.get(params);\n            }\n\n            function action(cId, action, params) {\n                params = params || {};\n                params.cId = cId;\n                params.action = action;\n                return request.post(params);\n            }\n\n            return {\n                actionlog: {\n                    /**\n                     * list action log entries\n                     * @param   {String} cId\n                     * @param   {Object} params\n                     * @config  {Number} [start]\n                     * @config  {Number} [limit]\n                     * @returns {Object} promise\n                     */\n                    list: function (cId, params) {\n                        return listActionlog(cId, params).then(function (entries) {\n                            angular.forEach(entries, formatActionlog);\n\n                            return entries;\n                        });\n                    }\n                },\n\n                inventory: {\n                    /**\n                     * get inventory of the container\n                     * @param   {String}   cId\n                     * @param   {String}   params\n                     * @config {String} [format]\n                     * @returns {Object} promise\n                     */\n                    get: function (cId, params) {\n                        return getInventory(cId, params);\n                    },\n\n                    getFileLink: function (cId, params) {\n                        params = params || {};\n                        params.cId = cId;\n                        params.action = 'inventory';\n\n                        return request.formatUrl(params);\n                    }\n                },\n\n                /**\n                 * restart a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                restart: function (cId) {\n                    return action(cId, 'restart');\n                },\n\n                /**\n                 * stop a container\n                 * @param   {String} cId\n                 * @param   {Int}    until timestamp\n                 * @returns {Object} promise\n                 */\n                stop: function (cId, until) {\n                    return action(cId, 'stop', {\n                        until: until\n                    });\n                },\n\n                /**\n                 * start a container\n                 * @param   {String} cId\n                 * @returns {Object} promise\n                 */\n                start: function (cId) {\n                    return action(cId, 'start');\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNote', ['SeaRequest',\n    function seaContainerNote(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/note/{nId}');\n\n            function formatNote(note) {\n                note.postedOn = new Date(note.postedOn);\n                return note;\n            }\n\n            function create(params) {\n                return request.post(params).then(formatNote);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                }).then(function (notes) {\n                    angular.forEach(notes, formatNote);\n\n                    return notes;\n                });\n            }\n\n            function count(cId) {\n                return request.get({\n                    cId: cId,\n                    nId: 'count'\n                });\n            }\n        \n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create note\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [message]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n                \n                count: function (cId) {\n                    return count(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerNotification', ['SeaRequest',\n    function seaContainerNotification(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/notification/{nId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function destroy(cId, nId) {\n                return request.del({\n                    cId: cId,\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * create notification\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId]\n                 * @config {String} [userId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return update(notification);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                destroy: function (cId, nId) {\n                    return destroy(cId, nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerProposal', ['SeaRequest',\n    function seaContainerProposal(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/proposal/{pId}');\n\n            function accept(cId, pId) {\n                return request.put({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function deny(cId, pId) {\n                return request.del({\n                    cId: cId,\n                    pId: pId\n                });\n            }\n\n            function listSettings(cId, pId) {\n                return request.get({\n                    cId: cId,\n                    pId: pId\n                }, 'container/{cId}/proposal/{pId}/setting');\n            }\n\n            return {\n                accept: function (cId, pId) {\n                    return accept(cId, pId);\n                },\n\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                deny: function (cId, pId) {\n                    return deny(cId, pId);\n                },\n\n                settings: {\n                    list: function (cId, pId) {\n                        return listSettings(cId, pId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerState', ['SeaRequest',\n    function seaContainerState(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/state/{method}'),\n                hintRequest = new SeaRequest('container/{cId}/state/{sId}/hint');\n\n            function formatState(state) {\n                state.date = new Date(state.date);\n                state.lastDate = new Date(state.lastDate);\n                \n                if(state.silencedUntil) {\n                    state.silencedUntil = new Date(state.silencedUntil);\n                }\n                \n                if(state.hints) {\n                    angular.forEach(state.hints, formatHint);\n                }\n                \n                return state;\n            }\n        \n            function formatHint(hint) {\n                hint.date = new Date(hint.date);\n                return hint;\n            }\n\n            function hint(params) {\n                return hintRequest.post(params).then(formatHint);\n            }\n        \n            function stats(cId, params) {\n                params = params || {};\n                params.cId = cId;\n                params.method = 'stats';\n                \n                return request.get(params);\n            }\n\n            function list(cId, params) {\n                params = params || {};\n                params.cId = cId;\n\n                if (angular.isArray(params.cId)) {\n                    return request.post(params, 'container/state').then(function (statesById) {\n                        angular.forEach(Object.keys(statesById), function (key) {\n                            angular.forEach(statesById[key], formatState);\n                        });\n                    });\n                }\n                return request.get(params).then(function (states) {\n                    angular.forEach(states, formatState);\n\n                    return states;\n                });\n            }\n\n            return {\n                /**\n                 * create container state hint\n                 * @param {Object} params\n                 * @config {String} [cId]\n                 * @config {String} [sId]\n                 * @config {String} [author]\n                 * @config {Number} [hintType]\n                 * @config {String} [message]\n                 * @config {String} [assignedUser]\n                 * @config {Array} [mentionedUsers]\n                 * @config {Boolean} [private]\n                 * @config {Number} [until]\n                 */\n                hint: function (params) {\n                    return hint(params);\n                },\n\n                /**\n                 * list container states\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [limit]\n                 * @config {Number} [start]\n                 * @config {Number} [end]\n                 * @config {Boolean} [includeHints]\n                 * @config {Boolean} [includeRawData]\n                 * @config {String} [format]\n                 */\n                list: function (cId, params) {\n                    return list(cId, params);\n                },\n                \n                /**\n                 * list container state stats\n                 * @param   {String}   cId\n                 * @param {Object}\n                 * @config {Number} [start] : now\n                 * @config {Number} [end]   : now - 12 months\n                 */\n                stats: function (cId, params) {\n                    return stats(cId, params);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaContainerTag', ['SeaRequest',\r\n    function seaAgentNote(SeaRequest) {\r\n            var request = new SeaRequest('container/{cId}/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.put(params);\r\n            }\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function destroy(cId, tId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * add tag to container\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [tId]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                destroy: function (cId, tId) {\r\n                    return destroy(cId, tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaContainerTemplate', ['SeaRequest',\n    function seaContainerTemplate(SeaRequest) {\n            var request = new SeaRequest('container/{cId}/template/{tId}');\n\n            function create(cId) {\n                return request.post({\n                    cId: cId\n                });\n            }\n\n            function assign(cId, tId) {\n                return request.post({\n                    cId: cId,\n                    tId: tId\n                });\n            }\n\n            return {\n                /**\n                 * create template form system\n                 * @param {String} cId\n                 */\n                create: function (cId) {\n                    return create(cId);\n                },\n\n                /**\n                 * assign a template to a system\n                 * @param {String} cId\n                 * @param {String} tId\n                 */\n                assign: function (cId, tId) {\n                    return assign(cId, tId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaAuth', ['SeaRequest',\n    function seaAuth(SeaRequest) {\n            var request = new SeaRequest('auth/{action}');\n\n            function createApiKey(params) {\n                params = params || {};\n                params.action = 'key';\n\n                return request.post(params);\n            }\n\n            function login(params) {\n                params = params || {};\n                params.action = 'login';\n\n                return request.post(params);\n            }\n\n            function logout(params) {\n                params = params || {};\n                params.action = 'logout';\n\n                return request.get(params);\n            }\n\n            return {\n                /**\n                 * create apiKey\n                 * @param {Object} params\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Number} [type]\n                 * @config {Number} [validUntil]\n                 * @config {Number} [maxUses]\n                 */\n                createApiKey: function (params) {\n                    return createApiKey(params);\n                },\n\n                /**\n                 * login\n                 * @param {Object} params\n                 * @config {String} [apiKey]\n                 * @config {String} [email]\n                 * @config {String} [password]\n                 * @config {Boolean} [createApiKey]\n                 * @config {String} [apiKeyName]\n                 */\n                login: function (params) {\n                    return login(params);\n                },\n\n                logout: function () {\n                    return logout();\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerApiKey', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/apiKey/{apiKey}'),\r\n                requestDistri = new SeaRequest('customer/apiKey/{apiKey}');\r\n\r\n            function format(apiKey) {\r\n                if(apiKey.validUntil) {\r\n                    apiKey.validUntil = new Date(apiKey.validUntil);\r\n                }\r\n                \r\n                if(apiKey.createdOn) {\r\n                    apiKey.createdOn = new Date(apiKey.createdOn);\r\n                }\r\n                \r\n                return apiKey;\r\n            }\r\n        \r\n            function list(cId) {\r\n                var p;\r\n                \r\n                if(!cId) {\r\n                    p = requestDistri.get();\r\n                } else {\r\n                    p = request.get({\r\n                        cId: cId\r\n                    });\r\n                }\r\n                \r\n                return p.then(function (apiKeys) {\r\n                    angular.forEach(apiKeys, format);\r\n                    \r\n                    return apiKeys;\r\n                });\r\n            }\r\n        \r\n            function get(cId, apiKey) {\r\n                return request.get({\r\n                    cId: cId,\r\n                    apiKey: apiKey\r\n                }).then(format);\r\n            }\r\n\r\n            function destroy(cId, apiKey) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    apiKey: apiKey\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list all api keys of a customer or all your customers\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n                \r\n                get: function (cId, apiKey) {\r\n                    return get(cId, apiKey);\r\n                },\r\n\r\n                destroy: function (cId, apiKey) {\r\n                    return destroy(cId, apiKey);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerBucket', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/bucket/{bId}'),\r\n                userRequest = new SeaRequest('customer/bucket/{bId}/user/{uId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(bucket) {\r\n                return request.put(bucket);\r\n            }\r\n\r\n            function destroy(bId) {\r\n                return request.del({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function listUser(bId) {\r\n                return userRequest.get({\r\n                    bId: bId\r\n                });\r\n            }\r\n\r\n            function addUser(params) {\r\n                return userRequest.put(params);\r\n            }\r\n\r\n            function removeUser(bId, uId) {\r\n                return userRequest.del({\r\n                    bId: bId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update bucket\r\n                 * @param {Object} params\r\n                 * @config {String} [bId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (bucket) {\r\n                    return update(bucket);\r\n                },\r\n\r\n                destroy: function (bId) {\r\n                    return destroy(bId);\r\n                },\r\n\r\n                user: {\r\n                    list: function (bId) {\r\n                        return listUser(bId);\r\n                    },\r\n\r\n                    /**\r\n                     * add user to bucket\r\n                     * @param {Object} params\r\n                     * @config {String} [bId]\r\n                     * @config {String} [uId]\r\n                     */\r\n                    create: function (params) {\r\n                        return addUser(params);\r\n                    },\r\n\r\n                    /**\r\n                     * remove user from bucket\r\n                     * @param {String} [bId]\r\n                     * @param {String} [uId]\r\n                     */\r\n                    destroy: function (bId, uId) {\r\n                        return removeUser(bId, uId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomer', ['SeaRequest', 'seaCustomerApiKey', 'seaCustomerBucket', 'seaCustomerDispatchTime', 'seaCustomerExternalCall', 'seaCustomerManager', 'seaCustomerSetting', 'seaCustomerTag', 'seaCustomerTemplate', 'seaCustomerUsage', 'seaCustomerViewFilter',\n    function seaCustomer(SeaRequest, seaCustomerApiKey, seaCustomerBucket, seaCustomerDispatchTime, seaCustomerExternalCall, seaCustomerManager, seaCustomerSetting, seaCustomerTag, seaCustomerTemplate, seaCustomerUsage, seaCustomerViewFilter) {\n            var request = new SeaRequest('customer/{cId}');\n\n            function list() {\n                return request.get();\n            }\n        \n            function get(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(customer) {\n                return request.put(customer);\n            }\n\n            return {\n                list: function () {\n                    return list();\n                },\n                \n                get: function (cId) {\n                    return get(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {Object} customer\n                 * @config {String} [cId]\n                 * @config {String} [country]\n                 * @config {Number} [customerNumberIntern]\n                 * @config {Number} [customerNumberExtern]\n                 * @config {String} [companyName]\n                 * @config {String} [street]\n                 * @config {String} [zipCode]\n                 * @config {String} [city]\n                 * @config {String} [email]\n                 * @config {String} [phone]\n                 */\n                update: function (customer) {\n                    return update(customer);\n                },\n\n                apiKey: seaCustomerApiKey,\n                bucket: seaCustomerBucket,\n                dispatchTime: seaCustomerDispatchTime,\n                externalCall: seaCustomerExternalCall,\n                manager: seaCustomerManager,\n                setting: seaCustomerSetting,\n                tag: seaCustomerTag,\n                template: seaCustomerTemplate,\n                usage: seaCustomerUsage,\n                viewFilter: seaCustomerViewFilter\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerDispatchTime', ['SeaRequest',\n    function seaCustomerDispatchTime(SeaRequest) {\n            var request = new SeaRequest('customer/dispatchTime/{dtId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function list() {\n                return request.get();\n            }\n\n            function update(dispatchTime) {\n                return request.put(dispatchTime);\n            }\n\n            function destroy(dtId) {\n                return request.del({\n                    dtId: dtId\n                });\n            }\n\n            return {\n                /**\n                 * create dispatchTime\n                 * @param {Object} params\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                list: function () {\n                    return list();\n                },\n\n                /**\n                 * update dispatchTime\n                 * @param {Object} params\n                 * @config {String} [dtId]\n                 * @config {String} [name]\n                 * @config {Number} [defer]\n                 */\n                update: function (dispatchTime) {\n                    return update(dispatchTime);\n                },\n\n                destroy: function (dtId) {\n                    return destroy(dtId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerExternalCall', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var requestDistri = new SeaRequest('customer/externalCall');\r\n\r\n            function format(ecall) {\r\n                if(ecall.lastDate) {\r\n                    ecall.lastDate = new Date(ecall.lastDate);\r\n                }\r\n                \r\n                return ecall;\r\n            }\r\n        \r\n            function list() {\r\n                return requestDistri.get().then(function (ecalls) {\r\n                    angular.forEach(ecalls, format);\r\n                    \r\n                    return ecalls;\r\n                });\r\n            }\r\n        \r\n            return {\r\n                /**\r\n                 * list all external url calls of your customers\r\n                 */\r\n                list: function () {\r\n                    return list();\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerManager', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/manager/{uId}');\r\n\r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                });\r\n            }\r\n\r\n            function addUser(cId, email) {\r\n                return request.put({\r\n                    cId: cId,\r\n                    uId: email\r\n                });\r\n            }\r\n\r\n            function removeUser(cId, uId) {\r\n                return request.del({\r\n                    cId: cId,\r\n                    uId: uId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                /**\r\n                 * add user as manager\r\n                 * @param {Object} params\r\n                 * @config {String} [cId]\r\n                 * @config {String} [email] email address of the user\r\n                 */\r\n                add: function (cId, email) {\r\n                    return addUser(cId, email);\r\n                },\r\n\r\n                remove: function (cId, uId) {\r\n                    return removeUser(cId, uId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaCustomerSetting', ['SeaRequest',\n    function seaCustomerSetting(SeaRequest) {\n            var request = new SeaRequest('customer/{cId}/setting');\n\n            function list(cId) {\n                return request.get({\n                    cId: cId\n                });\n            }\n\n            function update(cId, settings) {\n                settings = settings || {};\n                settings.cId = cId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (cId) {\n                    return list(cId);\n                },\n\n                /**\n                 * update customer\n                 * @param {String} cId\n                 * @param {Object} settings\n                 */\n                update: function (cId, settings) {\n                    return update(cId, settings);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTag', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/tag/{tId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(tag) {\r\n                return request.put(tag);\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create a tag\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update tag\r\n                 * @param {Object} params\r\n                 * @config {String} [tId]\r\n                 * @config {String} [name]\r\n                 */\r\n                update: function (tag) {\r\n                    return update(tag);\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerTemplate', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/template/{tId}'),\r\n                requestAgent = new SeaRequest('customer/template/{tId}/agent/{aId}');\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n        \r\n            function listAgents(tId) {\r\n                return requestAgent.get({\r\n                    tId: tId\r\n                });\r\n            }\r\n\r\n            function destroy(tId) {\r\n                return request.del({\r\n                    tId: tId\r\n                });\r\n            }\r\n        \r\n            function destroyAgent(tId, aId) {\r\n                return request.del({\r\n                    tId: tId,\r\n                    aId: aId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                destroy: function (tId) {\r\n                    return destroy(tId);\r\n                },\r\n                \r\n                agent: {\r\n                    list: function(tId) {\r\n                        return listAgents(tId);\r\n                    },\r\n                    destroy: function(tId, aId) {\r\n                        return destroyAgent(tId, aId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerUsage', ['SeaRequest',\r\n    function seaCustomerTag(SeaRequest) {\r\n            var request = new SeaRequest('customer/{cId}/usage'),\r\n                requestDistri = new SeaRequest('customer/usage');\r\n\r\n            function format(u) {\r\n                if (u.date) {\r\n                    u.date = new Date(u.date);\r\n                }\r\n\r\n                return u;\r\n            }\r\n\r\n            function list(year, month, cId) {\r\n                var params = {\r\n                    year: year,\r\n                    month: month\r\n                };\r\n\r\n                if (cId) {\r\n                    params.cId = cId;\r\n\r\n                }\r\n\r\n                return requestDistri.get(params).then(function (usage) {\r\n                    angular.forEach(usage, format);\r\n\r\n                    return usage;\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * list the max usage of all customers or the usage graph of a specific customer\r\n                 * @param   {Date} year of the required usage\r\n                 * @param   {Date} month of the required usage\r\n                 * @param   {String} cId empty or customerId\r\n                 */\r\n                list: function (year, month, cId) {\r\n                    return list(year, month, cId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaCustomerViewFilter', ['SeaRequest',\r\n    function seaCustomerDispatchTime(SeaRequest) {\r\n            var request = new SeaRequest('customer/viewFilter/{vfId}');\r\n\r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n\r\n            function list() {\r\n                return request.get();\r\n            }\r\n\r\n            function update(viewFilter) {\r\n                return request.put(viewFilter);\r\n            }\r\n\r\n            function destroy(vfId) {\r\n                return request.del({\r\n                    vfId: vfId\r\n                });\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * create viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                list: function () {\r\n                    return list();\r\n                },\r\n\r\n                /**\r\n                 * update viewFilter\r\n                 * @param {Object} params\r\n                 * @config {String} [vfId]\r\n                 * @config {String} [name]\r\n                 * @config {Object} [query]\r\n                 */\r\n                update: function (viewFilter) {\r\n                    return update(viewFilter);\r\n                },\r\n\r\n                destroy: function (vfId) {\r\n                    return destroy(vfId);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMe', ['SeaRequest', 'seaMeMobilepush', 'seaMeNotification',\n    function seaMe(SeaRequest, seaMeMobilepush, seaMeNotification) {\n            var request = new SeaRequest('me/{action}');\n\n            function _formatNode(node) {\n                ['date', 'lastDate', 'silencedUntil'].forEach(function (key) {\n                    if (node[key] && typeof (node[key]) === 'string') {\n                        node[key] = new Date(node[key]);\n                    }\n                });\n\n                return node;\n            }\n\n            function _formatData(data) {\n                var idx = data.indexOf('loadfinish');\n                if (idx >= 0) {\n                    data.splice(idx, 1);\n                }\n\n                for (var i = 0, len = data.length; i < len; i++) {\n                    _formatNode(data[i]);\n                }\n\n                return data;\n            }\n\n            function me() {\n                return request.get();\n            }\n\n            function customer() {\n                return request.get({\n                    action: 'customer'\n                });\n            }\n\n            function feed(params) {\n                params = params || {};\n                params.action = 'feed';\n\n                return request.get(params);\n            }\n\n            function key(name) {\n                return request.get({\n                    action: 'key',\n                    name: name\n                });\n            }\n\n            function nodes(params) {\n                params = params || {};\n                params.action = 'nodes';\n\n                return request.get(params).then(_formatData);\n            }\n\n            return {\n                me: me,\n                customer: customer,\n                feed: function (params) {\n                    return feed(params);\n                },\n                key: function (name) {\n                    return key(name);\n                },\n                nodes: function (params) {\n                    return nodes(params);\n                },\n\n                mobilepush: seaMeMobilepush,\n                notification: seaMeNotification\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeMobilepush', ['SeaRequest',\n    function seaMeMobilepush(SeaRequest) {\n            var request = new SeaRequest('me/mobilepush/{handle}');\n\n            function list() {\n                return request.get();\n            }\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(handle) {\n                return request.get({\n                    handle: handle\n                });\n            }\n\n            function destroy(handle) {\n                return request.del({\n                    handle: handle\n                });\n            }\n\n            return {\n                list: list,\n\n                /**\n                 * add mobilepush\n                 * @param   {Object} params\n                 * @config  {String} handle\n                 * @config  {String} type\n                 * @returns {Object} promise\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (handle) {\n                    return get(handle);\n                },\n\n                destroy: function (handle) {\n                    return destroy(handle);\n                }\n            };\n  }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaMeNotification', ['SeaRequest',\n    function seaMeNotification(SeaRequest) {\n            var request = new SeaRequest('me/notification/{nId}');\n\n            function list(params) {\n                return request.get(params);\n            }\n\n            function update(notification) {\n                return request.put(notification);\n            }\n\n            function destroy(nId) {\n                return request.del({\n                    nId: nId\n                });\n            }\n\n            return {\n                /**\n                 * list all notifications\n                 * @param   {Object} params\n                 * @config  {Boolean}  type\n                 * @returns {Object} promise\n                 */\n                list: function (params) {\n                    return list(params);\n                },\n\n                /**\n                 * update notification\n                 * @param {Object} params\n                 * @config {String} [nId]\n                 * @config {String} [cId || aId]\n                 * @config {Boolean} [mail]\n                 * @config {Boolean} [phone]\n                 * @config {Boolean} [ticket]\n                 * @config {String} [deferId]\n                 */\n                update: function (notification) {\n                    return get(notification);\n                },\n\n                destroy: function (nId) {\n                    return destroy(nId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroup', ['SeaRequest', 'seaGroupSetting', 'seaGroupUser',\n    function seaGroup(SeaRequest, seaGroupSetting, seaGroupUser) {\n            var request = new SeaRequest('group/{gId}');\n\n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(group) {\n                return request.put(group);\n            }\n\n            function destroy(gId) {\n                return request.del({\n                    gId: gId\n                });\n            }\n\n            return {\n                /**\n                 * create group\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [name]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {Object} group\n                 * @config {String} [gId]\n                 * @config {String} [name]\n                 */\n                update: function (group) {\n                    return update(group);\n                },\n\n                destroy: function (gId) {\n                    return destroy(gId);\n                },\n\n                setting: seaGroupSetting,\n                user: seaGroupUser\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupSetting', ['SeaRequest',\n    function seaGroupSetting(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/setting');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function update(gId, settings) {\n                settings = settings || {};\n                settings.gId = gId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * update group\n                 * @param {String} gId\n                 * @param {Object} settings\n                 */\n                update: function (gId, settings) {\n                    return update(gId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaGroupUser', ['SeaRequest',\n    function seaGroupUser(SeaRequest) {\n            var request = new SeaRequest('group/{gId}/user/{uId}');\n\n            function list(gId) {\n                return request.get({\n                    gId: gId\n                });\n            }\n\n            function addUser(gId, uId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(gId, uId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (gId) {\n                    return list(gId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (gId, uId) {\n                    return addUser(gId, uId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (gId, uId) {\n                    return removeUser(gId, uId);\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaReporting', ['SeaRequest',\r\n    function seaCustomer(SeaRequest) {\r\n            var request = new SeaRequest('reporting/{cId}'),\r\n                reportRequest = new SeaRequest('reporting/{cId}/{rId}');\r\n\r\n            function formatReport(report) {\r\n                ['startDate', 'lastDate', 'nextDate'].forEach(function (prop) {\r\n                    if(report[prop]) {\r\n                        report[prop] = new Date(report[prop]);\r\n                    }\r\n                });\r\n                \r\n                if(report.history) {\r\n                    report.history.forEach(function (generated) {\r\n                        generated.generatedDate = new Date(generated.generatedDate);\r\n                    });\r\n                }\r\n                \r\n                return report;\r\n            }\r\n        \r\n            function create(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function list(cId) {\r\n                return request.get({\r\n                    cId: cId\r\n                }).then(function (reports) {\r\n                    reports.forEach(formatReport);\r\n                    return reports;\r\n                });\r\n            }\r\n        \r\n            function listTypes(cId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: 'type'\r\n                });\r\n            }\r\n\r\n            function get(cId, rId) {\r\n                return reportRequest.get({\r\n                    cId: cId,\r\n                    rId: rId\r\n                }).then(function (report) {\r\n                    return formatReport(report);\r\n                });\r\n            }\r\n        \r\n            function destroy(cId, rId) {\r\n                return reportRequest.del({\r\n                    cId: cId,\r\n                    rId: rId\r\n                });\r\n            }\r\n\r\n            return {\r\n                list: function (cId) {\r\n                    return list(cId);\r\n                },\r\n\r\n                type: {\r\n                    list: function (cId) {\r\n                        return listTypes(cId);\r\n                    }\r\n                },\r\n                \r\n                report: {\r\n                    get: function (cId, rId) {\r\n                        return get(cId, rId);\r\n                    },\r\n                    \r\n                    /**\r\n                     * create report\r\n                     * @param {Object} params\r\n                     * @config {String} [cId]\r\n                     * @config {String} [rtId]\r\n                     * @config {String} [targetId]\r\n                     * @config {String} [repeatInterval]\r\n                     * @config {String} [recipients]\r\n                     */\r\n                    create: function(params) {\r\n                        return create(params);\r\n                    },\r\n                    \r\n                    destroy: function (cId, rId) {\r\n                        return destroy(cId, rId);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingAntivirus', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest('https://patch.server-eye.de/seias/rest/seocc/virus/1.0/{section}/{action}');\r\n\r\n            function format(container) {\r\n                if (!container.EventList) {\r\n                    return container;\r\n                }\r\n\r\n                container.EventList.forEach(function (job) {\r\n                    ['Timestamp'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig;\r\n\r\n                if (!angular.isArray(containerConfig)) {\r\n                    containerConfig = [containerConfig];\r\n                }\r\n\r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n\r\n                return request.post({\r\n                    section: 'container',\r\n                    ContainerList: containerConfig\r\n                });\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'container';\r\n                query.action = 'get';\r\n                \r\n                return request.post(query);\r\n            }\r\n        \r\n            function getEvents(customerId, cId, paging) {\r\n                return listEvents(customerId, [cId], paging).then(function (history) {\r\n                    return (history[0] || {}).EventList;\r\n                });\r\n            }\r\n\r\n            function listEvents(customerId, containerIds, paging) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.section = 'event';\r\n                query.action = 'get';\r\n\r\n                if (paging) {\r\n                    query.Index = paging.index;\r\n                    query.Count = paging.count;\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function checkEvents(customerId, containerIds, eventIds) {\r\n                var query = helper.getEventIds(eventIds);\r\n                query.section = 'event';\r\n                query.action = 'check';\r\n                \r\n                return request.post(query);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n\r\n                /**\r\n                 * activate antivirus on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n\r\n                event: {\r\n                    get: function (customerId, cId, paging) {\r\n                        return getEvents(customerId, cId, paging);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, paging) {\r\n                        return getEvents(customerId, containerIds, paging);\r\n                    },\r\n                    \r\n                    check: function (customerId, containerIds, eventIds) {\r\n                        return checkEvents(customerId, containerIds, eventIds);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingIasHelper', [ '$q',\r\n    function seaRemotingPcvisit($q) {\r\n            function getContainerIds(containerIds) {\r\n                return convertIds(containerIds, 'ContainerIdList', 'ContainerId');\r\n            }\r\n\r\n            function getSoftwareIds(softwareIds) {\r\n                return convertIds(softwareIds, 'SoftwareIdList', 'SoftwareId');\r\n            }\r\n\r\n            function getJobIds(jobIds) {                \r\n                return convertIds(jobIds, 'JobIdList', 'JobId');\r\n            }\r\n        \r\n            function getEventIds(eventIds) {\r\n                return convertIds(eventIds, 'EventIdList', 'EventId');\r\n            }\r\n        \r\n            function convertIds(ids, rootName, subName) {\r\n                if (!angular.isArray(ids)) {\r\n                    ids = [ids];\r\n                }\r\n\r\n                var query = ids.map(function (id) {\r\n                    var o = {};\r\n                    o[subName] = id;\r\n                    return o;\r\n                });\r\n\r\n                var o = {};\r\n                o[rootName] = query;\r\n                \r\n                return o;\r\n            }\r\n\r\n            function idListResult(result) {\r\n                if (result.Msg == 'success') {\r\n                    return $q.resolve(result.IdList.map(function (entry) {\r\n                        return entry.Id;\r\n                    }));\r\n                }\r\n\r\n                return $q.reject(new Error(result.Msg));\r\n            }\r\n\r\n            return {\r\n                getContainerIds: getContainerIds,\r\n                getSoftwareIds: getSoftwareIds,\r\n                getJobIds: getJobIds,\r\n                getEventIds: getEventIds,\r\n                idListResult: idListResult\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingNetwork', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('network/{customerId}/{cId}/system/{action}');\r\n\r\n            function format(job) {\r\n                if (job && job.createdAt) {\r\n                    job.createdAta = new Date(job.createdAt);\r\n                }\r\n\r\n                return job;\r\n            }\r\n\r\n            function list(params) {\r\n                return request.get(params);\r\n            }\r\n\r\n            function install(params) {\r\n                return request.post(params);\r\n            }\r\n        \r\n            function getInstallStatus(params) {\r\n                params = params || {};\r\n                \r\n                var customerId = params.customerId,\r\n                    cId = params.cId,\r\n                    version = params.version,\r\n                    jobIds = params.jobIds;\r\n                \r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'installstatus',\r\n                    v: version,\r\n                    jobIds: jobIds\r\n                }).then(function (jobs) {\r\n                   jobs.forEach(format);\r\n                    return jobs;\r\n                });\r\n            }\r\n\r\n            return {\r\n                system: {\r\n                    /**\r\n                     * list active directory of OCC Connector\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     */\r\n                    list: function (params) {\r\n                        return list(params);\r\n                    },\r\n\r\n                    /**\r\n                     * install Server-Eye on remote system\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {String} [user]\r\n                     * @config {String} [domain]\r\n                     * @config {String} [password]\r\n                     * @config {String} [host] Name of the host Server-Eye will be installed on\r\n                     */\r\n                    install: function (params) {\r\n                        return install(params);\r\n                    },\r\n\r\n                    /**\r\n                     * get the install status of install jobs\r\n                     * @param {Object} params\r\n                     * @config {String} [customerId]\r\n                     * @config {String} [cId] ID of the OCC Connector\r\n                     * @config {Array}  [jobIds]\r\n                     * @config {Integer} [version] remote install version\r\n                     */\r\n                    installStatus: function (params) {\r\n                        return getInstallStatus(params);\r\n                    }\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatch', ['$http', 'SeaRequest', 'seaRemotingIasHelper', 'seaRemotingPatchHistory', 'seaRemotingPatchInstall', 'seaRemotingPatchScan', 'seaRemotingPatchSoftware',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper, seaRemotingPatchHistory, seaRemotingPatchInstall, seaRemotingPatchScan, seaRemotingPatchSoftware) {\r\n            var request = new SeaRequest('https://patch.server-eye.de/seias/rest/seocc/patch/1.0/container/{section}/{action}');\r\n        \r\n            function format(container) {\r\n                if(container.LastScanTime) {\r\n                    container.LastScanTime = new Date(container.LastScanTime);\r\n                }\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customer, [cId]);\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n                \r\n            function activate(params) {\r\n                var customerId = params.customerId,\r\n                    containerConfig = params.containerConfig,\r\n                    cron = params.cron;\r\n                \r\n                if(!angular.isArray(containerConfig)) {\r\n                    containerConfig = [ containerConfig ];\r\n                }\r\n                \r\n                containerConfig = containerConfig.map(function (c) {\r\n                    return {\r\n                        ContainerId: c.containerId,\r\n                        Token: c.token\r\n                    };\r\n                });\r\n                \r\n                return request.post({\r\n                    ContainerList: containerConfig,\r\n                    Cron: cron\r\n                });\r\n            }\r\n        \r\n            function destroy(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                \r\n                return request.del(query)\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * activate patchmanagement on a client\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {Array|Object} [containerConfig]\r\n                 * @config {String} [config.id]\r\n                 * @config {String} [config.token]\r\n                 * @config {String} [cron]\r\n                 */\r\n                activate: function (params) {\r\n                    return activate(params);\r\n                },\r\n                deactivate: function (customerId, containerIds) {\r\n                    return destroy(customerId, containerIds);\r\n                },\r\n                \r\n                history: seaRemotingPatchHistory,\r\n                install: seaRemotingPatchInstall,\r\n                scan: seaRemotingPatchScan,\r\n                software: seaRemotingPatchSoftware\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPcvisit', ['SeaRequest',\r\n    function seaRemotingPcvisit(SeaRequest) {\r\n            var request = new SeaRequest('pcvisit/{customerId}/{cId}/{action}');\r\n\r\n            function format(access) {\r\n                if(access && access.date) {\r\n                    access.data = new Date(access.date);\r\n                }\r\n                \r\n                return access;\r\n            }\r\n        \r\n            function get(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId\r\n                }).then(function (system) {\r\n                    format(system.lastAccess);\r\n                    return system;\r\n                });\r\n            }\r\n        \r\n            function start(params) {\r\n                params = params || {};\r\n                params.action = 'start';\r\n                \r\n                return request.post(params);\r\n            }\r\n\r\n            function isInstalled(customerId, cId) {\r\n                return request.get({\r\n                    customerId: customerId,\r\n                    cId: cId,\r\n                    action: 'check'\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function(customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n                \r\n                /**\r\n                 * install pcvisit on remote system\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String} [cId]\r\n                 * @config {String} [supporterId]\r\n                 * @config {String} [supporterPassword]\r\n                 * @config {String} [user]\r\n                 * @config {String} [domain]\r\n                 * @config {String} [password]\r\n                 */\r\n                installAndStart: function (params) {\r\n                    return start(params);\r\n                },\r\n                \r\n                isInstalled: function (customerId, cId) {\r\n                    return isInstalled(customerId, cId);\r\n                },\r\n                \r\n                getConnectFileLink: function (customerId, cId) {\r\n                    return request.formatUrl({\r\n                        customerId: customerId,\r\n                        cId: cId,\r\n                        action: 'file'\r\n                    });\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemoting', ['SeaRequest', 'seaRemotingPcvisit', 'seaRemotingNetwork', 'seaRemotingAntivirus', 'seaRemotingPatch',\r\n    function seaRemoting(SeaRequest, seaRemotingPcvisit, seaRemotingNetwork, seaRemotingAntivirus, seaRemotingPatch) {\r\n            return {\r\n                antivirus: seaRemotingAntivirus,\r\n                pcvisit: seaRemotingPcvisit,\r\n                network: seaRemotingNetwork,\r\n                patch: seaRemotingPatch\r\n            };\r\n    }]);\r\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserGroup', ['SeaRequest',\n    function seaUserGroup(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/group/{gId}');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function addUser(uId, gId) {\n                return request.put({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            function removeUser(uId, gId) {\n                return request.del({\n                    uId: uId,\n                    gId: gId\n                });\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * add user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                add: function (uId, gId) {\n                    return addUser(uId, gId);\n                },\n\n                /**\n                 * remove user to group\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                remove: function (uId, gId) {\n                    return removeUser(uId, gId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSetting', ['SeaRequest',\n    function seaUserSetting(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/setting');\n\n            function list(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(uId, settings) {\n                settings = settings || {};\n                settings.uId = uId;\n                return request.put(settings);\n            }\n\n            return {\n                list: function (uId) {\n                    return list(uId);\n                },\n\n                /**\n                 * update user\n                 * @param {String} uId\n                 * @param {Object} settings\n                 */\n                update: function (uId, settings) {\n                    return update(uId, settings);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUserSubstitude', ['SeaRequest',\n    function seaUserSubstitude(SeaRequest) {\n            var request = new SeaRequest('user/{uId}/substitude/{substitudeId}');\n\n            function set(uId, substId) {\n                return request.put({\n                    uId: uId,\n                    substitudeId: substId\n                });\n            }\n\n            function remove(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * set a substitude\n                 * @param {String} gId\n                 * @param {String} uId\n                 */\n                set: function (uId, substId) {\n                    return set(uId, substId);\n                },\n\n                /**\n                 * remove substitude\n                 * @param {String} uId\n                 */\n                remove: function (uId) {\n                    return remove(uId);\n                }\n            };\n    }]);\n})();","(function () {\n    \"use strict\";\n\n    angular.module('ngSeApi').factory('seaUser', ['SeaRequest', 'seaUserGroup', 'seaUserSetting', 'seaUserSubstitude',\n    function seaUser(SeaRequest, seaUserGroup, seaUserSetting, seaUserSubstitude) {\n            var request = new SeaRequest('user/{uId}'),\n                requestCustomer = new SeaRequest('user/{uId}/customer');\n        \n            function create(params) {\n                return request.post(params);\n            }\n\n            function get(uId) {\n                return request.get({\n                    uId: uId\n                });\n            }\n\n            function update(user) {\n                return request.put(user);\n            }\n\n            function destroy(uId) {\n                return request.del({\n                    uId: uId\n                });\n            }\n\n            function search(params) {\n                return request.get(params);\n            }\n        \n            function listCustomers(uId) {\n                return requestCustomer.get({\n                    uId: uId\n                });\n            }\n\n            return {\n                /**\n                 * create user\n                 * @param {Object} params\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                create: function (params) {\n                    return create(params);\n                },\n\n                get: function (gId) {\n                    return get(gId);\n                },\n\n                /**\n                 * update user\n                 * @param {Object} user\n                 * @config {String} [customerId]\n                 * @config {String} [prename]\n                 * @config {String} [surname]\n                 * @config {String} [email]\n                 * @config {Number} [role]\n                 * @config {String} [phone]\n                 */\n                update: function (user) {\n                    return update(user);\n                },\n\n                destroy: function (uId) {\n                    return destroy(uId);\n                },\n\n                /**\n                 * search users\n                 * @param   {Object}   params\n                 * @config  {String}   [query]\n                 * @config  {String}   [customerId]\n                 * @config  {Boolean}  [includeLocation]\n                 */\n                search: function (params) {\n                    return search(params);\n                },\n\n                setting: seaUserSetting,\n                group: seaUserGroup,\n                substitude: seaUserSubstitude,\n                customer: {\n                    list: function (uId) {\n                        return listCustomers(uId);\n                    }\n                }\n            };\n    }]);\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchHistory', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest('https://patch.server-eye.de/seias/rest/seocc/patch/1.0/container/history/{action}');\r\n        \r\n            function format(container) {\r\n                if(!container.JobList) {\r\n                    return container;\r\n                }\r\n                \r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if(job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId, paging) {\r\n                return list(customerId, [cId], paging).then(function (history) {\r\n                    return (history[0] || {}).JobList;\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, paging) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                if(paging) {\r\n                    query.Index = paging.index;\r\n                    query.Count = paging.count;\r\n                }\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId, paging) {\r\n                    return get(customerId, cId, paging);\r\n                },\r\n\r\n                list: function (customerId, containerIds, paging) {\r\n                    return list(customerId, containerIds, paging);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchInstall', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest('https://patch.server-eye.de/seias/rest/seocc/patch/1.0/container/install/{action}');\r\n\r\n            function format(container) {\r\n                if (!container.JobList) {\r\n                    return container;\r\n                }\r\n\r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime', 'PlannedStartTime'].forEach(function (key) {\r\n                        if (job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return container;\r\n            }\r\n\r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (install) {\r\n                    return install[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds, params) {\r\n                var query;\r\n                params = params || {};\r\n\r\n                if (params.jobIds) {\r\n                    query = helper.getJobIds(params.jobIds);\r\n                    query.action = 'software';\r\n                } else {\r\n                    query = helper.getContainerIds(containerIds);\r\n                    query.action = 'get';\r\n                }\r\n\r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n\r\n            function create(params) {\r\n                var customerId = params.customerId,\r\n                    containerId = params.containerId,\r\n                    categories = params.categories,\r\n                    software = params.softwareId,\r\n                    cron = params.cron,\r\n                    postInstall = params.postInstall;\r\n\r\n                var reqParams = {\r\n                    Cron: cron\r\n                };\r\n\r\n                reqParams = angular.extend(reqParams, helper.getContainerIds(containerId));\r\n\r\n                if (categories) {\r\n                    reqParams.CategoryList = categories;\r\n                }\r\n                if (software) {\r\n                    reqParams = angular.extend(reqParams, helper.getSoftwareIds(software));\r\n                }\r\n                if (postInstall == null) {\r\n                    postInstall = 'NOTHING';\r\n                }\r\n\r\n                reqParams.PostAction = postInstall;\r\n\r\n                return request.post(reqParams).then(helper.idListResult);\r\n            }\r\n\r\n            function destroy(customerId, jobId) {\r\n                var query = helper.getJobIds(jobId);\r\n\r\n                return request.del(query).then(helper.idListResult);\r\n            }\r\n\r\n            function getSoftware(customerId, jobId) {\r\n                return listSoftware(customerId, [jobId]).then(function (install) {\r\n                    return (install[0] || {}).SoftwareInfoList || [];\r\n                });\r\n            }\r\n\r\n            function listSoftware(customerId, jobIds) {\r\n                var query = helper.getJobIds(jobIds);\r\n                query.action = 'software';\r\n\r\n                return request.post(query);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds, params) {\r\n                    return list(customerId, containerIds, params);\r\n                },\r\n\r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerId]\r\n                 * @config {String|Array} [softwareId]\r\n                 * @config {Array} [categories]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                },\r\n\r\n                destroy: function (customerId, jobId) {\r\n                    return destroy(customerId, jobId);\r\n                },\r\n\r\n                getSoftware: function (customerId, jobId) {\r\n                    return getSoftware(customerId, jobId);\r\n                },\r\n\r\n                listSoftware: function (customerId, jobIds) {\r\n                    return listSoftware(customerId, jobIds);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchScan', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest('https://patch.server-eye.de/seias/rest/seocc/patch/1.0/container/scan/{action}');\r\n        \r\n            function format(container) {\r\n                if(!container.JobList) {\r\n                    return container;\r\n                }\r\n                \r\n                container.JobList.forEach(function (job) {\r\n                    ['StartTime', 'EndTime'].forEach(function (key) {\r\n                        if(job[key]) {\r\n                            job[key] = new Date(job[key]);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                return container;\r\n            }\r\n                \r\n            function get(customerId, cId) {\r\n                return list(customerId, [cId]).then(function (scan) {\r\n                    return scan[0];\r\n                });\r\n            }\r\n\r\n            function list(customerId, containerIds) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n                \r\n                return request.post(query).then(function (containers) {\r\n                    containers.forEach(format);\r\n                    return containers;\r\n                });\r\n            }\r\n        \r\n            function create(params) {\r\n                var query = helper.getContainerIds(params.containerIds);\r\n                query.Cron = params.cron;\r\n                \r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                get: function (customerId, cId) {\r\n                    return get(customerId, cId);\r\n                },\r\n\r\n                list: function (customerId, containerIds) {\r\n                    return list(customerId, containerIds);\r\n                },\r\n                \r\n                /**\r\n                 * create scan job\r\n                 * @param {Object} params\r\n                 * @config {String} [customerId]\r\n                 * @config {String|Array} [containerIds]\r\n                 * @config {String} [cron]\r\n                 */\r\n                create: function (params) {\r\n                    return create(params);\r\n                }\r\n            };\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('ngSeApi').factory('seaRemotingPatchSoftware', ['$http', 'SeaRequest', 'seaRemotingIasHelper',\r\n    function seaRemotingPcvisit($http, SeaRequest, helper) {\r\n            var request = new SeaRequest('https://patch.server-eye.de/seias/rest/seocc/patch/1.0/container/software/{action}'),\r\n                requestSoftware = new SeaRequest('https://patch.server-eye.de/seias/rest/seocc/patch/1.0/software/{method}/{action}');\r\n\r\n            function get(customerId, softwareId) {\r\n                var query = helper.getSoftwareIds(softwareId);\r\n                query.method = 'get';\r\n\r\n                return requestSoftware.post(query).then(function (result) { return result[0]; });\r\n            }\r\n        \r\n            function getByContainer(customerId, cId, params) {\r\n                return listByContainer(customerId, [cId], params).then(function (software) {\r\n                    return software[0];\r\n                });\r\n            }\r\n\r\n            function listByContainer(customerId, containerIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.action = 'get';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                if (params.blocked == null) {\r\n                    query.Blocked = 'BOTH';\r\n                } else {\r\n                    query.Blocked = params.blocked ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return request.post(query);\r\n            }\r\n\r\n            function has(customerId, containerIds, softwareIds, params) {\r\n                var query = helper.getContainerIds(containerIds);\r\n                query.SoftwareIdList = helper.getSoftwareIds(softwareIds).SoftwareIdList;\r\n                query.method = 'container';\r\n\r\n                params = params || {};\r\n\r\n                if (params.installed == null) {\r\n                    query.Installed = 'BOTH';\r\n                } else {\r\n                    query.Installed = params.installed ? 'TRUE' : 'FALSE';\r\n                }\r\n\r\n                return requestSoftware.post(query);\r\n            }\r\n\r\n            function block(customerId, containerIds, softwareIds, isBlocked) {\r\n                var query = angular.extend(\r\n                    helper.getContainerIds(containerIds),\r\n                    helper.getSoftwareIds(softwareIds)\r\n                );\r\n                query.action = 'block';\r\n                query.Blocked = isBlocked;\r\n\r\n                return request.post(query).then(helper.idListResult);\r\n            }\r\n\r\n            return {\r\n                container: {\r\n                    /**\r\n                     * list software of container\r\n                     * @param {String} customerId\r\n                     * @param {String} containerId\r\n                     * @param {Object} params\r\n                     * @config {Boolean} [installed]\r\n                     * @config {Boolean} [blocked]\r\n                     */\r\n                    get: function (customerId, containerId, params) {\r\n                        return getByContainer(customerId, containerId, params);\r\n                    },\r\n\r\n                    list: function (customerId, containerIds, params) {\r\n                        return listByContainer(customerId, containerIds, params);\r\n                    }\r\n                },\r\n\r\n                get: function(customerId, softwareId) {\r\n                    return get(customerId, softwareId);\r\n                },\r\n                \r\n                /**\r\n                 * find out if a container has a specific software installed\r\n                 * @param {String} customerId\r\n                 * @param {String} containerId\r\n                 * @param {String} softwareId\r\n                 * @param {Object} params\r\n                 * @config {Boolean} [installed]\r\n                 */\r\n                has: function (customerId, containerId, softwareId, params) {\r\n                    return has(customerId, containerId, softwareId, params);\r\n                },\r\n\r\n                /**\r\n                 * block software on containers\r\n                 * @param   {String}   customerId   \r\n                 * @param   {String|Array}   containerIds \r\n                 * @param   {String|Array}   softwareIds  \r\n                 * @param   {Boolean}  isBlocked\r\n                 */\r\n                block: function (customerId, containerIds, softwareIds, isBlocked) {\r\n                    return block(customerId, containerIds, softwareIds, isBlocked);\r\n                }\r\n            };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}